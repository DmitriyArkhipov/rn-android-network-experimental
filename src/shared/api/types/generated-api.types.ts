/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    '/healthcheck': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Healthcheck */
        get: operations['healthcheck_healthcheck_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rate_limit_test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Rate Limit Test */
        get: operations['rate_limit_test_rate_limit_test_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Account
         * @deprecated
         * @description Use /v1/accounts/search
         */
        get: operations['search_account_accounts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/hhresumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resumes
         * @deprecated
         */
        get: operations['get_resumes_accounts_hhresumes_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Account
         * @deprecated
         * @description Use /v1/accounts/me
         */
        get: operations['get_current_account_accounts_me_get'];
        /** Update Current Account */
        put: operations['update_current_account_accounts_me_put'];
        post?: never;
        /** Delete Current Account */
        delete: operations['delete_current_account_accounts_me_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Info */
        get: operations['get_user_info_accounts_me_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Current Account Status */
        post: operations['set_current_account_status_accounts_me_status_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User Posts */
        get: operations['get_current_user_posts_accounts_me_posts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Current Account Avatar */
        put: operations['update_current_account_avatar_accounts_me_avatar_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/tags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Current Account Tags */
        put: operations['set_current_account_tags_accounts_me_tags_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/work_experience': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create Or Update Account Work Experience
         * @deprecated
         * @description Use /v1/accounts/me/work_experience
         */
        put: operations['create_or_update_account_work_experience_accounts_me_work_experience_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/key_skills': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Account Key Skills */
        post: operations['add_account_key_skills_accounts_me_key_skills_post'];
        /** Delete Account Key Skills */
        delete: operations['delete_account_key_skills_accounts_me_key_skills_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/relations_summary': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current Account Relations Summary */
        get: operations['current_account_relations_summary_accounts_me_relations_summary_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{account_id}/relations_summary': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Relations Summary */
        get: operations['get_account_relations_summary_accounts__account_id__relations_summary_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{account_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complaint About Account */
        post: operations['complaint_about_account_accounts__account_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/relation/{relation_type}/{direction}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Current Account Relations */
        get: operations['search_current_account_relations_accounts_me_relation__relation_type___direction__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{account_id}/key_skills/confirm': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Account Help Me */
        post: operations['mark_account_help_me_accounts__account_id__key_skills_confirm_post'];
        /** Delete Key Skill Confirm */
        delete: operations['delete_key_skill_confirm_accounts__account_id__key_skills_confirm_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account By Id
         * @deprecated
         * @description Use /v1/accounts/by_id
         */
        get: operations['get_account_by_id_accounts_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{account_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Write Message To Account */
        post: operations['write_message_to_account_accounts__account_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Messaging Channels */
        get: operations['get_current_account_messaging_channels_accounts_me_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/comments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Comments */
        get: operations['get_current_account_comments_accounts_me_comments_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/channels/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Messaging Channels Unread Count */
        get: operations['get_current_account_messaging_channels_unread_count_accounts_me_channels_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/me/onboarding_state': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Onboarding State */
        get: operations['get_current_account_onboarding_state_accounts_me_onboarding_state_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/analytics/client_event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Client Event */
        post: operations['log_client_event_analytics_client_event_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/oauth/token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Oauth Token Handler */
        post: operations['oauth_token_handler_auth_oauth_token_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/external/start/{auth_system}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Start External Auth */
        get: operations['start_external_auth_auth_external_start__auth_system__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/external/handle_code': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** External Auth Code Handler */
        get: operations['external_auth_code_handler_auth_external_handle_code_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/oauth/token/invalidate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invalidate Current Access Token */
        post: operations['invalidate_current_access_token_auth_oauth_token_invalidate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/logout': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations['logout_auth_logout_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/captcha/new': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate New Captcha */
        post: operations['generate_new_captcha_captcha_new_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/captcha/verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate New Captcha */
        post: operations['generate_new_captcha_captcha_verify_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Post Deprecated
         * @deprecated
         * @description DEPRECATED - use POST /posts
         */
        post: operations['create_post_deprecated_channels_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Post In Community
         * @deprecated
         * @description DEPRECATED - use POST /posts
         */
        post: operations['create_post_in_community_channels__channel_id__channels_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Post
         * @deprecated
         * @description DEPRECATED - use POST /posts
         */
        post: operations['create_post_channels_posts_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/tags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Tags */
        get: operations['get_channel_tags_channels__channel_id__tags_get'];
        /** Set Channel Tags */
        put: operations['set_channel_tags_channels__channel_id__tags_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/search/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Posts Global
         * @deprecated
         * @description DEPRECATED - use GET /posts/search
         */
        get: operations['search_posts_global_channels_search_posts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/search/communities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Communities Global
         * @deprecated
         * @description DEPRECATED - use POST /communities/search
         */
        get: operations['search_communities_global_channels_search_communities_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Favorites Channels */
        get: operations['get_favorites_channels_channels_favorites_get'];
        /** Add Channel To Favorites */
        put: operations['add_channel_to_favorites_channels_favorites_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Post Old
         * @deprecated
         * @description DEPRECATED - use PUT /posts/{post_id}
         */
        put: operations['update_post_old_channels__channel_id__put'];
        post?: never;
        /** Delete Channel */
        delete: operations['delete_channel_channels__channel_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Subscribe To Channel */
        put: operations['subscribe_to_channel_channels__channel_id__subscription_put'];
        post?: never;
        /** Unsubscribe From Channel */
        delete: operations['unsubscribe_from_channel_channels__channel_id__subscription_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/favorites/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Channel From Favorites */
        delete: operations['delete_channel_from_favorites_channels_favorites__channel_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/favorites/{channel_id}/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Favorites Accounts */
        get: operations['get_channel_favorites_accounts_channels_favorites__channel_id__accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/favorites/count/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Favorites Accounts By Id */
        get: operations['get_channel_favorites_accounts_by_id_channels_favorites_count_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Messages */
        get: operations['get_channel_messages_channels__channel_id__messages_get'];
        put?: never;
        /** Send Message To Channel */
        post: operations['send_message_to_channel_channels__channel_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/block': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Block Channel For User */
        put: operations['block_channel_for_user_channels__channel_id__block_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/unblock': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Unblock Channel For User */
        put: operations['unblock_channel_for_user_channels__channel_id__unblock_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/leave': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Leave Channel By User */
        put: operations['leave_channel_by_user_channels__channel_id__leave_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/join': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Join Channel By User */
        put: operations['join_channel_by_user_channels__channel_id__join_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Channel Complaint */
        post: operations['add_channel_complaint_channels__channel_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/{channel_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Channel Read */
        put: operations['mark_channel_read_channels__channel_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channels By Id */
        get: operations['get_channels_by_id_channels_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/channels/posts/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Feed
         * @deprecated
         * @description Trash, only for schema generation
         */
        get: operations['get_user_feed_channels_posts_feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Community */
        post: operations['create_community_communities_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Community */
        put: operations['update_community_communities__community_id__put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Community Complaint */
        post: operations['add_community_complaint_communities__community_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Community Read */
        put: operations['mark_community_read_communities__community_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}/invite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite User To Community */
        post: operations['invite_user_to_community_communities__community_id__invite_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}/join_request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ask To Join Community */
        post: operations['ask_to_join_community_communities__community_id__join_request_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/{community_id}/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Subscribe To Community */
        put: operations['subscribe_to_community_communities__community_id__subscription_put'];
        post?: never;
        /** Unsubscribe From Community */
        delete: operations['unsubscribe_from_community_communities__community_id__subscription_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Communities */
        get: operations['get_recommended_communities_communities_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/for_new_post': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Communities For New Post */
        get: operations['get_communities_for_new_post_communities_for_new_post_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Communities */
        get: operations['search_communities_communities_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/communities/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get My Communities */
        get: operations['get_my_communities_communities_me_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/referral/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Referral Invites Count */
        get: operations['get_referral_invites_count_invite_referral_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/referral/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Referral Invites */
        get: operations['get_referral_invites_invite_referral_all_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/referral/sent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sent Referral Invites */
        get: operations['get_sent_referral_invites_invite_referral_sent_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/{invite_id}/validate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate Invite */
        get: operations['validate_invite_invite__invite_id__validate_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/{invite_id}/mark_sent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Invite */
        post: operations['validate_invite_invite__invite_id__mark_sent_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/{invite_id}/activate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate Invite */
        post: operations['activate_invite_invite__invite_id__activate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/invite/{invite_id}/postback': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bind Invite */
        get: operations['bind_invite_invite__invite_id__postback_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}/threads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Message Thread */
        post: operations['start_message_thread_messages__message_id__threads_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Message */
        put: operations['edit_message_messages__message_id__put'];
        post?: never;
        /** Delete Message */
        delete: operations['delete_message_messages__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}/restore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore Message */
        post: operations['restore_message_messages__message_id__restore_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Message Complaint */
        post: operations['add_message_complaint_messages__message_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}/reaction/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Reaction */
        post: operations['add_reaction_messages__message_id__reaction_add_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/messages/{message_id}/reaction/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Reaction */
        post: operations['remove_reaction_messages__message_id__reaction_remove_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/tasks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Tasks */
        get: operations['get_moderation_tasks_moderation_tasks_get'];
        /** Send Entity To Moderation */
        put: operations['send_entity_to_moderation_moderation_tasks_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/tasks/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Tasks Count */
        get: operations['get_moderation_tasks_count_moderation_tasks_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/tasks/{task_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Task */
        get: operations['get_moderation_task_moderation_tasks__task_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/tasks/{task_id}/complete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete Moderation Task */
        post: operations['complete_moderation_task_moderation_tasks__task_id__complete_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/accounts/{account_id}/delo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Delo */
        get: operations['get_account_delo_moderation_accounts__account_id__delo_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/channel/{channel_id}/change_publication_date': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change Channel Publication Date */
        post: operations['change_channel_publication_date_moderation_channel__channel_id__change_publication_date_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/moderation/posts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Posts */
        get: operations['search_posts_moderation_posts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/mark_all_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark All Notification Read */
        put: operations['mark_all_notification_read_notifications_mark_all_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/{notification_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Notification Read */
        put: operations['mark_notification_read_notifications__notification_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/{notification_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Notification */
        delete: operations['delete_notification_notifications__notification_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notifications Count */
        get: operations['get_notifications_count_notifications_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/notifications': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User Notifications List */
        get: operations['get_current_user_notifications_list_notifications_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/otp/generate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send One Time Password */
        post: operations['send_one_time_password_otp_generate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/otp/get_captcha_status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Get Otp Captcha Status */
        put: operations['get_otp_captcha_status_otp_get_captcha_status_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/otp/get_send_allowed_status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Get Otp Send Allowed Status */
        put: operations['get_otp_send_allowed_status_otp_get_send_allowed_status_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/participants/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Participants By Id */
        get: operations['get_participants_by_id_participants_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/participants/p2p_opponents_by_channel_id/short': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Participants By Id Short */
        get: operations['get_participants_by_id_short_participants_p2p_opponents_by_channel_id_short_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create New Post */
        post: operations['create_new_post_posts_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Post */
        put: operations['update_post_posts__channel_id__put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/{channel_id}/desired_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Desired Info */
        get: operations['get_post_desired_info_posts__channel_id__desired_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Posts */
        get: operations['search_posts_posts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/feed/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Subscriptions Feed */
        get: operations['get_account_subscriptions_feed_posts_feed_subscription_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/{channel_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Messages */
        get: operations['get_post_messages_posts__channel_id__messages_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/trends': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Posts Trends
         * @description Trash, only for schema generation
         */
        get: operations['get_posts_trends_posts_trends_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/posts/feed/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Recommendation Feed
         * @description Trash, only for schema generation
         */
        get: operations['get_account_recommendation_feed_posts_feed_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/push/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Push Subscription */
        post: operations['add_push_subscription_push_subscription_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/push/models': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Describe Models
         * @description Добавлен для генерации модели с описанием тела пушей в документации
         */
        post: operations['describe_models_push_models_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/site/channel/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect To Appmetrica */
        get: operations['redirect_to_appmetrica_site_channel__channel_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Status Handler */
        get: operations['status_handler_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/status/500': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bad Status Handler */
        get: operations['bad_status_handler_status_500_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/status/proxy/recommends': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Posts Trends */
        get: operations['get_posts_trends_status_proxy_recommends_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/suggest/city': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get City Suggest */
        get: operations['get_city_suggest_suggest_city_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/suggest/place': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Place Suggest */
        get: operations['get_place_suggest_suggest_place_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/suggest/country': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Country Suggest */
        get: operations['get_country_suggest_suggest_country_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/suggest/{suggest_name}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Suggest */
        get: operations['get_suggest_suggest__suggest_name__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions */
        get: operations['get_support_sessions_support_sessions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/sessions/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions Count */
        get: operations['get_support_sessions_count_support_sessions_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/{account_id}/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Support Session */
        get: operations['get_account_support_session_support__account_id__session_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/{account_id}/session/assign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Support Session */
        post: operations['assign_support_session_support__account_id__session_assign_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/{account_id}/session/close': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close Support Session */
        post: operations['close_support_session_support__account_id__session_close_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/support/{account_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Support Messages */
        get: operations['get_account_support_messages_support__account_id__messages_get'];
        put?: never;
        /** Send Message To Account */
        post: operations['send_message_to_account_support__account_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/tags/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Tags */
        get: operations['get_recommended_tags_tags_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/tags/for_report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tags For Bag Reports */
        get: operations['get_tags_for_bag_reports_tags_for_report_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/uploads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload File */
        put: operations['upload_file_uploads_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/uploads/{upload_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Proxy Request To S3 */
        get: operations['get_proxy_request_to_s3_uploads__upload_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/uploads/{upload_id}/redirect': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upload By Redirect */
        get: operations['get_upload_by_redirect_uploads__upload_id__redirect_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ws/url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ws Connection Url */
        get: operations['get_ws_connection_url_ws_url_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ws/describe_models': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Describe Models
         * @description Добавлен для генерации модели с описанием тела пушей в документации
         */
        post: operations['describe_models_ws_describe_models_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ws/incoming_models': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Describe Models
         * @description Добавлен для генерации модели с описанием тела пушей в документации
         */
        post: operations['describe_models_ws_incoming_models_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/ws/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Ping Message */
        post: operations['send_ping_message_ws_ping_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/yandexgpt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Yandex Gpt Handler */
        post: operations['yandex_gpt_handler_yandexgpt_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/shortener/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url */
        get: operations['get_long_url_shortener__short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/shortener/{url_type}/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url With Type */
        get: operations['get_long_url_with_type_shortener__url_type___short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/get_bind_token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Bind Token */
        post: operations['get_bind_token_v1_tg_get_bind_token_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/authenticate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Permanent Token */
        post: operations['get_permanent_token_v1_tg_authenticate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tg Status */
        get: operations['get_tg_status_v1_tg_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/destinations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Destinations */
        get: operations['get_destinations_v1_tg_destinations_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/bind_channel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bind Channel */
        post: operations['bind_channel_v1_tg_bind_channel_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/bindings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Bundles */
        get: operations['get_channel_bundles_v1_tg_bindings_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/bindings/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Channel Bundle */
        post: operations['delete_channel_bundle_v1_tg_bindings_delete_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Tg Bundle */
        post: operations['reset_tg_bundle_v1_tg_reset_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/reset_via_tg': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Tg Bundle */
        post: operations['reset_tg_bundle_v1_tg_reset_via_tg_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Accounts */
        get: operations['get_recommended_accounts_v1_recommendation_accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Communities */
        get: operations['get_recommended_communities_v1_recommendation_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/social_groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommended Social Groups
         * @description Get recommended channels and communities for the user
         */
        get: operations['get_recommended_social_groups_v1_recommendation_social_groups_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/vacancies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancies Posts */
        get: operations['get_vacancies_posts_v1_recommendation_vacancies_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/vacancies/preview_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancies Preview Info */
        get: operations['get_vacancies_preview_info_v1_recommendation_vacancies_preview_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/vacancies/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancies Roles */
        get: operations['get_vacancies_roles_v1_recommendation_vacancies_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/resumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Posts */
        get: operations['get_resumes_posts_v1_recommendation_resumes_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/resumes/preview_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Preview Info */
        get: operations['get_resumes_preview_info_v1_recommendation_resumes_preview_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/recommendation/resumes/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Roles */
        get: operations['get_resumes_roles_v1_recommendation_resumes_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/companies/industries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Domains */
        get: operations['get_domains_v1_companies_industries_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/companies/freelance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Freelance Company */
        get: operations['get_freelance_company_v1_companies_freelance_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Info */
        get: operations['get_user_info_v1_accounts_me_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account */
        get: operations['get_current_account_v1_accounts_me_get'];
        /** Update Current Account */
        put: operations['update_current_account_v1_accounts_me_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Current Account Status */
        post: operations['set_current_account_status_v1_accounts_me_status_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User Posts */
        get: operations['get_current_user_posts_v1_accounts_me_posts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Current Account Avatar */
        put: operations['update_current_account_avatar_v1_accounts_me_avatar_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/tags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Current Account Tags */
        put: operations['set_current_account_tags_v1_accounts_me_tags_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/key_skills': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Account Key Skills */
        post: operations['add_account_key_skills_v1_accounts_me_key_skills_post'];
        /** Delete Account Key Skills */
        delete: operations['delete_account_key_skills_v1_accounts_me_key_skills_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/relations_summary': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current Account Relations Summary */
        get: operations['current_account_relations_summary_v1_accounts_me_relations_summary_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/relations_summary': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Relations Summary */
        get: operations['get_account_relations_summary_v1_accounts__account_id__relations_summary_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complaint About Account */
        post: operations['complaint_about_account_v1_accounts__account_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/key_skills/confirm': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Account Help Me */
        post: operations['mark_account_help_me_v1_accounts__account_id__key_skills_confirm_post'];
        /** Delete Key Skill Confirm */
        delete: operations['delete_key_skill_confirm_v1_accounts__account_id__key_skills_confirm_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Write Message To Account */
        post: operations['write_message_to_account_v1_accounts__account_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Messaging Channels */
        get: operations['get_current_account_messaging_channels_v1_accounts_me_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/comments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Comments */
        get: operations['get_current_account_comments_v1_accounts_me_comments_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/channels/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Messaging Channels Unread Count */
        get: operations['get_current_account_messaging_channels_unread_count_v1_accounts_me_channels_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/onboarding_state': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Onboarding State */
        get: operations['get_current_account_onboarding_state_v1_accounts_me_onboarding_state_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/work_experience': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create Or Update Account Work Experience */
        put: operations['create_or_update_account_work_experience_v1_accounts_me_work_experience_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Account */
        get: operations['search_account_v1_accounts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/relation/FOLLOW/{direction}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Current Account Relations */
        get: operations['search_current_account_relations_v1_accounts_me_relation_FOLLOW__direction__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account By Id */
        get: operations['get_account_by_id_v1_accounts_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/by_uuid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account By Uuid */
        get: operations['get_account_by_uuid_v1_accounts_by_uuid_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/send_push_to_nsc_kafka': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Push To Nsc */
        post: operations['send_push_to_nsc_v1_accounts_send_push_to_nsc_kafka_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/send_push_to_nsc_direct': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Push To Nsc Direct */
        post: operations['send_push_to_nsc_direct_v1_accounts_send_push_to_nsc_direct_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/relation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Relation To Account */
        put: operations['set_relation_to_account_v1_accounts__account_id__relation_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Posts */
        get: operations['get_account_posts_v1_accounts__account_id__posts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/comments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Comments */
        get: operations['get_account_comments_v1_accounts__account_id__comments_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/relation/{relation_type}/{direction}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Account Relations */
        get: operations['search_account_relations_v1_accounts__account_id__relation__relation_type___direction__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/subscriptions/communities/groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Subscriptions Communities Groups */
        get: operations['get_current_account_subscriptions_communities_groups_v1_accounts_me_subscriptions_communities_groups_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/me/subscriptions/communities/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Subscriptions Unread Communities Count */
        get: operations['get_current_account_subscriptions_unread_communities_count_v1_accounts_me_subscriptions_communities_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/relationships/{to_account_id}/through/{through_account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Path Through
         * @description обоснование силы связи через другого пользователя
         */
        get: operations['get_relationship_path_through_v1_accounts_relationships__to_account_id__through__through_account_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/relationships/{to_account_id}/persons': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Persons
         * @description Список пользователей отфильтрованный по силе связи
         */
        get: operations['get_relationship_persons_v1_accounts_relationships__to_account_id__persons_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/relationships/{to_account_id}/persons_counters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Counters
         * @description Количество связей по силам для пользователя
         */
        get: operations['get_relationship_counters_v1_accounts_relationships__to_account_id__persons_counters_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/relationships/{to_account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Relationship Path */
        get: operations['get_relationship_path_v1_accounts_relationships__to_account_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/{account_id}/work_experience/{experience_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Work Exp Complaint
         * @description Создать жалобу на опыт работы
         */
        post: operations['create_work_exp_complaint_v1_accounts__account_id__work_experience__experience_id__complaint_post'];
        /**
         * Delete Work Exp Complaint
         * @description Удалить жалобу на опыт работы
         */
        delete: operations['delete_work_exp_complaint_v1_accounts__account_id__work_experience__experience_id__complaint_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/accounts/session_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Session Metadata */
        post: operations['post_session_metadata_v1_accounts_session_metadata_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/webhooks/support-chat/{scenario_code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Save Message From Helpdesk */
        post: operations['save_message_from_helpdesk_v1_webhooks_support_chat__scenario_code__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tg/post': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Post */
        post: operations['create_post_v1_tg_post_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/shortener': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Short Url */
        post: operations['create_short_url_v1_shortener_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/shortener/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url */
        get: operations['get_long_url_v1_shortener__short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/shortener/{url_type}/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url With Type */
        get: operations['get_long_url_with_type_v1_shortener__url_type___short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks */
        get: operations['get_networks_v1_networks_me_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/profile': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Profile */
        get: operations['get_profile_v1_networks_profile_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Networks
         * @description FTS for networks
         */
        get: operations['search_networks_v1_networks_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/by_account_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks By Account Id */
        get: operations['get_networks_by_account_id_v1_networks_by_account_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/by_company_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks By Company Id */
        get: operations['get_networks_by_company_id_v1_networks_by_company_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks Members */
        get: operations['get_networks_members_v1_networks_members_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/types': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Types */
        get: operations['get_network_types_v1_networks_types_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/mark-viewed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark Viewed */
        patch: operations['mark_viewed_v1_networks_mark_viewed_patch'];
        trace?: never;
    };
    '/v1/networks/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Networks Feed
         * @description Get feed for all user networks
         */
        get: operations['get_networks_feed_v1_networks_feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network By Id */
        get: operations['get_network_by_id_v1_networks__network_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Members By Network Id */
        get: operations['get_network_members_by_network_id_v1_networks__network_id__members_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/members/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Network Members */
        get: operations['search_network_members_v1_networks__network_id__members_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Change Network Settings */
        patch: operations['change_network_settings_v1_networks__network_id__settings_patch'];
        trace?: never;
    };
    '/v1/networks/{network_id}/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Feed
         * @description Get feed for current network
         */
        get: operations['get_network_feed_v1_networks__network_id__feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Info
         * @description Get network info for feed
         */
        get: operations['get_network_info_v1_networks__network_id__info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/unread_notification_about_presence/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unread Presence Notification */
        get: operations['get_unread_presence_notification_v1_networks_unread_notification_about_presence_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/vacancies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Vacancies
         * @description Get network vacancies
         */
        get: operations['get_network_vacancies_v1_networks__network_id__vacancies_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Roles
         * @description Get network roles
         */
        get: operations['get_network_roles_v1_networks__network_id__roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/networks/{network_id}/vacancies/counter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Vacancies Count
         * @description Get network vacancies count
         */
        get: operations['get_network_vacancies_count_v1_networks__network_id__vacancies_counter_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/reactions/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Reaction */
        post: operations['add_reaction_v1_chats_reactions__message_id__post'];
        /** Remove Reaction */
        delete: operations['remove_reaction_v1_chats_reactions__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chats */
        get: operations['get_chats_v1_chats_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/share': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chats Partners */
        get: operations['get_chats_partners_v1_chats_share_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/{recipient_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chat Messages */
        get: operations['get_chat_messages_v1_chats__recipient_id__get'];
        put?: never;
        post?: never;
        /** Remove Chat */
        delete: operations['remove_chat_v1_chats__recipient_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Messages */
        post: operations['send_messages_v1_chats_messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/messages/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Message */
        put: operations['update_message_v1_chats_messages__message_id__put'];
        post?: never;
        /** Remove Message */
        delete: operations['remove_message_v1_chats_messages__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/{recipient_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Message Read */
        post: operations['mark_message_read_v1_chats__recipient_id__mark_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/messages/{message_id}/attachments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Attachment */
        post: operations['create_attachment_v1_chats_messages__message_id__attachments_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/chats/attachments/{attachment_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Attachment */
        delete: operations['delete_attachment_v1_chats_attachments__attachment_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invites/hh_invite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Invites */
        post: operations['send_invites_v1_invites_hh_invite_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/mark_uninteresting': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Post As Uninteresting */
        post: operations['mark_post_as_uninteresting_v1_posts__post_id__mark_uninteresting_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/mark_uninteresting/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unmark Post As Uninteresting */
        post: operations['unmark_post_as_uninteresting_v1_posts__post_id__mark_uninteresting_cancel_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/stats/views_by_role': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Views By Role Statistics */
        get: operations['get_post_views_by_role_statistics_v1_posts__post_id__stats_views_by_role_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/stats/views_by_group_role': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Views By Group Role Statistics */
        get: operations['get_post_views_by_group_role_statistics_v1_posts__post_id__stats_views_by_group_role_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/view': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add Post View */
        put: operations['add_post_view_v1_posts__post_id__view_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/desired_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Desired Info */
        get: operations['get_post_desired_info_v1_posts__post_id__desired_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{post_id}/full_desired_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Desired Info With Entities */
        get: operations['get_post_desired_info_with_entities_v1_posts__post_id__full_desired_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/push/unsubscribe': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations['logout_v1_push_unsubscribe_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reposts/{post_id}/reposted-by-accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reposted Accounts */
        get: operations['get_reposted_accounts_v1_reposts__post_id__reposted_by_accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reposts/{post_id}/reposted-by-channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reposted Channels */
        get: operations['get_reposted_channels_v1_reposts__post_id__reposted_by_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/reposts/channels-to-repost': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channels To Repost */
        get: operations['get_channels_to_repost_v1_reposts_channels_to_repost_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/uploads/hh': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Proxy To Hh */
        get: operations['get_proxy_to_hh_v1_uploads_hh_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/uploads/default_avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Default Avatar For User */
        get: operations['get_default_avatar_for_user_v1_uploads_default_avatar_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/uploads/icon/{icon_name}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Icon */
        get: operations['get_icon_v1_uploads_icon__icon_name__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/reaction/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Reaction */
        delete: operations['remove_reaction_v1_messages__message_id__reaction_remove_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/reaction/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Reaction */
        post: operations['add_reaction_v1_messages__message_id__reaction_add_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/reactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Message Reactions */
        get: operations['get_message_reactions_v1_messages__message_id__reactions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/mentions/accounts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search */
        get: operations['search_v1_mentions_accounts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/checkstep/webhook': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process Checkstep Webhook */
        post: operations['process_checkstep_webhook_v1_moderation_checkstep_webhook_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/rate-limit/whitelist': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Ip To Ratelimit Whitelist */
        post: operations['set_ip_to_ratelimit_whitelist_v1_rate_limit_whitelist_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/invites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Invites */
        get: operations['get_community_invites_v1_communities__community_id__invites_get'];
        put?: never;
        /** Create Community Invite */
        post: operations['create_community_invite_v1_communities__community_id__invites_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/invites/{invite_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Invite With Community */
        get: operations['get_community_invite_with_community_v1_communities__community_id__invites__invite_id__get'];
        put?: never;
        post?: never;
        /** Delete Community Invite */
        delete: operations['delete_community_invite_v1_communities__community_id__invites__invite_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/join_requests': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Join Requests */
        get: operations['get_community_join_requests_v1_communities__community_id__join_requests_get'];
        put?: never;
        /** Create Community Join Request */
        post: operations['create_community_join_request_v1_communities__community_id__join_requests_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/join_requests/{join_request_id}/approve': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put Community Join Request Accept */
        put: operations['put_community_join_request_accept_v1_communities__community_id__join_requests__join_request_id__approve_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/join_requests/{join_request_id}/hide': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put Community Join Request Hide */
        put: operations['put_community_join_request_hide_v1_communities__community_id__join_requests__join_request_id__hide_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/join_requests/mark_viewed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Community Join Requests Read */
        put: operations['mark_community_join_requests_read_v1_communities__community_id__join_requests_mark_viewed_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/remove_member/{account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Community Member */
        delete: operations['remove_community_member_v1_communities__community_id__remove_member__account_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Communities By Id */
        get: operations['get_communities_by_id_v1_communities_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notification_preferences': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Notification Preferences */
        get: operations['get_user_notification_preferences_v1_notification_preferences_get'];
        /** Update User Notification Preferences */
        put: operations['update_user_notification_preferences_v1_notification_preferences_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Status */
        get: operations['get_status_v1_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/track_push': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Track Push */
        post: operations['track_push_v1_track_push_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/feeds/interactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feeds Interacrions
         * @description Flags for new posts in feeds
         */
        get: operations['get_feeds_interacrions_v1_feeds_interactions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/targeting/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Target Roles */
        get: operations['get_target_roles_v1_targeting_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/targeting/channel/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Target Settings */
        get: operations['get_channel_target_settings_v1_targeting_channel__channel_id__get'];
        put?: never;
        /** Create Or Update Channel Target Settings */
        post: operations['create_or_update_channel_target_settings_v1_targeting_channel__channel_id__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/targeting/account_target': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Target Settings */
        get: operations['get_account_target_settings_v1_targeting_account_target_get'];
        put?: never;
        /** Create Or Update Account Target Settings */
        post: operations['create_or_update_account_target_settings_v1_targeting_account_target_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/targeting/post/{post_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Target Settings */
        get: operations['get_post_target_settings_v1_targeting_post__post_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/mark-all-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark All Notifications As Read */
        post: operations['mark_all_notifications_as_read_v1_notifications_mark_all_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/mark-as-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Notifications As Read */
        post: operations['mark_notifications_as_read_v1_notifications_mark_as_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/unread/total': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unread Total Notifications */
        get: operations['get_unread_total_notifications_v1_notifications_unread_total_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/hide': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hide Notifications */
        post: operations['hide_notifications_v1_notifications_hide_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notification Feed */
        get: operations['get_notification_feed_v1_notifications_feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/mark_all_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark All Notification Read */
        put: operations['mark_all_notification_read_v1_notifications_mark_all_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/{notification_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Notification Read */
        put: operations['mark_notification_read_v1_notifications__notification_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/{notification_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Notification */
        delete: operations['delete_notification_v1_notifications__notification_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notifications Count */
        get: operations['get_notifications_count_v1_notifications_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/notifications': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User Notifications List */
        get: operations['get_current_user_notifications_list_v1_notifications_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/encryption/keys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Key
         * @description Сохранить ключ шифрования пользователя
         */
        post: operations['set_key_v1_encryption_keys_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/encryption/{account_id}/keys/public': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Public Key
         * @description Получить публичный ключ шифрования пользователя
         */
        get: operations['get_public_key_v1_encryption__account_id__keys_public_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/profile_views': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Profile Views */
        get: operations['get_all_profile_views_v1_profile_views_get'];
        put?: never;
        /** Create Profile View */
        post: operations['create_profile_view_v1_profile_views_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/profile_views/mark_all_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark All Profile Views */
        post: operations['mark_all_profile_views_v1_profile_views_mark_all_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/profile_views/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Profile View Settings */
        put: operations['update_profile_view_settings_v1_profile_views_settings_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/vacancies/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancy Status */
        get: operations['get_vacancy_status_v1_vacancies_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/resumes/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resume Status */
        get: operations['get_resume_status_v1_resumes_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/analytics/client_event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Client Event */
        post: operations['log_client_event_v1_analytics_client_event_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/tags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Tags */
        get: operations['get_channel_tags_v1_channels__channel_id__tags_get'];
        /** Set Channel Tags */
        put: operations['set_channel_tags_v1_channels__channel_id__tags_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/favorites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Favorites Channels */
        get: operations['get_favorites_channels_v1_channels_favorites_get'];
        /** Add Channel To Favorites */
        put: operations['add_channel_to_favorites_v1_channels_favorites_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Channel */
        delete: operations['delete_channel_v1_channels__channel_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Subscribe To Channel */
        put: operations['subscribe_to_channel_v1_channels__channel_id__subscription_put'];
        post?: never;
        /** Unsubscribe From Channel */
        delete: operations['unsubscribe_from_channel_v1_channels__channel_id__subscription_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/favorites/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Channel From Favorites */
        delete: operations['delete_channel_from_favorites_v1_channels_favorites__channel_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/favorites/{channel_id}/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Favorites Accounts */
        get: operations['get_channel_favorites_accounts_v1_channels_favorites__channel_id__accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/favorites/count/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Favorites Accounts By Id */
        get: operations['get_channel_favorites_accounts_by_id_v1_channels_favorites_count_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Messages */
        get: operations['get_channel_messages_v1_channels__channel_id__messages_get'];
        put?: never;
        /** Send Message To Channel */
        post: operations['send_message_to_channel_v1_channels__channel_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/block': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Block Channel For User */
        put: operations['block_channel_for_user_v1_channels__channel_id__block_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/unblock': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Unblock Channel For User */
        put: operations['unblock_channel_for_user_v1_channels__channel_id__unblock_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/leave': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Leave Channel By User */
        put: operations['leave_channel_by_user_v1_channels__channel_id__leave_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/join': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Join Channel By User */
        put: operations['join_channel_by_user_v1_channels__channel_id__join_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Channel Complaint */
        post: operations['add_channel_complaint_v1_channels__channel_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/{channel_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Channel Read */
        put: operations['mark_channel_read_v1_channels__channel_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/channels/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channels By Id */
        get: operations['get_channels_by_id_v1_channels_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Community */
        post: operations['create_community_v1_communities_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Community */
        put: operations['update_community_v1_communities__community_id__put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Community Complaint */
        post: operations['add_community_complaint_v1_communities__community_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Community Read */
        put: operations['mark_community_read_v1_communities__community_id__mark_read_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/invite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite User To Community */
        post: operations['invite_user_to_community_v1_communities__community_id__invite_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/join_request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ask To Join Community */
        post: operations['ask_to_join_community_v1_communities__community_id__join_request_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/{community_id}/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Subscribe To Community */
        put: operations['subscribe_to_community_v1_communities__community_id__subscription_put'];
        post?: never;
        /** Unsubscribe From Community */
        delete: operations['unsubscribe_from_community_v1_communities__community_id__subscription_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Communities */
        get: operations['get_recommended_communities_v1_communities_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/for_new_post': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Communities For New Post */
        get: operations['get_communities_for_new_post_v1_communities_for_new_post_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Communities */
        get: operations['search_communities_v1_communities_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/communities/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get My Communities */
        get: operations['get_my_communities_v1_communities_me_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/referral/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Referral Invites Count */
        get: operations['get_referral_invites_count_v1_invite_referral_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/referral/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Referral Invites */
        get: operations['get_referral_invites_v1_invite_referral_all_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/referral/sent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sent Referral Invites */
        get: operations['get_sent_referral_invites_v1_invite_referral_sent_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/{invite_id}/validate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate Invite */
        get: operations['validate_invite_v1_invite__invite_id__validate_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/{invite_id}/mark_sent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Sent Invite */
        post: operations['mark_sent_invite_v1_invite__invite_id__mark_sent_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/{invite_id}/activate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate Invite */
        post: operations['activate_invite_v1_invite__invite_id__activate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/invite/{invite_id}/postback': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bind Invite */
        get: operations['bind_invite_v1_invite__invite_id__postback_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/threads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Message Thread */
        post: operations['start_message_thread_v1_messages__message_id__threads_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Message */
        put: operations['edit_message_v1_messages__message_id__put'];
        post?: never;
        /** Delete Message */
        delete: operations['delete_message_v1_messages__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/restore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore Message */
        post: operations['restore_message_v1_messages__message_id__restore_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/messages/{message_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Message Complaint */
        post: operations['add_message_complaint_v1_messages__message_id__complaint_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/tasks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Tasks */
        get: operations['get_moderation_tasks_v1_moderation_tasks_get'];
        /** Send Entity To Moderation */
        put: operations['send_entity_to_moderation_v1_moderation_tasks_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/tasks/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Tasks Count */
        get: operations['get_moderation_tasks_count_v1_moderation_tasks_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/tasks/{task_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderation Task */
        get: operations['get_moderation_task_v1_moderation_tasks__task_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/tasks/{task_id}/complete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete Moderation Task */
        post: operations['complete_moderation_task_v1_moderation_tasks__task_id__complete_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/accounts/{account_id}/delo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Delo */
        get: operations['get_account_delo_v1_moderation_accounts__account_id__delo_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/channel/{channel_id}/change_publication_date': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change Channel Publication Date */
        post: operations['change_channel_publication_date_v1_moderation_channel__channel_id__change_publication_date_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/moderation/posts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Posts */
        get: operations['search_posts_v1_moderation_posts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/participants/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Participants By Id */
        get: operations['get_participants_by_id_v1_participants_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/participants/p2p_opponents_by_channel_id/short': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Participants By Id Short */
        get: operations['get_participants_by_id_short_v1_participants_p2p_opponents_by_channel_id_short_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create New Post */
        post: operations['create_new_post_v1_posts_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Post */
        put: operations['update_post_v1_posts__channel_id__put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Posts */
        get: operations['search_posts_v1_posts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/feed/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Subscriptions Feed */
        get: operations['get_account_subscriptions_feed_v1_posts_feed_subscription_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/{channel_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Messages */
        get: operations['get_post_messages_v1_posts__channel_id__messages_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/trends': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Posts Trends */
        get: operations['get_posts_trends_v1_posts_trends_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/posts/feed/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Recommendation Feed */
        get: operations['get_account_recommendation_feed_v1_posts_feed_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/push/subscription': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Push Subscription */
        post: operations['add_push_subscription_v1_push_subscription_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/push/models': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Describe Models
         * @description Добавлен для генерации модели с описанием тела пушей в документации
         */
        post: operations['describe_models_v1_push_models_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/site/channel/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect To Appmetrica */
        get: operations['redirect_to_appmetrica_v1_site_channel__channel_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/suggest/city': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get City Suggest */
        get: operations['get_city_suggest_v1_suggest_city_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/suggest/place': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Place Suggest */
        get: operations['get_place_suggest_v1_suggest_place_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/suggest/country': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Country Suggest */
        get: operations['get_country_suggest_v1_suggest_country_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/suggest/{suggest_name}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Suggest */
        get: operations['get_suggest_v1_suggest__suggest_name__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions */
        get: operations['get_support_sessions_v1_support_sessions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/sessions/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions Count */
        get: operations['get_support_sessions_count_v1_support_sessions_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/{account_id}/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Support Session */
        get: operations['get_account_support_session_v1_support__account_id__session_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/{account_id}/session/assign': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Support Session */
        post: operations['assign_support_session_v1_support__account_id__session_assign_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/{account_id}/session/close': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close Support Session */
        post: operations['close_support_session_v1_support__account_id__session_close_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/support/{account_id}/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Support Messages */
        get: operations['get_account_support_messages_v1_support__account_id__messages_get'];
        put?: never;
        /** Send Message To Account */
        post: operations['send_message_to_account_v1_support__account_id__messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tags/recommendation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Tags */
        get: operations['get_recommended_tags_v1_tags_recommendation_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/tags/for_report': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tags For Bag Reports */
        get: operations['get_tags_for_bag_reports_v1_tags_for_report_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/uploads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload File */
        put: operations['upload_file_v1_uploads_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/ws/url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ws Connection Url */
        get: operations['get_ws_connection_url_v1_ws_url_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/ws/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Ping Message */
        post: operations['send_ping_message_v1_ws_ping_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/user_support/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions */
        get: operations['get_support_sessions_v1_user_support_session_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/checklists/job_search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Search Checklist
         * @description Получение чеклиста для поиска работы
         */
        get: operations['get_job_search_checklist_v1_checklists_job_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/get_bind_token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Bind Token */
        post: operations['get_bind_token_v2_tg_get_bind_token_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/authenticate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Permanent Token */
        post: operations['get_permanent_token_v2_tg_authenticate_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tg Status */
        get: operations['get_tg_status_v2_tg_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/destinations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Destinations */
        get: operations['get_destinations_v2_tg_destinations_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/bind_channel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bind Channel */
        post: operations['bind_channel_v2_tg_bind_channel_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/bindings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Bundles */
        get: operations['get_channel_bundles_v2_tg_bindings_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/bindings/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Channel Bundle */
        post: operations['delete_channel_bundle_v2_tg_bindings_delete_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Tg Bundle */
        post: operations['reset_tg_bundle_v2_tg_reset_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/reset_via_tg': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Tg Bundle Via Tg */
        post: operations['reset_tg_bundle_via_tg_v2_tg_reset_via_tg_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Accounts */
        get: operations['get_recommended_accounts_v2_recommendation_accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Communities */
        get: operations['get_recommended_communities_v2_recommendation_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/social_groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommended Social Groups
         * @description Get recommended channels and communities for the user
         */
        get: operations['get_recommended_social_groups_v2_recommendation_social_groups_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/vacancies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancies Posts */
        get: operations['get_vacancies_posts_v2_recommendation_vacancies_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/vacancies/preview_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancies Preview Info */
        get: operations['get_vacancies_preview_info_v2_recommendation_vacancies_preview_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/vacancies/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vacancies Roles
         * @description Метод, который получает все доступные роли для фильтрации в вакансиях
         */
        get: operations['get_vacancies_roles_v2_recommendation_vacancies_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/resumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Posts */
        get: operations['get_resumes_posts_v2_recommendation_resumes_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/resumes/preview_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Preview Info */
        get: operations['get_resumes_preview_info_v2_recommendation_resumes_preview_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/recommendation/resumes/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resumes Roles */
        get: operations['get_resumes_roles_v2_recommendation_resumes_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/companies/industries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Domains */
        get: operations['get_domains_v2_companies_industries_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/companies/freelance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Freelance Company */
        get: operations['get_freelance_company_v2_companies_freelance_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/invites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Invites */
        get: operations['get_community_invites_v2_communities__community_id__invites_get'];
        put?: never;
        /** Create Community Invite */
        post: operations['create_community_invite_v2_communities__community_id__invites_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/invites/{invite_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Invite With Community */
        get: operations['get_community_invite_with_community_v2_communities__community_id__invites__invite_id__get'];
        put?: never;
        post?: never;
        /** Delete Community Invite */
        delete: operations['delete_community_invite_v2_communities__community_id__invites__invite_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/join_requests': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Community Join Requests */
        get: operations['get_community_join_requests_v2_communities__community_id__join_requests_get'];
        put?: never;
        /** Create Community Join Request */
        post: operations['create_community_join_request_v2_communities__community_id__join_requests_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/join_requests/{join_request_id}/approve': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put Community Join Request Accept */
        put: operations['put_community_join_request_accept_v2_communities__community_id__join_requests__join_request_id__approve_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/join_requests/{join_request_id}/hide': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put Community Join Request Hide */
        put: operations['put_community_join_request_hide_v2_communities__community_id__join_requests__join_request_id__hide_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/join_requests/mark_viewed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark Community Join Requests Read */
        put: operations['mark_community_join_requests_read_v2_communities__community_id__join_requests_mark_viewed_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/{community_id}/remove_member/{account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Community Member */
        delete: operations['remove_community_member_v2_communities__community_id__remove_member__account_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/communities/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Communities By Id */
        get: operations['get_communities_by_id_v2_communities_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/me/work_experience': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create Or Update Account Work Experience */
        put: operations['create_or_update_account_work_experience_v2_accounts_me_work_experience_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account */
        get: operations['get_current_account_v2_accounts_me_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Account */
        get: operations['search_account_v2_accounts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/me/relation/FOLLOW/{direction}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Current Account Relations */
        get: operations['search_current_account_relations_v2_accounts_me_relation_FOLLOW__direction__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/by_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account By Id */
        get: operations['get_account_by_id_v2_accounts_by_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/by_uuid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account By Uuid */
        get: operations['get_account_by_uuid_v2_accounts_by_uuid_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/send_push_to_nsc_kafka': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Push To Nsc */
        post: operations['send_push_to_nsc_v2_accounts_send_push_to_nsc_kafka_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/send_push_to_nsc_direct': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Push To Nsc Direct */
        post: operations['send_push_to_nsc_direct_v2_accounts_send_push_to_nsc_direct_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/{account_id}/relation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Relation To Account */
        put: operations['set_relation_to_account_v2_accounts__account_id__relation_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/{account_id}/posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Posts */
        get: operations['get_account_posts_v2_accounts__account_id__posts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/{account_id}/comments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Comments */
        get: operations['get_account_comments_v2_accounts__account_id__comments_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/{account_id}/relation/{relation_type}/{direction}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Account Relations */
        get: operations['search_account_relations_v2_accounts__account_id__relation__relation_type___direction__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/me/subscriptions/communities/groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Subscriptions Communities Groups */
        get: operations['get_current_account_subscriptions_communities_groups_v2_accounts_me_subscriptions_communities_groups_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/me/subscriptions/communities/unread/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Account Subscriptions Unread Communities Count */
        get: operations['get_current_account_subscriptions_unread_communities_count_v2_accounts_me_subscriptions_communities_unread_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/relationships/{to_account_id}/through/{through_account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Path Through
         * @description обоснование силы связи через другого пользователя
         */
        get: operations['get_relationship_path_through_v2_accounts_relationships__to_account_id__through__through_account_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/relationships/{to_account_id}/persons': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Persons
         * @description Список пользователей отфильтрованный по силе связи
         */
        get: operations['get_relationship_persons_v2_accounts_relationships__to_account_id__persons_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/relationships/{to_account_id}/persons_counters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship Counters
         * @description Количество связей по силам для пользователя
         */
        get: operations['get_relationship_counters_v2_accounts_relationships__to_account_id__persons_counters_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/relationships/{to_account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Relationship Path */
        get: operations['get_relationship_path_v2_accounts_relationships__to_account_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/{account_id}/work_experience/{experience_id}/complaint': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Work Exp Complaint
         * @description Создать жалобу на опыт работы
         */
        post: operations['create_work_exp_complaint_v2_accounts__account_id__work_experience__experience_id__complaint_post'];
        /**
         * Delete Work Exp Complaint
         * @description Удалить жалобу на опыт работы
         */
        delete: operations['delete_work_exp_complaint_v2_accounts__account_id__work_experience__experience_id__complaint_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/accounts/session_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Session Metadata */
        post: operations['post_session_metadata_v2_accounts_session_metadata_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/webhooks/support-chat/{scenario_code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Save Message From Helpdesk */
        post: operations['save_message_from_helpdesk_v2_webhooks_support_chat__scenario_code__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/tg/post': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Post */
        post: operations['create_post_v2_tg_post_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/shortener': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Short Url */
        post: operations['create_short_url_v2_shortener_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/shortener/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url */
        get: operations['get_long_url_v2_shortener__short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/shortener/{url_type}/{short_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Long Url With Type */
        get: operations['get_long_url_with_type_v2_shortener__url_type___short_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks */
        get: operations['get_networks_v2_networks_me_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/profile': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Profile */
        get: operations['get_profile_v2_networks_profile_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Networks
         * @description FTS for networks
         */
        get: operations['search_networks_v2_networks_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/by_account_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks By Account Id */
        get: operations['get_networks_by_account_id_v2_networks_by_account_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/by_company_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks By Company Id */
        get: operations['get_networks_by_company_id_v2_networks_by_company_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Networks Members */
        get: operations['get_networks_members_v2_networks_members_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/types': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Types */
        get: operations['get_network_types_v2_networks_types_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/mark-viewed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark Viewed */
        patch: operations['mark_viewed_v2_networks_mark_viewed_patch'];
        trace?: never;
    };
    '/v2/networks/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Networks Feed
         * @description Get feed for all user networks
         */
        get: operations['get_networks_feed_v2_networks_feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network By Id */
        get: operations['get_network_by_id_v2_networks__network_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Network Members By Network Id */
        get: operations['get_network_members_by_network_id_v2_networks__network_id__members_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/members/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Network Members */
        get: operations['search_network_members_v2_networks__network_id__members_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Change Network Settings */
        patch: operations['change_network_settings_v2_networks__network_id__settings_patch'];
        trace?: never;
    };
    '/v2/networks/{network_id}/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Feed
         * @description Get feed for current network
         */
        get: operations['get_network_feed_v2_networks__network_id__feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Info
         * @description Get network info for feed
         */
        get: operations['get_network_info_v2_networks__network_id__info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/unread_notification_about_presence/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unread Presence Notification */
        get: operations['get_unread_presence_notification_v2_networks_unread_notification_about_presence_count_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/vacancies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Vacancies
         * @description Get network vacancies
         */
        get: operations['get_network_vacancies_v2_networks__network_id__vacancies_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Roles
         * @description Get network roles
         */
        get: operations['get_network_roles_v2_networks__network_id__roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/networks/{network_id}/vacancies/counter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network Vacancies Count
         * @description Get network vacancies count
         */
        get: operations['get_network_vacancies_count_v2_networks__network_id__vacancies_counter_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/reactions/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Reaction */
        post: operations['add_reaction_v2_chats_reactions__message_id__post'];
        /** Remove Reaction */
        delete: operations['remove_reaction_v2_chats_reactions__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chats */
        get: operations['get_chats_v2_chats_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/share': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chats Partners */
        get: operations['get_chats_partners_v2_chats_share_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/{recipient_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chat Messages */
        get: operations['get_chat_messages_v2_chats__recipient_id__get'];
        put?: never;
        post?: never;
        /** Remove Chat */
        delete: operations['remove_chat_v2_chats__recipient_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/messages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Messages */
        post: operations['send_messages_v2_chats_messages_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/messages/{message_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Message */
        put: operations['update_message_v2_chats_messages__message_id__put'];
        post?: never;
        /** Remove Message */
        delete: operations['remove_message_v2_chats_messages__message_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/{recipient_id}/mark_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Message Read */
        post: operations['mark_message_read_v2_chats__recipient_id__mark_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/messages/{message_id}/attachments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Attachment */
        post: operations['create_attachment_v2_chats_messages__message_id__attachments_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/chats/attachments/{attachment_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Attachment */
        delete: operations['delete_attachment_v2_chats_attachments__attachment_id__delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notifications/mark-all-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark All Notifications As Read */
        post: operations['mark_all_notifications_as_read_v2_notifications_mark_all_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notifications/mark-as-read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Notifications As Read */
        post: operations['mark_notifications_as_read_v2_notifications_mark_as_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notifications/unread/total': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Unread Total Notifications */
        get: operations['get_unread_total_notifications_v2_notifications_unread_total_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notifications/hide': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hide Notifications */
        post: operations['hide_notifications_v2_notifications_hide_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notifications/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notification Feed */
        get: operations['get_notification_feed_v2_notifications_feed_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/notification_preferences': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Notification Preferences */
        get: operations['get_user_notification_preferences_v2_notification_preferences_get'];
        /** Update User Notification Preferences */
        put: operations['update_user_notification_preferences_v2_notification_preferences_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/invites/hh_invite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Invites */
        post: operations['send_invites_v2_invites_hh_invite_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/mark_uninteresting': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Post As Uninteresting */
        post: operations['mark_post_as_uninteresting_v2_posts__post_id__mark_uninteresting_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/mark_uninteresting/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unmark Post As Uninteresting */
        post: operations['unmark_post_as_uninteresting_v2_posts__post_id__mark_uninteresting_cancel_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/stats/views_by_role': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Views By Role Statistics */
        get: operations['get_post_views_by_role_statistics_v2_posts__post_id__stats_views_by_role_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/stats/views_by_group_role': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Views By Group Role Statistics */
        get: operations['get_post_views_by_group_role_statistics_v2_posts__post_id__stats_views_by_group_role_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/view': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add Post View */
        put: operations['add_post_view_v2_posts__post_id__view_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/desired_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Desired Info */
        get: operations['get_post_desired_info_v2_posts__post_id__desired_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/posts/{post_id}/full_desired_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Desired Info With Entities */
        get: operations['get_post_desired_info_with_entities_v2_posts__post_id__full_desired_info_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/rate-limit/whitelist': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Ip To Ratelimit Whitelist */
        post: operations['set_ip_to_ratelimit_whitelist_v2_rate_limit_whitelist_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/reposts/{post_id}/reposted-by-accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reposted Accounts */
        get: operations['get_reposted_accounts_v2_reposts__post_id__reposted_by_accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/reposts/{post_id}/reposted-by-channels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reposted Channels */
        get: operations['get_reposted_channels_v2_reposts__post_id__reposted_by_channels_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/reposts/channels-to-repost': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channels To Repost */
        get: operations['get_channels_to_repost_v2_reposts_channels_to_repost_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Status */
        get: operations['get_status_v2_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/uploads/hh': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Proxy To Hh */
        get: operations['get_proxy_to_hh_v2_uploads_hh_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/uploads/default_avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Default Avatar For User */
        get: operations['get_default_avatar_for_user_v2_uploads_default_avatar_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/messages/{message_id}/reaction/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Reaction */
        delete: operations['remove_reaction_v2_messages__message_id__reaction_remove_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/messages/{message_id}/reaction/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Reaction */
        post: operations['add_reaction_v2_messages__message_id__reaction_add_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/messages/{message_id}/reactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Message Reactions */
        get: operations['get_message_reactions_v2_messages__message_id__reactions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/mentions/accounts/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search */
        get: operations['search_v2_mentions_accounts_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/moderation/checkstep/webhook': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process Checkstep Webhook */
        post: operations['process_checkstep_webhook_v2_moderation_checkstep_webhook_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/ws/url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ws Connection Url */
        get: operations['get_ws_connection_url_v2_ws_url_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/ws/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Ping Message */
        post: operations['send_ping_message_v2_ws_ping_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/feeds/interactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feeds Interacrions
         * @description Flags for new posts in feeds
         */
        get: operations['get_feeds_interacrions_v2_feeds_interactions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/track_push': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Track Push */
        post: operations['track_push_v2_track_push_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/targeting/roles': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Target Roles */
        get: operations['get_target_roles_v2_targeting_roles_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/targeting/channel/{channel_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Channel Target Settings */
        get: operations['get_channel_target_settings_v2_targeting_channel__channel_id__get'];
        put?: never;
        /** Create Or Update Channel Target Settings */
        post: operations['create_or_update_channel_target_settings_v2_targeting_channel__channel_id__post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/targeting/account_target': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Target Settings */
        get: operations['get_account_target_settings_v2_targeting_account_target_get'];
        put?: never;
        /** Create Or Update Account Target Settings */
        post: operations['create_or_update_account_target_settings_v2_targeting_account_target_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/targeting/post/{post_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post Target Settings */
        get: operations['get_post_target_settings_v2_targeting_post__post_id__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/profile_views': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Profile Views */
        get: operations['get_all_profile_views_v2_profile_views_get'];
        put?: never;
        /** Create Profile View */
        post: operations['create_profile_view_v2_profile_views_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/profile_views/mark_all_read': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark All Profile Views */
        post: operations['mark_all_profile_views_v2_profile_views_mark_all_read_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/profile_views/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Profile View Settings */
        put: operations['update_profile_view_settings_v2_profile_views_settings_put'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/user_support/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Support Sessions */
        get: operations['get_support_sessions_v2_user_support_session_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/checklists/job_search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Search Checklist
         * @description Получение чеклиста для поиска работы
         */
        get: operations['get_job_search_checklist_v2_checklists_job_search_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/vacancies/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vacancy Status */
        get: operations['get_vacancy_status_v2_vacancies_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v2/resumes/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resume Status */
        get: operations['get_resume_status_v2_resumes_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v3/resumes/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resume Status */
        get: operations['get_resume_status_v3_resumes_status_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Invites */
        get: operations['get_invites_admin_invites_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invite/gen': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Gen Invite */
        post: operations['gen_invite_admin_invite_gen_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invite/by_account_id': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Invites */
        get: operations['get_account_invites_admin_invite_by_account_id_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/invite/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Invites */
        post: operations['add_invites_admin_invite_add_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/settings/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Settings */
        get: operations['get_settings_admin_settings__get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/settings/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Settings */
        post: operations['update_settings_admin_settings_update_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/v1/geo_db/countries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Load Countries From Geo Db */
        get: operations['load_countries_from_geo_db_admin_v1_geo_db_countries_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/admin/v1/geo_db/cities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Load Cities From Geo Db */
        get: operations['load_cities_from_geo_db_admin_v1_geo_db_cities_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** AccountAvatarResponse */
        AccountAvatarResponse: {
            /** Avatar Url */
            avatar_url: string | null;
            /** Autogenerated */
            autogenerated: boolean;
        };
        /** AccountBlockedPushData */
        AccountBlockedPushData: {
            /**
             * Type
             * @default ACCOUNT_BLOCKED
             * @constant
             */
            type: 'ACCOUNT_BLOCKED';
        };
        /** AccountByIdResponse */
        AccountByIdResponse: {
            /** Accounts */
            accounts: {
                [key: string]: components['schemas']['AccountResponse'];
            };
        };
        /** AccountByUUIDResponse */
        AccountByUUIDResponse: {
            /** Accounts */
            accounts: {
                [key: string]: components['schemas']['AccountResponse'];
            };
        };
        /** AccountDeloResponse */
        AccountDeloResponse: {
            /** Account Id */
            account_id: number;
            /** Notes */
            notes: components['schemas']['ModerationNote'][];
            /** Last Complaints */
            last_complaints: components['schemas']['ComplaintResponse'][];
        };
        /** AccountFollowedYouPushData */
        AccountFollowedYouPushData: {
            /**
             * Type
             * @default ACCOUNT_FOLLOWED_YOU
             * @constant
             */
            type: 'ACCOUNT_FOLLOWED_YOU';
            /** Account Id */
            account_id: number;
            /** Open Account Id */
            open_account_id: number;
        };
        /** AccountIncompletePushData */
        AccountIncompletePushData: {
            /**
             * Type
             * @default ACCOUNT_INCOMPLETE
             * @constant
             */
            type: 'ACCOUNT_INCOMPLETE';
        };
        /** AccountKeySkillBodyRequest */
        AccountKeySkillBodyRequest: {
            key_skill: components['schemas']['KeySkillBodyRequest'];
            /** Start Dt */
            start_dt?: string | null;
            /** Years */
            years?: number | null;
            /** Can Be Mentor */
            can_be_mentor: boolean;
            /** Search Mentor */
            search_mentor: boolean;
            /** Description */
            description?: string | null;
        };
        /** AccountKeySkillConfirmRequest */
        AccountKeySkillConfirmRequest: {
            key_skill: components['schemas']['KeySkillBodyRequest'];
            /** Description */
            description?: string | null;
        };
        /** AccountKeySkillResponse */
        AccountKeySkillResponse: {
            key_skill: components['schemas']['KeySkillBodyResponse'];
            /** Years */
            years: number;
            /** Can Be Mentor */
            can_be_mentor: boolean;
            /** Search Mentor */
            search_mentor: boolean;
            /** Description */
            description: string;
        };
        /** AccountKeySkillUpdateRequest */
        AccountKeySkillUpdateRequest: {
            /** Key Skills */
            key_skills: components['schemas']['AccountKeySkillBodyRequest'][];
        };
        /** AccountRelationResponse */
        AccountRelationResponse: {
            type: components['schemas']['AccountsRelationType'];
        };
        /** AccountRelationScheme */
        AccountRelationScheme: {
            type: components['schemas']['AccountsRelationType'];
        };
        /** AccountRelationUpdateRequest */
        AccountRelationUpdateRequest: {
            type?: components['schemas']['AccountsRelationType'] | null;
        };
        /** AccountRelationViewModel */
        AccountRelationViewModel: {
            type: components['schemas']['AccountsRelationType'];
        };
        /** AccountRelationsSummary */
        AccountRelationsSummary: {
            /** Followers */
            followers: number;
            /** Following */
            following: number;
            /** Common Following */
            common_following: number | null;
        };
        /** AccountRelationsSummaryResponse */
        AccountRelationsSummaryResponse: {
            /** Account Id */
            account_id: number;
            relations_summary: components['schemas']['AccountRelationsSummary'];
        };
        /** AccountResponse */
        AccountResponse: {
            /** Uuid */
            uuid: string;
            /** Id */
            id: string | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Description */
            description: string | null;
            /** Caption */
            caption: string | null;
            avatar: components['schemas']['AccountAvatarResponse'] | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Is Current */
            is_current: boolean | null;
            /** Is Support Account */
            is_support_account: boolean | null;
            /** Is Finished */
            is_finished: boolean | null;
            /** Name Required */
            name_required: boolean | null;
            company: components['schemas']['CompanySuggestResponse'] | null;
            position: components['schemas']['PositionResponse'] | null;
            /** Position Title */
            position_title: string | null;
            city: components['schemas']['CityResponse'] | null;
            place: components['schemas']['PlaceResponse'] | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** P2P Channel Id */
            p2p_channel_id: string | null;
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][] | null;
            /** Relations */
            relations: components['schemas']['AccountRelationResponse'][] | null;
            /** Key Skills */
            key_skills: components['schemas']['AccountKeySkillResponse'][] | null;
            /** Roles */
            roles: components['schemas']['SystemRole'][] | null;
            /** Work Experiences */
            work_experiences: components['schemas']['WorkExperienceBodyResponse'][] | null;
            /** Total Experience Years */
            total_experience_years: number | null;
            total_experience: components['schemas']['TotalWorkExperience'] | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Allow Target */
            allow_target: boolean | null;
            /** Deleted */
            deleted: boolean | null;
            /** Share Url */
            share_url: string | null;
            /** Reverse Relations */
            reverse_relations: components['schemas']['AccountRelationResponse'][] | null;
            /**
             * Networks Count
             * @default 0
             */
            networks_count: number;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            relationship: components['schemas']['RelationshipCounters'] | null;
            /** Allow Mentions */
            allow_mentions: boolean | null;
            /** Has New Profile Views */
            has_new_profile_views: boolean | null;
            profile_view_setting: components['schemas']['ProfileViewSettingsEnum'] | null;
            recruitment_process_status: components['schemas']['AccountStatusEnum'] | null;
        };
        /** AccountShortListResponse */
        AccountShortListResponse: {
            /** Accounts */
            accounts: components['schemas']['AccountResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** AccountShortListResponseExtended */
        AccountShortListResponseExtended: {
            /** Accounts */
            accounts: components['schemas']['AccountResponse'][];
            /**
             * Total Accounts Count
             * @default 0
             */
            total_accounts_count: number;
            /**
             * Member Avatar Urls
             * @default []
             */
            member_avatar_urls: string[];
            /** Cursor */
            cursor: string | null;
        };
        /** AccountShortResponse */
        AccountShortResponse: {
            /** Id */
            id: number;
            /** Avatar Url */
            avatar_url: string;
        };
        /**
         * AccountStatusEnum
         * @enum {string}
         */
        AccountStatusEnum:
            | 'LOOKING_FOR_A_JOB'
            | 'HIRING'
            | 'PROVIDING_CONSULTATION'
            | 'NEED_CONSULTATION'
            | 'LOOKING_FOR_A_MENTOR'
            | 'MENTORING'
            | 'LOOKING_FOR_A_CONTRACTOR'
            | 'CONTRACTOR'
            | 'LOOKING_FOR_A_BUSINESS_PARTNER'
            | 'NETWORKING'
            | 'LOOKING_FOR_INVESTMENTS'
            | 'INVESTOR';
        /** AccountUpdateRequest */
        AccountUpdateRequest: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Description */
            description?: string | null;
            /** Email */
            email?: string | null;
            /** Caption */
            caption?: string | null;
            /** Work Experience Confirmed */
            work_experience_confirmed?: boolean | null;
            company?: components['schemas']['jager_app__presentation__model__company__CompanyUpdateRequest'] | null;
            position?: components['schemas']['jager_app__presentation__model__position__PositionUpdateRequest'] | null;
            /** Position Title */
            position_title?: string | null;
            city?: components['schemas']['CityUpdateRequest'] | null;
            place?: components['schemas']['PlaceUpdateRequest'] | null;
            /** Allow Mentions */
            allow_mentions?: boolean | null;
        };
        /** AccountWorkExperiencesListResponse */
        AccountWorkExperiencesListResponse: {
            /** Experiences */
            experiences: components['schemas']['WorkExperienceBodyResponse'][];
        };
        /**
         * AccountsRelationType
         * @enum {string}
         */
        AccountsRelationType: 'FOLLOW' | 'HIDE_FROM_ME';
        /** AddInvitesRequest */
        AddInvitesRequest: {
            /** Account Id */
            account_id: number;
            /** Count */
            count: number;
        };
        /** AddReactionRequestModel */
        AddReactionRequestModel: {
            /** Reaction */
            reaction: string;
        };
        /**
         * AnonMessageSetting
         * @enum {string}
         */
        AnonMessageSetting: 'ALLOWED' | 'NOT_ALLOWED';
        /** AppActivatedFields */
        AppActivatedFields: {
            source: components['schemas']['AppActivationSource'];
            /** Push Type */
            push_type?: string | null;
            /** Link Url */
            link_url?: string | null;
        };
        /**
         * AppActivationSource
         * @enum {string}
         */
        AppActivationSource: 'DIRECT' | 'PUSH' | 'DEEP_LINK';
        /** AttachmentSizeViewModel */
        AttachmentSizeViewModel: {
            /** Width */
            width: number | null;
            /** Height */
            height: number | null;
        };
        /** AttachmentViewModel */
        AttachmentViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Upload Id
             * Format: uuid
             */
            upload_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at: string | null;
            /** Index */
            index: number;
            size: components['schemas']['AttachmentSizeViewModel'] | null;
            /** Url */
            readonly url: string | null;
        };
        /** AuthSessionMetadataView */
        AuthSessionMetadataView: {
            /** Application Name */
            application_name?: string | null;
            /** Application Version */
            application_version?: string | null;
            /** Selected Country */
            selected_country?: string | null;
            /** Os Version */
            os_version?: string | null;
            /** Platform Services */
            platform_services?: string | null;
            /** Device */
            device?: string | null;
            /** Disk Space */
            disk_space?: string | null;
            /** Battery Level */
            battery_level?: string | null;
            /** Network Type */
            network_type?: string | null;
            /** Carrier Name */
            carrier_name?: string | null;
            /** App Language */
            app_language?: string | null;
            /** System Language */
            system_language?: string | null;
            /** Keyboard Name */
            keyboard_name?: string | null;
            /** User Type */
            user_type?: string | null;
            /** Webview Package */
            webview_package?: string | null;
            /** Webview Version */
            webview_version?: string | null;
        };
        /**
         * AuthSystem
         * @enum {string}
         */
        AuthSystem: 'HH' | 'PHONE' | 'EMAIL';
        /** AuthTokenResponse */
        AuthTokenResponse: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /** Expires In */
            expires_in: number;
            /** Token Type */
            token_type: string;
            /** Expires At */
            expires_at: number;
        };
        /** AvatarUpdateRequest */
        AvatarUpdateRequest: {
            /** Upload Id */
            upload_id?: string | null;
        };
        /** Body_add_channel_to_favorites_channels_favorites_put */
        Body_add_channel_to_favorites_channels_favorites_put: {
            /**
             * Channel Id
             * Format: uuid
             */
            channel_id: string;
        };
        /** Body_add_channel_to_favorites_v1_channels_favorites_put */
        Body_add_channel_to_favorites_v1_channels_favorites_put: {
            /**
             * Channel Id
             * Format: uuid
             */
            channel_id: string;
        };
        /** Body_add_push_subscription_push_subscription_post */
        Body_add_push_subscription_push_subscription_post: {
            /** Token */
            token: string;
            os: components['schemas']['MobileDeviceOs'];
        };
        /** Body_add_push_subscription_v1_push_subscription_post */
        Body_add_push_subscription_v1_push_subscription_post: {
            /** Token */
            token: string;
            os: components['schemas']['MobileDeviceOs'];
        };
        /** Body_bind_channel_v1_tg_bind_channel_post */
        Body_bind_channel_v1_tg_bind_channel_post: {
            /** Tg Id */
            tg_id: number;
            /** Destination */
            destination: string;
            /**
             * Autoposting
             * @default false
             */
            autoposting: boolean;
        };
        /** Body_bind_channel_v2_tg_bind_channel_post */
        Body_bind_channel_v2_tg_bind_channel_post: {
            /** Tg Id */
            tg_id: number;
            /** Destination */
            destination: string;
            /**
             * Autoposting
             * @default false
             */
            autoposting: boolean;
        };
        /** Body_change_network_settings_v1_networks__network_id__settings_patch */
        Body_change_network_settings_v1_networks__network_id__settings_patch: {
            /** Is Hidden */
            is_hidden?: boolean | null;
            /** Is Notifications Enabled */
            is_notifications_enabled?: boolean | null;
        };
        /** Body_change_network_settings_v2_networks__network_id__settings_patch */
        Body_change_network_settings_v2_networks__network_id__settings_patch: {
            /** Is Hidden */
            is_hidden?: boolean | null;
            /** Is Notifications Enabled */
            is_notifications_enabled?: boolean | null;
        };
        /** Body_create_attachment_v1_chats_messages__message_id__attachments_post */
        Body_create_attachment_v1_chats_messages__message_id__attachments_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /**
             * Index
             * @default 0
             */
            index: number;
        };
        /** Body_create_attachment_v2_chats_messages__message_id__attachments_post */
        Body_create_attachment_v2_chats_messages__message_id__attachments_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /**
             * Index
             * @default 0
             */
            index: number;
        };
        /** Body_generate_new_captcha_captcha_new_post */
        Body_generate_new_captcha_captcha_new_post: {
            /** State */
            state: string;
        };
        /** Body_generate_new_captcha_captcha_verify_post */
        Body_generate_new_captcha_captcha_verify_post: {
            /** Text */
            text: string;
            /** State */
            state: string;
        };
        /** Body_get_otp_send_allowed_status_otp_get_send_allowed_status_put */
        Body_get_otp_send_allowed_status_otp_get_send_allowed_status_put: {
            /** Login */
            login: string;
        };
        /** Body_get_permanent_token_v1_tg_authenticate_post */
        Body_get_permanent_token_v1_tg_authenticate_post: {
            /**
             * Token
             * Format: uuid
             */
            token: string;
        };
        /** Body_get_permanent_token_v2_tg_authenticate_post */
        Body_get_permanent_token_v2_tg_authenticate_post: {
            /**
             * Token
             * Format: uuid
             */
            token: string;
        };
        /** Body_oauth_token_handler_auth_oauth_token_post */
        Body_oauth_token_handler_auth_oauth_token_post: {
            /** State */
            state?: string | null;
            /**
             * Confirm Deleted Account Restore
             * @default true
             */
            confirm_deleted_account_restore: boolean;
            grant_type: components['schemas']['OAuthGrantType'];
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            client_alias?: components['schemas']['OAuthAppAlias'] | null;
            /**
             * Is Browser Form
             * @default false
             */
            is_browser_form: boolean;
        };
        /** Body_send_invites_v1_invites_hh_invite_post */
        Body_send_invites_v1_invites_hh_invite_post: {
            /** Resume Storage Id */
            resume_storage_id: string;
        };
        /** Body_send_invites_v2_invites_hh_invite_post */
        Body_send_invites_v2_invites_hh_invite_post: {
            /** Resume Storage Id */
            resume_storage_id: string;
        };
        /** Body_send_one_time_password_otp_generate_post */
        Body_send_one_time_password_otp_generate_post: {
            /** Token */
            token?: string | null;
            /** Login */
            login: string;
            operation: components['schemas']['OtpOperationType'];
        };
        /** Body_set_key_v1_encryption_keys_post */
        Body_set_key_v1_encryption_keys_post: {
            /** Key */
            key: string;
        };
        /** Body_upload_file_uploads_put */
        Body_upload_file_uploads_put: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Dataurl */
            dataurl?: string;
        };
        /** Body_upload_file_v1_uploads_put */
        Body_upload_file_v1_uploads_put: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Dataurl */
            dataurl?: string;
        };
        /** Button */
        Button: {
            type: components['schemas']['ButtonTypes'];
            /** Label */
            label: string;
        };
        /**
         * ButtonTypes
         * @constant
         */
        ButtonTypes: 'text';
        /** CaptchaRequiredStatusResponse */
        CaptchaRequiredStatusResponse: {
            /** Is Required */
            is_required: boolean;
            /** State */
            state: string | null;
        };
        /** ChannelCurrentParticipantInfo */
        ChannelCurrentParticipantInfo: {
            /** Id */
            id: string;
            /** Last Read Dt */
            last_read_dt: string | null;
            visibility: components['schemas']['ParticipantDetailsVisibility'] | null;
            /** Has Left Channel */
            has_left_channel: boolean | null;
        };
        /**
         * ChannelJoinRequestStatusEnum
         * @enum {string}
         */
        ChannelJoinRequestStatusEnum: 'REQUESTED' | 'REVOKED' | 'ACCEPTED' | 'HIDDEN';
        /** ChannelParticipantAccount */
        ChannelParticipantAccount: {
            /** Id */
            id: string | null;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Deleted */
            deleted: boolean;
            /** Deleted At */
            deleted_at: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationScheme'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** ChannelParticipantCommunity */
        ChannelParticipantCommunity: {
            /** Id */
            id: string | null;
            /** Deleted */
            deleted: boolean;
        };
        /** ChannelParticipantDisplayData */
        ChannelParticipantDisplayData: {
            /** Name */
            name: string | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** Icon Url */
            icon_url: string | null;
            company: components['schemas']['CompanySuggestResponse'] | null;
            position: components['schemas']['PositionResponse'] | null;
            /** Position Title */
            position_title: string | null;
            /** Caption */
            caption: string | null;
        };
        /** ChannelParticipantFullInfo */
        ChannelParticipantFullInfo: {
            /** Id */
            id: string;
            /** Last Read Dt */
            last_read_dt: string | null;
            /** Is Current */
            is_current: boolean;
            display: components['schemas']['ChannelParticipantDisplayData'];
            account: components['schemas']['ChannelParticipantAccount'] | null;
            community: components['schemas']['ChannelParticipantCommunity'] | null;
        };
        /** ChannelParticipantShortInfo */
        ChannelParticipantShortInfo: {
            /** Id */
            id: string;
            /** Last Read Dt */
            last_read_dt: string | null;
        };
        /** ChannelPostSnippetAction */
        ChannelPostSnippetAction: {
            type: components['schemas']['ChannelPostSnippetActionTypeEnum'];
            action: components['schemas']['ChannelPostSnippetActionEnum'];
            /** Url */
            url: string;
            /** Title */
            title: string;
        };
        /**
         * ChannelPostSnippetActionEnum
         * @constant
         */
        ChannelPostSnippetActionEnum: 'open_link';
        /**
         * ChannelPostSnippetActionTypeEnum
         * @constant
         */
        ChannelPostSnippetActionTypeEnum: 'button';
        /** ChannelPostSnippetResponse */
        ChannelPostSnippetResponse: {
            /** Title */
            title: string;
            /** Subtitle */
            subtitle: string | null;
            /** Description */
            description: string | null;
            /** Icon */
            icon: string | null;
            /** Actions */
            actions: components['schemas']['ChannelPostSnippetAction'][];
        };
        /**
         * ChannelPostTypeEnum
         * @enum {string}
         */
        ChannelPostTypeEnum: 'REGULAR' | 'VACANCY' | 'RESUME';
        /**
         * ChannelRole
         * @enum {string}
         */
        ChannelRole:
            | 'ADMIN'
            | 'CAN_WRITE_MESSAGE'
            | 'CAN_WRITE_ANON'
            | 'CAN_WRITE_POST'
            | 'CAN_DELETE_MESSAGE'
            | 'CAN_DELETE_POST'
            | 'CAN_DELETE_COMMUNITY'
            | 'CAN_POST_AS_COMMUNITY';
        /** ChannelRoleResponse */
        ChannelRoleResponse: {
            type: components['schemas']['ChannelRole'];
        };
        /** ChannelShortByIdResponse */
        ChannelShortByIdResponse: {
            /** Channels */
            channels: {
                [key: string]: components['schemas']['ChannelShortResponse'];
            };
        };
        /** ChannelShortListResponse */
        ChannelShortListResponse: {
            /** Channels */
            channels: components['schemas']['ChannelShortResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ChannelShortResponse */
        ChannelShortResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            current_participant: components['schemas']['ChannelCurrentParticipantInfo'] | null;
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][];
            /** Last Messages */
            last_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** First Messages */
            first_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** Total Messages Count */
            total_messages_count: number | null;
            /** Unread Messages Count */
            unread_messages_count: number | null;
            /** Untouched Posts Count */
            untouched_posts_count: number | null;
            post_preview: components['schemas']['PostPreviewResponse'] | null;
            /** Icon Url */
            icon_url: string | null;
            /** Share Url */
            share_url: string | null;
            /** Description */
            description: string | null;
            /** Favorited */
            favorited: boolean | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Parent Channel Id */
            parent_channel_id: string | null;
            p2p_account: components['schemas']['AccountResponse'] | null;
            /** Subscriptions */
            subscriptions: components['schemas']['ChannelSubscriptionResponse'][] | null;
            /** Roles */
            roles: components['schemas']['ChannelRoleResponse'][] | null;
            settings: components['schemas']['CommunitySettingsResponse'] | null;
            /** Is Question */
            is_question: boolean | null;
            /** Views */
            views: number | null;
            /** Accounts Who Commented */
            accounts_who_commented: number[] | null;
            /** Accounts Who Liked */
            accounts_who_liked: number[] | null;
            displayed_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Is Channel */
            is_channel: boolean | null;
            /** Has Join Request */
            has_join_request: boolean | null;
            /** Verified */
            verified: boolean | null;
            /** Verified Company Name */
            verified_company_name: string | null;
            /** Verified Hh Employer Id */
            verified_hh_employer_id: number | null;
            /** Verified Start Date */
            verified_start_date: string | null;
            /** Verified End Date */
            verified_end_date: string | null;
            /** Allow Target */
            allow_target: boolean | null;
            /**
             * Deleted
             * @default false
             */
            deleted: boolean;
            visibility_type: components['schemas']['ChannelVisibilityTypeEnum'];
            post_type: components['schemas']['ChannelPostTypeEnum'] | null;
            /** Snippets */
            snippets: components['schemas']['ChannelPostSnippetResponse'][] | null;
            /** Join Requests Count */
            join_requests_count: number;
        };
        /** ChannelSubscribersCountResponse */
        ChannelSubscribersCountResponse: {
            /** Channel Subscribers */
            channel_subscribers: {
                [key: string]: number;
            };
        };
        /** ChannelSubscriptionResponse */
        ChannelSubscriptionResponse: {
            type: components['schemas']['ChannelSubscriptionType'];
            /** Active */
            active: boolean;
            updated_by: components['schemas']['ChannelSubscriptionUpdatedBy'];
        };
        /**
         * ChannelSubscriptionType
         * @enum {string}
         */
        ChannelSubscriptionType: 'NEW_COMMENTS' | 'NEW_POST';
        /**
         * ChannelSubscriptionUpdatedBy
         * @enum {string}
         */
        ChannelSubscriptionUpdatedBy: 'USER' | 'AUTO';
        /**
         * ChannelVisibilityTypeEnum
         * @enum {string}
         */
        ChannelVisibilityTypeEnum: 'PRIVATE' | 'PUBLIC';
        /** ChannelsCommunitiesRecomendationListViewModel */
        ChannelsCommunitiesRecomendationListViewModel: {
            /**
             * Items
             * @default []
             */
            items: components['schemas']['ChannelsCommunitiesRecomendationViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ChannelsCommunitiesRecomendationViewModel */
        ChannelsCommunitiesRecomendationViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Is Channel
             * @default false
             */
            is_channel: boolean;
            /**
             * Verified
             * @default false
             */
            verified: boolean;
            /** Icon Url */
            icon_url: string | null;
            /**
             * Subscribers Count
             * @default 0
             */
            subscribers_count: number;
            /** Description */
            description: string | null;
        };
        /** ChannelsUnreadCountResponse */
        ChannelsUnreadCountResponse: {
            /** Messages */
            messages: number;
        };
        /**
         * ChatMessageLinkedTypeEnum
         * @enum {string}
         */
        ChatMessageLinkedTypeEnum: 'REPLY_TO' | 'FORWARD_COMMENT';
        /** ChatMessagesViewModel */
        ChatMessagesViewModel: {
            /** Messages */
            messages: components['schemas']['MessageViewModel'][];
            /** Unread Messages Count */
            unread_messages_count: number;
            /** Cursor */
            cursor: string | null;
            recipient: components['schemas']['RecipientViewModel'];
            /** Public Key Id */
            public_key_id: string | null;
            /** Public Key */
            public_key: string | null;
            /** Is Support Chat */
            is_support_chat: boolean;
            /** Is Blocked */
            is_blocked: boolean;
            /** Has Complaint */
            has_complaint: boolean;
        };
        /** ChatPartnersViewModel */
        ChatPartnersViewModel: {
            /** Users */
            users: components['schemas']['ChatRecipientsViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ChatRecipientsViewModel */
        ChatRecipientsViewModel: {
            recipient: components['schemas']['RecipientViewModel'];
            /** Public Key Id */
            public_key_id: string | null;
            /** Public Key */
            public_key: string | null;
            /** Is Support Chat */
            is_support_chat: boolean;
            /** Is Blocked */
            is_blocked: boolean;
            /** Has Complaint */
            has_complaint: boolean;
        };
        /** ChatViewModel */
        ChatViewModel: {
            /** Messages */
            messages: components['schemas']['MessageViewModel'][];
            /** Unread Messages Count */
            unread_messages_count: number;
            recipient: components['schemas']['RecipientViewModel'];
            /** Public Key Id */
            public_key_id: string | null;
            /** Public Key */
            public_key: string | null;
            /** Is Support Chat */
            is_support_chat: boolean;
            /** Is Blocked */
            is_blocked: boolean;
            /** Has Complaint */
            has_complaint: boolean;
        };
        /** ChatsViewModel */
        ChatsViewModel: {
            /** Chats */
            chats: components['schemas']['ChatViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** CityResponse */
        CityResponse: {
            /**
             * Type
             * @default CITY_RESPONSE
             * @constant
             */
            type: 'CITY_RESPONSE';
            /** Id */
            id: number;
            /** Name */
            name: string;
            country: components['schemas']['CountryResponse'];
        };
        /** CityUpdateRequest */
        CityUpdateRequest: {
            /** Id */
            id: number;
        };
        /**
         * ClientEvents
         * @enum {string}
         */
        ClientEvents: 'screen_shown' | 'app_installed' | 'app_activated';
        /** CommunityInviteListViewModel */
        CommunityInviteListViewModel: {
            /** Community Invites */
            community_invites: components['schemas']['CommunityInviteViewModel'][];
        };
        /** CommunityInviteRequest */
        CommunityInviteRequest: {
            /** Account Id */
            account_id: number;
            settings: components['schemas']['CommunityParticipantSettingsRequest'];
            /** Description */
            description?: string | null;
        };
        /**
         * CommunityInviteTypeEnum
         * @enum {string}
         */
        CommunityInviteTypeEnum: 'OPEN' | 'APPROVAL_REQUIRED';
        /** CommunityInviteViewModel */
        CommunityInviteViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components['schemas']['CommunityInviteTypeEnum'];
            /**
             * Dt
             * Format: date-time
             */
            dt: string;
            /** Deleted */
            deleted: boolean;
            /**
             * Account Id
             * Format: uuid
             */
            account_id: string;
            /** Community Id */
            community_id: string;
            /**
             * Short Url
             * Format: uri
             */
            short_url: string;
        };
        /** CommunityInviteWithPrivateCommunityViewModel */
        CommunityInviteWithPrivateCommunityViewModel: {
            /**
             * Invite Id
             * Format: uuid
             */
            invite_id: string;
            /** Has Join Request */
            has_join_request: boolean;
            community: components['schemas']['PrivateCommunityViewModel'];
        };
        /** CommunityJoinRequestRequest */
        CommunityJoinRequestRequest: {
            /** Description */
            description?: string | null;
        };
        /** CommunityParticipantSettingsRequest */
        CommunityParticipantSettingsRequest: {
            /** Is Admin */
            is_admin?: boolean | null;
            /** Can Write Message */
            can_write_message?: boolean | null;
        };
        /** CommunityRecommendationListViewModel */
        CommunityRecommendationListViewModel: {
            /** Communities */
            communities: components['schemas']['CommunityRecommendationViewModel'][];
        };
        /** CommunityRecommendationViewModel */
        CommunityRecommendationViewModel: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            /** Icon Url */
            icon_url: string | null;
            /** Description */
            description: string | null;
            /** Favorited */
            favorited: boolean | null;
        };
        /** CommunitySettings */
        CommunitySettings: {
            /** Allow New Post */
            allow_new_post?: boolean | null;
            anon_message_allowed?: components['schemas']['AnonMessageSetting'] | null;
            displayed_post_author?: components['schemas']['DisplayedAuthorEnum'] | null;
            displayed_comment_author?: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Hide From Search */
            hide_from_search?: boolean | null;
        };
        /** CommunitySettingsResponse */
        CommunitySettingsResponse: {
            /** Allow New Post */
            allow_new_post: boolean | null;
            anon_message_allowed: components['schemas']['AnonMessageSetting'] | null;
            displayed_post_author: components['schemas']['DisplayedAuthorEnum'] | null;
            displayed_comment_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Hide From Search */
            hide_from_search: boolean | null;
        };
        /** CommunityUpdateData */
        CommunityUpdateData: {
            /** Name */
            name?: string | null;
            settings?: components['schemas']['CommunitySettings'] | null;
            /** Description */
            description?: string | null;
            /** Image Upload Id */
            image_upload_id?: string | null;
        };
        /** CommunityUpdateRequest */
        CommunityUpdateRequest: {
            channel: components['schemas']['CommunityUpdateData'];
        };
        /** CompanyDetailViewModel */
        CompanyDetailViewModel: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** CompanyInNetwork */
        CompanyInNetwork: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Company Id */
            company_id: number;
            /**
             * Networks Count
             * @default 0
             */
            networks_count: number | null;
        };
        /** CompanyLongSuggestResponse */
        CompanyLongSuggestResponse: {
            /**
             * Type
             * @default COMPANY_LONG_SUGGEST_RESPONSE
             * @constant
             */
            type: 'COMPANY_LONG_SUGGEST_RESPONSE';
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
            /** Country */
            country: string | null;
            /** City */
            city: string | null;
            /** Place */
            place: string | null;
            /** Count Accounts From Setka */
            count_accounts_from_setka: number;
            /** Accounts From Setka */
            accounts_from_setka: components['schemas']['AccountShortResponse'][] | null;
        };
        /** CompanyPositionBodyResponse */
        CompanyPositionBodyResponse: {
            company: components['schemas']['CompanySuggestResponse'] | null;
            position: components['schemas']['PositionResponse'] | null;
            /** Position Title */
            position_title: string | null;
        };
        /** CompanySuggestResponse */
        CompanySuggestResponse: {
            /**
             * Type
             * @default COMPANY_SUGGEST_RESPONSE
             * @constant
             */
            type: 'COMPANY_SUGGEST_RESPONSE';
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** Complaint */
        Complaint: {
            /** Reason */
            reason: string;
        };
        /** ComplaintIdResponse */
        ComplaintIdResponse: {
            /** Complaint Id */
            complaint_id: number | null;
        };
        /**
         * ComplaintReason
         * @enum {string}
         */
        ComplaintReason: 'spam' | 'profanity' | 'offensive_content' | 'porn';
        /** ComplaintResponse */
        ComplaintResponse: {
            /** Complaint Id */
            complaint_id: number;
            /** Account Id */
            account_id: number;
            entity_type: components['schemas']['ModerationEntity'];
            /** Reason */
            reason: string | null;
            /**
             * Creation Time
             * Format: date-time
             */
            creation_time: string;
        };
        /** CountryPlaceResponse */
        CountryPlaceResponse: {
            /** @default COUNTRY_RESPONSE */
            type: components['schemas']['SuggestType'];
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Iso Code */
            iso_code: string | null;
            /** Phone Code */
            phone_code: string | null;
            /** Flag */
            flag: string | null;
        };
        /** CountryResponse */
        CountryResponse: {
            /** @default COUNTRY_RESPONSE */
            type: components['schemas']['SuggestType'];
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Iso Code */
            iso_code: string | null;
            /** Phone Code */
            phone_code: string | null;
            /** Flag */
            flag: string | null;
        };
        /** CreateAccountComplaintRequest */
        CreateAccountComplaintRequest: {
            reason?: components['schemas']['ComplaintReason'] | null;
            /** User Reason */
            user_reason?: string | null;
        };
        /** CreateChannelComplaintRequest */
        CreateChannelComplaintRequest: {
            reason?: components['schemas']['ComplaintReason'] | null;
            /** User Reason */
            user_reason?: string | null;
        };
        /** CreateCommunityComplaintRequest */
        CreateCommunityComplaintRequest: {
            reason?: components['schemas']['ComplaintReason'] | null;
            /** User Reason */
            user_reason?: string | null;
        };
        /** CreateCommunityInviteRequest */
        CreateCommunityInviteRequest: {
            invite_type: components['schemas']['CommunityInviteTypeEnum'];
            /** Idempotency Key */
            idempotency_key: string;
        };
        /** CreateCommunityJoinRequestRequest */
        CreateCommunityJoinRequestRequest: {
            /**
             * Idempotency Key
             * Format: uuid
             */
            idempotency_key: string;
            /** Invite Link Id */
            invite_link_id?: string | null;
        };
        /** CreateCommunityJoinRequestViewModel */
        CreateCommunityJoinRequestViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Dt
             * Format: date-time
             */
            dt: string;
            status: components['schemas']['ChannelJoinRequestStatusEnum'];
            /** Requested By User Id */
            requested_by_user_id: number;
        };
        /** CreateCommunityRequest */
        CreateCommunityRequest: {
            channel: components['schemas']['NewCommunityData'];
            /** Idempotency Key */
            idempotency_key: string;
        };
        /** CreateMessageRequest */
        CreateMessageRequest: {
            data?: components['schemas']['TextMessageData'] | null;
            /** Reply To */
            reply_to?: string | null;
            /** Account Mentions */
            account_mentions?: number[] | null;
            /** Idempotency Key */
            idempotency_key: string;
            participant_details?: components['schemas']['ParticipantDetailsVisibility'] | null;
            displayed_author?: components['schemas']['DisplayedAuthorEnum'] | null;
        };
        /** CreateOrUpdateAccountTargetSettingsRequest */
        CreateOrUpdateAccountTargetSettingsRequest: {
            /** Roles */
            roles?: string[] | null;
            /** Domains */
            domains?: string[] | null;
            /** Companies */
            companies?: string[] | null;
        };
        /** CreateOrUpdateChannelTargetSettingsRequest */
        CreateOrUpdateChannelTargetSettingsRequest: {
            /** Roles */
            roles?: string[] | null;
            /** Domains */
            domains?: string[] | null;
            /** Companies */
            companies?: string[] | null;
        };
        /** CreatePostRequest */
        CreatePostRequest: {
            channel: components['schemas']['NewPostData'];
            message?: components['schemas']['NewMessageData'] | null;
            /** Idempotency Key */
            idempotency_key: string;
            participant_details: components['schemas']['ParticipantDetailsVisibility'];
            /** Community Id */
            community_id?: string | null;
            /** @default APP */
            via_client: components['schemas']['ViaClientEnum'] | null;
            displayed_author?: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Repost Of Id */
            repost_of_id?: string | null;
            /** Target Roles */
            target_roles?: string[] | null;
            /** Target Domains */
            target_domains?: string[] | null;
            /** Target Companies */
            target_companies?: string[] | null;
        };
        /** CreateProfileViewRequest */
        CreateProfileViewRequest: {
            /**
             * Account Uuid
             * Format: uuid
             */
            account_uuid: string;
        };
        /** CreatedCommunityResponse */
        CreatedCommunityResponse: {
            channel: components['schemas']['CreatedCommunityResponseBody'];
        };
        /** CreatedCommunityResponseBody */
        CreatedCommunityResponseBody: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Created */
            created: boolean;
        };
        /** CreatedMessageResponse */
        CreatedMessageResponse: {
            /** Id */
            id: string;
            message: components['schemas']['MessageBodyResponse'];
        };
        /** CreatedPostResponse */
        CreatedPostResponse: {
            channel: components['schemas']['CreatedPostResponseBody'];
            message: components['schemas']['CreatedMessageResponse'] | null;
            repost_of: components['schemas']['CreatedPostResponse'] | null;
        };
        /** CreatedPostResponseBody */
        CreatedPostResponseBody: {
            /** Id */
            id: string;
            /** Created */
            created: boolean;
            /** Share Url */
            share_url: string | null;
        };
        /**
         * CrosspostingStatusEnum
         * @enum {string}
         */
        CrosspostingStatusEnum: 'INACTIVE' | 'AWAIT_BINDING' | 'BOUND';
        /**
         * DisplayedAuthorEnum
         * @enum {string}
         */
        DisplayedAuthorEnum: 'RESOURCE_OWNER' | 'USER';
        /** Domain */
        Domain: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Emoji Name */
            emoji_name: string;
        };
        /** DomainListViewModel */
        DomainListViewModel: {
            /** Industries */
            industries: components['schemas']['DomainViewModel'][];
        };
        /** DomainResponseDTO */
        DomainResponseDTO: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** DomainViewModel */
        DomainViewModel: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Selected */
            selected: boolean;
            /** Recommended */
            recommended: boolean;
            /** Relevance */
            relevance: number;
            /** Emoji Name */
            emoji_name: string;
        };
        /** EntityResponse */
        EntityResponse: {
            /** Uuid */
            uuid: string;
            /** Name */
            name: string;
            /** Caption */
            caption: string | null;
            /** Icon Url */
            icon_url: string | null;
            /** Addon Url */
            addon_url: string | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            type: components['schemas']['EntityTypeEnum'];
        };
        /**
         * EntityTypeEnum
         * @constant
         */
        EntityTypeEnum: 'ACCOUNT';
        /** FeedsInteractionsViewModel */
        FeedsInteractionsViewModel: {
            /** Has New Posts In Colleagues Feed */
            has_new_posts_in_colleagues_feed: boolean;
        };
        /** ForwardOfMessageSenderViewModel */
        ForwardOfMessageSenderViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Account Id */
            account_id: number;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** ForwardOfMessageViewModel */
        ForwardOfMessageViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            sender: components['schemas']['ForwardOfMessageSenderViewModel'] | null;
        };
        /** GetAccountSubscriptionsCommunitiesUnreadCountResponse */
        GetAccountSubscriptionsCommunitiesUnreadCountResponse: {
            /** Count */
            count: number;
        };
        /** GetKeyResponseSchema */
        GetKeyResponseSchema: {
            /** Key */
            key: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components['schemas']['ValidationError'][];
        };
        /** HealthcheckResponseSchema */
        HealthcheckResponseSchema: {
            /** Status */
            status: string;
            /** Build Branch */
            build_branch: string | null;
            /** Build Commit */
            build_commit: string | null;
        };
        /** HelpdeskFile */
        HelpdeskFile: {
            /**
             * Url
             * Format: uri
             */
            url: string;
            /** File Name */
            file_name: string;
            /** Content Type */
            content_type: string;
        };
        /** HideNotificationRequest */
        HideNotificationRequest: {
            /** Stack Ids */
            stack_ids: string[];
        };
        /** ImgInfo */
        ImgInfo: {
            size: components['schemas']['ImgSize'];
        };
        /** ImgSize */
        ImgSize: {
            /** Width */
            width: number | null;
            /** Height */
            height: number | null;
        };
        /** InAppNotificationSetting */
        InAppNotificationSetting: {
            /** Enabled */
            enabled: boolean;
        };
        /** IndustriesUpdateRequest */
        IndustriesUpdateRequest: {
            /** Industry Ids */
            industry_ids: string[];
            /** Custom Name */
            custom_name?: string | null;
        };
        /** InviteActivatedPushData */
        InviteActivatedPushData: {
            /**
             * Type
             * @default INVITE_ACTIVATED
             * @constant
             */
            type: 'INVITE_ACTIVATED';
            /** Account Id */
            account_id: number;
            /** Invite Id */
            invite_id: string;
        };
        /** InviteResponse */
        InviteResponse: {
            /** Invite Id */
            invite_id: string;
            /** Invite Link */
            invite_link: string | null;
            /** Sent Time */
            sent_time: string | null;
            /** To Account Id */
            to_account_id: number | null;
        };
        /** InvitesResponse */
        InvitesResponse: {
            /** Count */
            count: number;
            /** Invites */
            invites: components['schemas']['InviteResponse'][] | null;
        };
        /**
         * JobSearchChecklistViewModel
         * @description в ответе апи id становится не опциональным
         */
        JobSearchChecklistViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Progress */
            progress: number;
            /** Checklist */
            checklist: components['schemas']['JobSearchSection'][];
        };
        /**
         * JobSearchCommunicationFieldEnum
         * @enum {string}
         */
        JobSearchCommunicationFieldEnum:
            | 'IS_SEARCH_FOR_A_WORK_STATUS_SET'
            | 'IS_POST_RESUME_CREATED'
            | 'IS_TARGETING_SET';
        /** JobSearchField */
        JobSearchField: {
            /** Id */
            id:
                | components['schemas']['JobSearchCommunicationFieldEnum']
                | components['schemas']['JobSearchProfileFieldEnum']
                | components['schemas']['JobSearchWorkFindingFieldEnum'];
            /** Title */
            title: string;
            /** Description */
            description: string | null;
            /** Rate */
            rate: number;
            status: components['schemas']['JobSearchFieldStatusEnum'];
            /** Expired At */
            expired_at: string | null;
        };
        /**
         * JobSearchFieldStatusEnum
         * @enum {string}
         */
        JobSearchFieldStatusEnum: 'COMPLETED' | 'LOCKED' | 'NOT_COMPLETED' | 'EXPIRED';
        /**
         * JobSearchProfileFieldEnum
         * @enum {string}
         */
        JobSearchProfileFieldEnum:
            | 'IS_WORK_EXPERIENCE_FILLED'
            | 'IS_PHOTO_ADDED'
            | 'IS_CAPTION_FILLED'
            | 'IS_DESCRIPTION_FILLED';
        /** JobSearchSection */
        JobSearchSection: {
            name: components['schemas']['JobSearchSectionEnum'];
            /** Fields */
            fields: components['schemas']['JobSearchField'][];
        };
        /**
         * JobSearchSectionEnum
         * @enum {string}
         */
        JobSearchSectionEnum: 'COMMUNICATION' | 'PROFILE' | 'WORK_FINDING';
        /**
         * JobSearchWorkFindingFieldEnum
         * @enum {string}
         */
        JobSearchWorkFindingFieldEnum:
            | 'IS_SUBSCRIBED_TO_HIRING_PERSON'
            | 'IS_HAS_CHAT_WITH_HIRING_PERSON'
            | 'IS_LIKED_VACANCY_POST';
        /** KeySkillBodyRequest */
        KeySkillBodyRequest: {
            /** Id */
            id: number;
        };
        /** KeySkillBodyResponse */
        KeySkillBodyResponse: {
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /** LeftElement */
        LeftElement: {
            /** Images */
            images: string[];
        };
        /** LogoutRequest */
        LogoutRequest: {
            /** Push Subscription Token */
            push_subscription_token?: string | null;
        };
        /** MarkMessageReadRequestModel */
        MarkMessageReadRequestModel: {
            /**
             * Message Id
             * Format: uuid
             */
            message_id: string;
        };
        /** MarkNotificationAsReadRequest */
        MarkNotificationAsReadRequest: {
            /** Stack Ids */
            stack_ids: string[];
        };
        /**
         * MarkReadSource
         * @enum {string}
         */
        MarkReadSource: 'POST' | 'SERP';
        /**
         * MemberStatusEnum
         * @enum {string}
         */
        MemberStatusEnum: 'REGISTERED' | 'INVITED' | 'NOT_REGISTERED';
        /** MessageBodyResponse */
        MessageBodyResponse: {
            /** Id */
            id: string;
            /** Text */
            text: string | null;
            /** Title */
            title: string | null;
            /** Img */
            img: string[] | null;
            /** Img Info */
            img_info: {
                [key: string]: components['schemas']['ImgInfo'] | null;
            };
            /** Account Mentions */
            account_mentions: number[] | null;
            /** Dt */
            dt: string | null;
            /** Participant Id */
            participant_id: string | null;
            /** Reactions */
            reactions: {
                [key: string]: components['schemas']['MessageReactionCounter'];
            } | null;
            /** Current Account Reaction Id */
            current_account_reaction_id: string | null;
            reply_to_message: components['schemas']['MessageBodyResponse'] | null;
            /** Thread Channel Id */
            thread_channel_id: string | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Deleted */
            deleted: boolean | null;
            /** Channel Id */
            channel_id: string | null;
            type: components['schemas']['MessageType'];
            /** Files */
            files: string[] | null;
            /** Last Edit Time */
            last_edit_time: string | null;
            displayed_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Displayed Author Id */
            displayed_author_id: string | null;
            visibility_type: components['schemas']['ChannelVisibilityTypeEnum'] | null;
            display: components['schemas']['MessageDisplayData'] | null;
            /**
             * Comments Allowed
             * @default true
             */
            comments_allowed: boolean;
        };
        /** MessageComplaintBody */
        MessageComplaintBody: {
            reason?: components['schemas']['ComplaintReason'] | null;
            /** User Reason */
            user_reason?: string | null;
        };
        /** MessageDisplayData */
        MessageDisplayData: {
            /** Name */
            name: string | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** Icon Url */
            icon_url: string | null;
            company: components['schemas']['CompanySuggestResponse'] | null;
            position: components['schemas']['PositionResponse'] | null;
            /** Position Title */
            position_title: string | null;
            /** Caption */
            caption: string | null;
        };
        /** MessageReactionAddRequestViewModel */
        MessageReactionAddRequestViewModel: {
            /** Reaction Id */
            reaction_id: string;
        };
        /** MessageReactionAddResponseViewModel */
        MessageReactionAddResponseViewModel: {
            /**
             * Status
             * @enum {string}
             */
            status: 'ok' | 'error';
        };
        /** MessageReactionCounter */
        MessageReactionCounter: {
            /** Count */
            count: number;
        };
        /**
         * MessageType
         * @enum {string}
         */
        MessageType: 'SIMPLE' | 'POST' | 'P2P' | 'REF';
        /** MessageViewModel */
        MessageViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Sender Id
             * Format: uuid
             */
            sender_id: string;
            /**
             * Recipient Id
             * Format: uuid
             */
            recipient_id: string;
            /** Content */
            content: string;
            /** Content Encryption Key Id */
            content_encryption_key_id: string | null;
            /** Sender Content */
            sender_content: string | null;
            /** Sender Content Encryption Key Id */
            sender_content_encryption_key_id: string | null;
            /**
             * Attachments
             * @default []
             */
            attachments: components['schemas']['AttachmentViewModel'][];
            linked_to: components['schemas']['MessageViewModel'] | null;
            linked_type: components['schemas']['ChatMessageLinkedTypeEnum'] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Edit At */
            last_edit_at: string | null;
            /** Read At */
            read_at: string | null;
            /**
             * Reactions
             * @default []
             */
            reactions: components['schemas']['ReactionViewModel'][];
            forward_of: components['schemas']['ForwardOfMessageViewModel'] | null;
        };
        /**
         * MessagesDirection
         * @enum {string}
         */
        MessagesDirection: 'PREV' | 'NEXT';
        /** MessagesListResponse */
        MessagesListResponse: {
            /** Messages */
            messages: components['schemas']['MessageBodyResponse'][];
            /** Cursor */
            cursor: string | null;
            /** Channels */
            channels: {
                [key: string]: components['schemas']['ChannelShortResponse'];
            } | null;
        };
        /** Metadata */
        Metadata: {
            /** Exception Id */
            exception_id: string | null;
            /** Is Question */
            is_question: boolean | null;
            /** Is Channel */
            is_channel: boolean | null;
            /** Is Comment */
            is_comment: boolean | null;
            /** Company Id */
            company_id: number | null;
            user: components['schemas']['NotificationUser'] | null;
            /** Account Id */
            account_id: number | null;
            /** Join Request Id */
            join_request_id: string | null;
            join_request_status: components['schemas']['ChannelJoinRequestStatusEnum'] | null;
        };
        /**
         * MobileDeviceOs
         * @enum {string}
         */
        MobileDeviceOs: 'ANDROID' | 'IOS';
        /**
         * ModerationDecision
         * @enum {string}
         */
        ModerationDecision:
            | 'DELETE_COMMUNITY'
            | 'DELETE_COMMUNITY_LOGO'
            | 'DELETE_COMMUNITY_DESCRIPTION'
            | 'DELETE_COMMUNITY_WITH_ALL_POSTS'
            | 'DELETE_POST'
            | 'DELETE_COMMENT'
            | 'BLOCK_ACCOUNT'
            | 'BLOCK_ACCOUNT_FOREVER'
            | 'WARN_ACCOUNT'
            | 'DELETE_ACCOUNT_FIRST_NAME'
            | 'DELETE_ACCOUNT_LAST_NAME'
            | 'DELETE_ACCOUNT_AVATAR'
            | 'DELETE_ACCOUNT_DESCRIPTION'
            | 'DELETE_ACCOUNT_COMPANY'
            | 'DELETE_ACCOUNT_POSITION'
            | 'LIMIT_POST'
            | 'REMOVE_POST_LIMIT'
            | 'WARN_COMMUNITY_OWNER';
        /** ModerationDecisionDetail */
        ModerationDecisionDetail: {
            decision: components['schemas']['ModerationDecision'];
            /** Expires At */
            expires_at?: string | null;
            /**
             * Warning Text
             * @default
             */
            warning_text: string;
        };
        /**
         * ModerationEntity
         * @enum {string}
         */
        ModerationEntity: 'ACCOUNT' | 'POST' | 'MESSAGE' | 'COMMUNITY' | 'P2P' | 'WORK_EXPERIENCE';
        /** ModerationNote */
        ModerationNote: {
            /** Id */
            id: number;
            /**
             * Creation Time
             * Format: date-time
             */
            creation_time: string;
            /** Decisions */
            decisions: components['schemas']['ModerationDecision'][];
            /** Description */
            description: string | null;
            entity_type: components['schemas']['ModerationEntity'];
            /** Entity Id */
            entity_id: string;
        };
        /** ModerationPostShortListResponse */
        ModerationPostShortListResponse: {
            /** Channels */
            channels: components['schemas']['ModeratorPostShortResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ModerationSaveRequest */
        ModerationSaveRequest: {
            /** Description */
            description?: string | null;
            /** Decisions */
            decisions: components['schemas']['ModerationDecisionDetail'][];
        };
        /** ModerationTaskResponse */
        ModerationTaskResponse: {
            /** Id */
            id: number;
            /**
             * Creation Time
             * Format: date-time
             */
            creation_time: string;
            entity_type: components['schemas']['ModerationEntity'];
            /** Entity Id */
            entity_id: string;
            /** Moderator Account Id */
            moderator_account_id: number | null;
            /** Can Moderate */
            can_moderate: boolean;
            post: components['schemas']['ModeratorPostShortResponse'] | null;
            comment: components['schemas']['MessageBodyResponse'] | null;
            account: components['schemas']['AccountResponse'] | null;
            community: components['schemas']['ChannelShortResponse'] | null;
            p2p: components['schemas']['ChannelShortResponse'] | null;
            complaint: components['schemas']['ComplaintResponse'] | null;
            /** Reason */
            reason: string | null;
            /** Attached To Account Id */
            attached_to_account_id: number | null;
        };
        /** ModerationTasksCount */
        ModerationTasksCount: {
            /** Count By Type */
            count_by_type: {
                [key: string]: number;
            };
        };
        /** ModerationTasksResponse */
        ModerationTasksResponse: {
            /** Tasks */
            tasks: components['schemas']['ModerationTaskResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ModeratorPostShortResponse */
        ModeratorPostShortResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            current_participant: components['schemas']['ChannelCurrentParticipantInfo'] | null;
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][];
            /** Last Messages */
            last_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** First Messages */
            first_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** Total Messages Count */
            total_messages_count: number | null;
            /** Unread Messages Count */
            unread_messages_count: number | null;
            /** Untouched Posts Count */
            untouched_posts_count: number | null;
            post_preview: components['schemas']['PostPreviewResponse'] | null;
            /** Icon Url */
            icon_url: string | null;
            /** Share Url */
            share_url: string | null;
            /** Description */
            description: string | null;
            /** Favorited */
            favorited: boolean | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Parent Channel Id */
            parent_channel_id: string | null;
            p2p_account: components['schemas']['AccountResponse'] | null;
            /** Subscriptions */
            subscriptions: components['schemas']['ChannelSubscriptionResponse'][] | null;
            /** Roles */
            roles: components['schemas']['ChannelRoleResponse'][] | null;
            settings: components['schemas']['CommunitySettingsResponse'] | null;
            /** Is Question */
            is_question: boolean | null;
            /** Views */
            views: number | null;
            /** Accounts Who Commented */
            accounts_who_commented: number[] | null;
            /** Accounts Who Liked */
            accounts_who_liked: number[] | null;
            displayed_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Is Channel */
            is_channel: boolean | null;
            /** Has Join Request */
            has_join_request: boolean | null;
            /** Verified */
            verified: boolean | null;
            /** Verified Company Name */
            verified_company_name: string | null;
            /** Verified Hh Employer Id */
            verified_hh_employer_id: number | null;
            /** Verified Start Date */
            verified_start_date: string | null;
            /** Verified End Date */
            verified_end_date: string | null;
            /** Allow Target */
            allow_target: boolean | null;
            /**
             * Deleted
             * @default false
             */
            deleted: boolean;
            visibility_type: components['schemas']['ChannelVisibilityTypeEnum'];
            post_type: components['schemas']['ChannelPostTypeEnum'] | null;
            /** Snippets */
            snippets: components['schemas']['ChannelPostSnippetResponse'][] | null;
            /** Join Requests Count */
            join_requests_count: number;
            repost_of: components['schemas']['PostShortResponse'] | null;
            /** Repost Enabled */
            repost_enabled: boolean | null;
            /** Reposts Count */
            reposts_count: number | null;
            /**
             * Hidden
             * @default false
             */
            hidden: boolean;
            /**
             * Moderation
             * @default false
             */
            moderation: boolean;
            /**
             * Limited
             * @default false
             */
            limited: boolean;
        };
        /** Navigation */
        Navigation: {
            /** Link */
            link: string | null;
        };
        /** NetworkIcon */
        NetworkIcon: {
            type: components['schemas']['NetworkIconEnum'];
            /** Icon */
            icon: string;
        };
        /**
         * NetworkIconEnum
         * @enum {string}
         */
        NetworkIconEnum: 'EMOJI' | 'URL';
        /** NetworkInfo */
        NetworkInfo: {
            /** Name */
            name: string;
            /**
             * Members Count
             * @default 0
             */
            members_count: number;
            /**
             * Member Avatar Urls
             * @default []
             */
            member_avatar_urls: string[];
            settings: components['schemas']['NetworkSettings'] | null;
        };
        /** NetworkSettings */
        NetworkSettings: {
            /** Is Hidden */
            is_hidden: boolean;
            /** Is Notified About Presence In Network */
            is_notified_about_presence_in_network: boolean;
            /** Is Working Now */
            is_working_now: boolean;
        };
        /**
         * NetworkTypeEnum
         * @enum {string}
         */
        NetworkTypeEnum: 'role' | 'domain' | 'domain_role' | 'company' | 'company_role';
        /** NetworkTypesView */
        NetworkTypesView: components['schemas']['NetworkTypesViewEnum'][];
        /**
         * NetworkTypesViewEnum
         * @enum {string}
         */
        NetworkTypesViewEnum: 'domain' | 'role' | 'company';
        /** NetworkVacanciesCountView */
        NetworkVacanciesCountView: {
            /** Count */
            count: number;
        };
        /** NetworksListViewNetwork */
        NetworksListViewNetwork: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            type: components['schemas']['NetworkTypeEnum'];
            icon: components['schemas']['NetworkIcon'] | null;
            /** Members Count */
            members_count: number;
            /** Member Avatar Urls */
            member_avatar_urls: string[];
            settings: components['schemas']['NetworkSettings'] | null;
        };
        /** NetworksUsersListViewNetwork */
        NetworksUsersListViewNetwork: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            type: components['schemas']['NetworkTypeEnum'];
            icon: components['schemas']['NetworkIcon'] | null;
            /** Members Count */
            members_count: number;
            /** Member Avatar Urls */
            member_avatar_urls: string[];
            settings: components['schemas']['NetworkSettings'] | null;
        };
        /** NewCaptchaGeneratedResponse */
        NewCaptchaGeneratedResponse: {
            /** State */
            state: string | null;
            /** Image Url */
            image_url: string | null;
        };
        /** NewCommentToPostPushData */
        NewCommentToPostPushData: {
            /**
             * Type
             * @default NEW_COMMENT_TO_POST
             * @constant
             */
            type: 'NEW_COMMENT_TO_POST';
            /** Post Channel Id */
            post_channel_id: string;
            /** Comment Message Id */
            comment_message_id: string;
            /** Open Channel Id */
            open_channel_id: string;
            /** Open Message Id */
            open_message_id: string;
        };
        /** NewCommentToYourPostPushData */
        NewCommentToYourPostPushData: {
            /**
             * Type
             * @default NEW_COMMENT_TO_YOUR_POST
             * @constant
             */
            type: 'NEW_COMMENT_TO_YOUR_POST';
            /** Post Channel Id */
            post_channel_id: string;
            /** Comment Message Id */
            comment_message_id: string;
        };
        /** NewCommunityData */
        NewCommunityData: {
            /** Name */
            name: string;
            /** Tags */
            tags?: components['schemas']['TagBodyRequest'][] | null;
            settings?: components['schemas']['CommunitySettings'] | null;
            /** Description */
            description?: string | null;
            /** Image Upload Id */
            image_upload_id?: string | null;
            visibility_type?: components['schemas']['ChannelVisibilityTypeEnum'] | null;
        };
        /** NewCommunityJoinRequestForAdminPushData */
        NewCommunityJoinRequestForAdminPushData: {
            /**
             * Type
             * @default NEW_COMMUNITY_JOIN_REQUEST_FOR_ADMIN
             * @constant
             */
            type: 'NEW_COMMUNITY_JOIN_REQUEST_FOR_ADMIN';
            /** Community Id */
            community_id: string;
            /** Is Channel */
            is_channel: string;
        };
        /** NewCommunityPostPushData */
        NewCommunityPostPushData: {
            /**
             * Type
             * @default NEW_POST_IN_COMMUNITY
             * @constant
             */
            type: 'NEW_POST_IN_COMMUNITY';
            /** Post Channel Id */
            post_channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** NewMessageData */
        NewMessageData: {
            data?: components['schemas']['TextMessageData'] | null;
            /** Reply To */
            reply_to?: string | null;
            /** Account Mentions */
            account_mentions?: number[] | null;
        };
        /** NewP2PMessagePushData */
        NewP2PMessagePushData: {
            /**
             * Type
             * @default NEW_P2P_MESSAGE
             * @constant
             */
            type: 'NEW_P2P_MESSAGE';
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
            /** From Account Id */
            from_account_id: number;
        };
        /** NewPostData */
        NewPostData: {
            /** Tags */
            tags?: components['schemas']['TagBodyRequest'][] | null;
            settings?: components['schemas']['PostSettings'] | null;
        };
        /** NewProfilePostPushData */
        NewProfilePostPushData: {
            /**
             * Type
             * @default NEW_POST_IN_PROFILE
             * @constant
             */
            type: 'NEW_POST_IN_PROFILE';
            /** Open Channel Id */
            open_channel_id: string;
            /** Post Channel Id */
            post_channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** NewReactionsForMessage */
        NewReactionsForMessage: {
            /**
             * Type
             * @default NEW_REACTIONS_FOR_MESSAGE
             * @constant
             */
            type: 'NEW_REACTIONS_FOR_MESSAGE';
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
            /** Open Channel Id */
            open_channel_id: string;
            /** Open Message Id */
            open_message_id: string;
        };
        /** NewReplyToYourCommentPushData */
        NewReplyToYourCommentPushData: {
            /**
             * Type
             * @default REPLY_TO_YOUR_COMMENT
             * @constant
             */
            type: 'REPLY_TO_YOUR_COMMENT';
            /** Open Channel Id */
            open_channel_id: string;
            /** Post Channel Id */
            post_channel_id: string;
            /** Comment Message Id */
            comment_message_id: string;
            /** Replied Message Id */
            replied_message_id: string;
        };
        /** NotificationAccountFollowedYou */
        NotificationAccountFollowedYou: {
            /** Account Id */
            account_id: number;
        };
        /** NotificationAccountNewCompanyPosition */
        NotificationAccountNewCompanyPosition: {
            /** Account Id */
            account_id: number;
            /** Company Id */
            company_id: number;
            /** Position Id */
            position_id: number;
        };
        /** NotificationCommentReplied */
        NotificationCommentReplied: {
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
            /** Reply Message Id */
            reply_message_id: string;
        };
        /** NotificationCommunityDeleted */
        NotificationCommunityDeleted: {
            /** Channel Name */
            channel_name: string;
        };
        /** NotificationContent */
        NotificationContent: {
            /** Channel Name */
            channel_name: string | null;
            /** Channel Id */
            channel_id: string | null;
            /** Parent Channel Id */
            parent_channel_id: string | null;
            /** Message Id */
            message_id: string | null;
            /** Reply Message Id */
            reply_message_id: string | null;
            /** Account Id */
            account_id: number | null;
            /** Company Id */
            company_id: number | null;
            /** Position Id */
            position_id: number | null;
            /** Related Channel Id */
            related_channel_id: string | null;
            /** Is Channel */
            is_channel: boolean | null;
        };
        /** NotificationContentAccountMentioned */
        NotificationContentAccountMentioned: {
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** NotificationContentAuthorPostNewComments */
        NotificationContentAuthorPostNewComments: {
            /** Channel Id */
            channel_id: string;
        };
        /** NotificationContentNewPostInCommunity */
        NotificationContentNewPostInCommunity: {
            /** Channel Id */
            channel_id: string;
            /** Parent Channel Id */
            parent_channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** NotificationContentPostNewComments */
        NotificationContentPostNewComments: {
            /** Channel Id */
            channel_id: string;
        };
        /** NotificationData */
        NotificationData: {
            /** Stack Id */
            stack_id: string;
            notification_type: components['schemas']['NotificationType'];
            /** Is Read */
            is_read: boolean;
            /** Created At */
            created_at: string;
            /** Title */
            title: string;
            /** Details */
            details: string;
            /** Content */
            content: string;
            left_element: components['schemas']['LeftElement'] | null;
            right_element: components['schemas']['RightElement'] | null;
            nav: components['schemas']['Navigation'] | null;
            metadata: components['schemas']['Metadata'];
        };
        /** NotificationFeedResponse */
        NotificationFeedResponse: {
            /** Data */
            data: components['schemas']['NotificationData'][];
            /** Cursor */
            cursor: string;
        };
        /** NotificationPreferenceBody */
        'NotificationPreferenceBody-Input': {
            delivery: components['schemas']['NotificationSettings-Input'];
            /** Exceptions */
            exceptions?: {
                [key: string]: components['schemas']['NotificationSettings-Input'];
            } | null;
        };
        /** NotificationPreferenceBody */
        'NotificationPreferenceBody-Output': {
            delivery: components['schemas']['NotificationSettings-Output'];
            /** Exceptions */
            exceptions: {
                [key: string]: components['schemas']['NotificationSettings-Output'];
            } | null;
        };
        /** NotificationResponse[Literal[NotificationType], NotificationAccountFollowedYou] */
        NotificationResponse_Literal_NotificationType__NotificationAccountFollowedYou_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'ACCOUNT_FOLLOWED_YOU';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationAccountFollowedYou'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationAccountNewCompanyPosition] */
        NotificationResponse_Literal_NotificationType__NotificationAccountNewCompanyPosition_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'ACCOUNT_NEW_COMPANY_POSITION';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationAccountNewCompanyPosition'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationCommentReplied] */
        NotificationResponse_Literal_NotificationType__NotificationCommentReplied_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'COMMENT_REPLIED';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationCommentReplied'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationCommunityDeleted] */
        NotificationResponse_Literal_NotificationType__NotificationCommunityDeleted_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'YOUR_COMMUNITY_DELETED';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationCommunityDeleted'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationContentAccountMentioned] */
        NotificationResponse_Literal_NotificationType__NotificationContentAccountMentioned_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'ACCOUNT_MENTIONED';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationContentAccountMentioned'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationContentAuthorPostNewComments] */
        NotificationResponse_Literal_NotificationType__NotificationContentAuthorPostNewComments_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'AUTHOR_POST_NEW_COMMENTS';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationContentAuthorPostNewComments'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationContentNewPostInCommunity] */
        NotificationResponse_Literal_NotificationType__NotificationContentNewPostInCommunity_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'NEW_POST_IN_COMMUNITY';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationContentNewPostInCommunity'];
        };
        /** NotificationResponse[Literal[NotificationType], NotificationContentPostNewComments] */
        NotificationResponse_Literal_NotificationType__NotificationContentPostNewComments_: {
            /** Id */
            id: string;
            /**
             * Type
             * @constant
             */
            type: 'POST_NEW_COMMENTS';
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            content: components['schemas']['NotificationContentPostNewComments'];
        };
        /** NotificationResponse[str, dict] */
        NotificationResponse_str_dict_: {
            /** Id */
            id: string;
            /** Type */
            type: string;
            /**
             * Creation Dt
             * Format: date-time
             */
            creation_dt: string;
            /** Read Dt */
            read_dt: string | null;
            /** Content */
            content: Record<string, never>;
        };
        /** NotificationSettings */
        'NotificationSettings-Input': {
            in_app?: components['schemas']['InAppNotificationSetting'] | null;
            push?: components['schemas']['PushNotificationSetting'] | null;
        } & {
            [key: string]: unknown;
        };
        /** NotificationSettings */
        'NotificationSettings-Output': {
            in_app: components['schemas']['InAppNotificationSetting'] | null;
            push: components['schemas']['PushNotificationSetting'] | null;
        } & {
            [key: string]: unknown;
        };
        /** NotificationStateResponse */
        NotificationStateResponse: {
            /** Stack Ids */
            stack_ids: string[];
        };
        /**
         * NotificationType
         * @enum {string}
         */
        NotificationType:
            | 'ACCOUNT_MENTIONED'
            | 'COMMENT_REPLIED'
            | 'AUTHOR_POST_NEW_COMMENTS'
            | 'NEW_POST_IN_COMMUNITY'
            | 'NEW_POST_IN_PROFILE'
            | 'POST_NEW_COMMENTS'
            | 'ACCOUNT_NEW_COMPANY_POSITION'
            | 'POST_NEW_REACTIONS'
            | 'MESSAGE_NEW_REACTIONS'
            | 'YOUR_COMMUNITY_DELETED'
            | 'ACCOUNT_FOLLOWED_YOU'
            | 'YOUR_COMMUNITY_JOIN_REQUEST_ACCEPTED'
            | 'NEW_REPLY_TO_YOUR_COMMENT'
            | 'NEW_COMMENT_TO_YOUR_POST'
            | 'NEW_JOIN_REQUEST_TO_YOUR_COMMUNITY';
        /** NotificationUser */
        NotificationUser: {
            /** Is Subscribed */
            is_subscribed: boolean;
            /** Account Id */
            account_id: number;
            /**
             * Account Uuid
             * Format: uuid
             */
            account_uuid: string;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
        };
        /** NotificationsCountResponse */
        NotificationsCountResponse: {
            /** Count */
            count: number;
        };
        /** NotificationsListResponse */
        NotificationsListResponse: {
            /** Notifications */
            notifications: (
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationContentAccountMentioned_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationContentAuthorPostNewComments_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationContentNewPostInCommunity_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationContentPostNewComments_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationCommentReplied_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationAccountNewCompanyPosition_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationCommunityDeleted_']
                | components['schemas']['NotificationResponse_Literal_NotificationType__NotificationAccountFollowedYou_']
                | components['schemas']['NotificationResponse_str_dict_']
            )[];
            /** Cursor */
            cursor: string | null;
            /** Channels */
            channels: {
                [key: string]: components['schemas']['ChannelShortResponse'];
            };
            /** Communities */
            communities: {
                [key: string]: components['schemas']['ChannelShortResponse'];
            };
            /** Messages */
            messages: {
                [key: string]: components['schemas']['MessageBodyResponse'];
            };
            /** Participants */
            participants: {
                [key: string]: components['schemas']['ChannelParticipantFullInfo'];
            };
            /** Accounts */
            accounts: {
                [key: string]: components['schemas']['AccountResponse'];
            };
            /** Companies */
            companies: {
                [key: string]: components['schemas']['CompanySuggestResponse'];
            };
            /** Positions */
            positions: {
                [key: string]: components['schemas']['PositionResponse'];
            };
        };
        /**
         * OAuthAppAlias
         * @enum {string}
         */
        OAuthAppAlias: 'WEBAPP' | 'MOBAPP';
        /**
         * OAuthGrantType
         * @enum {string}
         */
        OAuthGrantType:
            | 'authorization_code'
            | 'jag_otp_login_or_register'
            | 'refresh_token'
            | 'oauth_external_access_token';
        /** OnboardingResponse */
        OnboardingResponse: {
            /** Onboarding Completed */
            onboarding_completed: boolean;
            /** Steps */
            steps: components['schemas']['OnboardingStep'][];
        };
        /** OnboardingStep */
        OnboardingStep: {
            name: components['schemas']['OnboardingStepNames'];
            /** Completed */
            completed: boolean;
            /** Required */
            required: boolean;
        };
        /**
         * OnboardingStepNames
         * @enum {string}
         */
        OnboardingStepNames:
            | 'HH_PERSONAL_DATA'
            | 'HH_WORK_EXPERIENCE'
            | 'FIO'
            | 'AVATAR'
            | 'WORK_EXPERIENCE'
            | 'SUBSCRIPTIONS_AUTHORS'
            | 'SUBSCRIPTIONS_COMMUNITIES';
        /** OpenChannelTaskPushData */
        OpenChannelTaskPushData: {
            /**
             * Type
             * @default OPEN_CHANNEL_TASK
             * @constant
             */
            type: 'OPEN_CHANNEL_TASK';
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string | null;
        };
        /** OtpGenerateSuccessResponse */
        OtpGenerateSuccessResponse: {
            /** Symbols Count */
            symbols_count: number;
            /**
             * Next Send Allowed At
             * Format: date-time
             */
            next_send_allowed_at: string;
            /** Login */
            login: string;
            /** State */
            state: string;
        };
        /**
         * OtpOperationType
         * @constant
         */
        OtpOperationType: 'register_or_login';
        /** OtpSendAllowedResponse */
        OtpSendAllowedResponse: {
            /** Is Allowed */
            is_allowed: boolean;
            /** Next Send Allowed At */
            next_send_allowed_at: string | null;
            /** Login */
            login: string;
        };
        /** ParticipantByIdResponse */
        ParticipantByIdResponse: {
            /** Participants */
            participants: {
                [key: string]: components['schemas']['ChannelParticipantFullInfo'];
            };
        };
        /**
         * ParticipantDetailsVisibility
         * @enum {string}
         */
        ParticipantDetailsVisibility:
            | 'ALL_DETAILS'
            | 'ONLY_COMPANY'
            | 'ONLY_POSITION'
            | 'ONLY_COMPANY_AND_POSITION'
            | 'COMMUNITY';
        /** PlaceResponse */
        PlaceResponse: {
            /** @default PLACE_RESPONSE */
            type: components['schemas']['SuggestType'];
            /** Id */
            id: number;
            /** Name */
            name: string;
            country: components['schemas']['CountryPlaceResponse'];
        };
        /** PlaceUpdateRequest */
        PlaceUpdateRequest: {
            /** Id */
            id: number;
        };
        /** PositionLongResponse */
        PositionLongResponse: {
            /**
             * Type
             * @default POSITION_LONG_RESPONSE
             * @constant
             */
            type: 'POSITION_LONG_RESPONSE';
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Count Accounts From Setka */
            count_accounts_from_setka: number;
            /** Accounts From Setka */
            accounts_from_setka: components['schemas']['AccountShortResponse'][] | null;
        };
        /** PositionResponse */
        PositionResponse: {
            /**
             * Type
             * @default POSITION_RESPONSE
             * @constant
             */
            type: 'POSITION_RESPONSE';
            /** Id */
            id: number | null;
            /** Name */
            name: string | null;
        };
        /** PostDesiredCompanyViewModel */
        PostDesiredCompanyViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PostDesiredDomainViewModel */
        PostDesiredDomainViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Emoji Name */
            emoji_name: string;
        };
        /** PostDesiredInfoResponse */
        PostDesiredInfoResponse: {
            /** Desired Roles */
            desired_roles: string[];
            /** Desired Domains */
            desired_domains: string[];
            /** Desired Companies */
            desired_companies: string[];
        };
        /** PostDesiredInfoViewModel */
        PostDesiredInfoViewModel: {
            /** Desired Roles */
            desired_roles: string[];
            /** Desired Domains */
            desired_domains: string[];
            /** Desired Companies */
            desired_companies: string[];
        };
        /** PostDesiredInfoWithEntitiesViewModel */
        PostDesiredInfoWithEntitiesViewModel: {
            /** Desired Roles */
            desired_roles: components['schemas']['PostDesiredRoleViewModel'][];
            /** Desired Domains */
            desired_domains: components['schemas']['PostDesiredDomainViewModel'][];
            /** Desired Companies */
            desired_companies: components['schemas']['PostDesiredCompanyViewModel'][];
        };
        /** PostDesiredRoleViewModel */
        PostDesiredRoleViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** PostNetworkInfoWithMemberAvatars */
        PostNetworkInfoWithMemberAvatars: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Caption */
            caption: string;
            icon: components['schemas']['NetworkIcon'] | null;
            /**
             * Members Count
             * @default 0
             */
            members_count: number;
            /** Member Avatar Urls */
            member_avatar_urls: string[];
        };
        /** PostPositionViewsViewModel */
        PostPositionViewsViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Is Target */
            is_target: boolean;
            /** Views Count */
            views_count: number;
            /** Percent */
            percent: number;
        };
        /** PostPreviewResponse */
        PostPreviewResponse: {
            /** Id */
            id: string;
            /** Text */
            text: string;
            /** Img */
            img: string[];
            /** Is Repost */
            is_repost: boolean;
            /** Is Question */
            is_question: boolean;
            /**
             * Dt
             * Format: date-time
             */
            dt: string;
        };
        /** PostRequestWriteSchema */
        PostRequestWriteSchema: {
            /** Tg Id */
            tg_id: number;
            /** Body */
            body: string;
            /**
             * Idempotency Key
             * Format: uuid
             */
            idempotency_key: string;
            /** Attachments */
            attachments: string[];
            /** Autoposting */
            autoposting: boolean;
        };
        /** PostRoleCategoryViewsViewModel */
        PostRoleCategoryViewsViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Is Target */
            is_target: boolean;
            /** Views Count */
            views_count: number;
            /** Percent */
            percent: number;
            /** Positions */
            positions: components['schemas']['PostPositionViewsViewModel'][];
        };
        /** PostSettings */
        PostSettings: {
            /** Allow New Comment */
            allow_new_comment?: boolean | null;
            anon_message_allowed?: components['schemas']['AnonMessageSetting'] | null;
            /** Is Question */
            is_question?: boolean | null;
        };
        /** PostShortByIdResponse */
        PostShortByIdResponse: {
            /** Channels */
            channels: {
                [key: string]: components['schemas']['PostShortResponse'];
            };
        };
        /** PostShortListResponse */
        PostShortListResponse: {
            /** Channels */
            channels: components['schemas']['PostShortResponse'][];
            /** Test 1 Group */
            test_1_group: number | null;
            /** Cursor */
            cursor: string | null;
        };
        /** PostShortResponse */
        PostShortResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            current_participant: components['schemas']['ChannelCurrentParticipantInfo'] | null;
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][];
            /** Last Messages */
            last_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** First Messages */
            first_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** Total Messages Count */
            total_messages_count: number | null;
            /** Unread Messages Count */
            unread_messages_count: number | null;
            /** Untouched Posts Count */
            untouched_posts_count: number | null;
            post_preview: components['schemas']['PostPreviewResponse'] | null;
            /** Icon Url */
            icon_url: string | null;
            /** Share Url */
            share_url: string | null;
            /** Description */
            description: string | null;
            /** Favorited */
            favorited: boolean | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Parent Channel Id */
            parent_channel_id: string | null;
            p2p_account: components['schemas']['AccountResponse'] | null;
            /** Subscriptions */
            subscriptions: components['schemas']['ChannelSubscriptionResponse'][] | null;
            /** Roles */
            roles: components['schemas']['ChannelRoleResponse'][] | null;
            settings: components['schemas']['CommunitySettingsResponse'] | null;
            /** Is Question */
            is_question: boolean | null;
            /** Views */
            views: number | null;
            /** Accounts Who Commented */
            accounts_who_commented: number[] | null;
            /** Accounts Who Liked */
            accounts_who_liked: number[] | null;
            displayed_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Is Channel */
            is_channel: boolean | null;
            /** Has Join Request */
            has_join_request: boolean | null;
            /** Verified */
            verified: boolean | null;
            /** Verified Company Name */
            verified_company_name: string | null;
            /** Verified Hh Employer Id */
            verified_hh_employer_id: number | null;
            /** Verified Start Date */
            verified_start_date: string | null;
            /** Verified End Date */
            verified_end_date: string | null;
            /** Allow Target */
            allow_target: boolean | null;
            /**
             * Deleted
             * @default false
             */
            deleted: boolean;
            visibility_type: components['schemas']['ChannelVisibilityTypeEnum'];
            post_type: components['schemas']['ChannelPostTypeEnum'] | null;
            /** Snippets */
            snippets: components['schemas']['ChannelPostSnippetResponse'][] | null;
            /** Join Requests Count */
            join_requests_count: number;
            repost_of: components['schemas']['PostShortResponse'] | null;
            /** Repost Enabled */
            repost_enabled: boolean | null;
            /** Reposts Count */
            reposts_count: number | null;
        };
        /** PostViewsByRoleStatisticsViewModel */
        PostViewsByRoleStatisticsViewModel: {
            /** Total */
            total: number;
            /** Total Web */
            total_web: number;
            /** Total App */
            total_app: number;
            /** Positions */
            positions: components['schemas']['PostPositionViewsViewModel'][];
        };
        /** PostViewsCompaniesViewModel */
        PostViewsCompaniesViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
            /** Is Target */
            is_target: boolean;
            /** Views Count */
            views_count: number;
        };
        /** PostViewsDomainsViewModel */
        PostViewsDomainsViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Emoji Name */
            emoji_name: string;
            /** Is Target */
            is_target: boolean;
            /** Views Count */
            views_count: number;
        };
        /** PostWithNetworkShortListResponse */
        PostWithNetworkShortListResponse: {
            /** Channels */
            channels: components['schemas']['PostWithNetworkShortResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** PostWithNetworkShortResponse */
        PostWithNetworkShortResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            current_participant: components['schemas']['ChannelCurrentParticipantInfo'] | null;
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][];
            /** Last Messages */
            last_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** First Messages */
            first_messages: components['schemas']['MessageBodyResponse'][] | null;
            /** Total Messages Count */
            total_messages_count: number | null;
            /** Unread Messages Count */
            unread_messages_count: number | null;
            /** Untouched Posts Count */
            untouched_posts_count: number | null;
            post_preview: components['schemas']['PostPreviewResponse'] | null;
            /** Icon Url */
            icon_url: string | null;
            /** Share Url */
            share_url: string | null;
            /** Description */
            description: string | null;
            /** Favorited */
            favorited: boolean | null;
            /** Has Complaint */
            has_complaint: boolean | null;
            /** Parent Channel Id */
            parent_channel_id: string | null;
            p2p_account: components['schemas']['AccountResponse'] | null;
            /** Subscriptions */
            subscriptions: components['schemas']['ChannelSubscriptionResponse'][] | null;
            /** Roles */
            roles: components['schemas']['ChannelRoleResponse'][] | null;
            settings: components['schemas']['CommunitySettingsResponse'] | null;
            /** Is Question */
            is_question: boolean | null;
            /** Views */
            views: number | null;
            /** Accounts Who Commented */
            accounts_who_commented: number[] | null;
            /** Accounts Who Liked */
            accounts_who_liked: number[] | null;
            displayed_author: components['schemas']['DisplayedAuthorEnum'] | null;
            /** Is Channel */
            is_channel: boolean | null;
            /** Has Join Request */
            has_join_request: boolean | null;
            /** Verified */
            verified: boolean | null;
            /** Verified Company Name */
            verified_company_name: string | null;
            /** Verified Hh Employer Id */
            verified_hh_employer_id: number | null;
            /** Verified Start Date */
            verified_start_date: string | null;
            /** Verified End Date */
            verified_end_date: string | null;
            /** Allow Target */
            allow_target: boolean | null;
            /**
             * Deleted
             * @default false
             */
            deleted: boolean;
            visibility_type: components['schemas']['ChannelVisibilityTypeEnum'];
            post_type: components['schemas']['ChannelPostTypeEnum'] | null;
            /** Snippets */
            snippets: components['schemas']['ChannelPostSnippetResponse'][] | null;
            /** Join Requests Count */
            join_requests_count: number;
            repost_of: components['schemas']['PostShortResponse'] | null;
            /** Repost Enabled */
            repost_enabled: boolean | null;
            /** Reposts Count */
            reposts_count: number | null;
            network: components['schemas']['PostNetworkInfoWithMemberAvatars'] | null;
            /**
             * Networks
             * @default []
             */
            networks: components['schemas']['PostNetworkInfoWithMemberAvatars'][];
        };
        /**
         * PreviewInfoStatusEnum
         * @enum {string}
         */
        PreviewInfoStatusEnum: 'RESUME_POST_NOT_FOUND' | 'RECOMMENDATIONS_ARE_EMPTY';
        /** PrivateCommunityViewModel */
        PrivateCommunityViewModel: {
            /** Id */
            id: string;
            /** Favorited */
            favorited: boolean;
            /** Subscribers Count */
            subscribers_count: number;
            /** Name */
            name: string | null;
            /** Icon Url */
            icon_url: string | null;
            /** Description */
            description: string | null;
            /** Is Channel */
            is_channel: boolean | null;
        };
        /**
         * ProfileViewHiddenReasonEnum
         * @enum {string}
         */
        ProfileViewHiddenReasonEnum:
            | 'USER_HIDDEN_BY_SELF'
            | 'HIDDEN_BY_PREVIOUS_SETTINGS'
            | 'HIDDEN_BY_INCOMPLETE_EXPERIENCE'
            | 'HIDDEN_BY_PROFILE_VIEWS_SETTINGS';
        /**
         * ProfileViewSettingsEnum
         * @enum {string}
         */
        ProfileViewSettingsEnum: 'ALL' | 'ONLY_SUBSCRIBERS' | 'NOBODY';
        /** PushNotificationSetting */
        PushNotificationSetting: {
            /** Enabled */
            enabled: boolean;
        };
        /** PushUnsubscribeSchema */
        PushUnsubscribeSchema: {
            /** Push Subscription Token */
            push_subscription_token: string;
        };
        /**
         * QuestionsFilter
         * @enum {string}
         */
        QuestionsFilter: 'NOT_SET' | 'QUESTIONS_ONLY' | 'NO_QUESTIONS';
        /** ReactionData */
        ReactionData: {
            /** Reaction Id */
            reaction_id: string;
        };
        /** ReactionViewModel */
        ReactionViewModel: {
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** Reaction */
            reaction: string;
        };
        /** Reason */
        Reason: {
            type: components['schemas']['ScoreReasonEnum'];
            /** Icon Url */
            icon_url: string;
            /** Description */
            description: string;
            /** Avatar Urls */
            avatar_urls: string[] | null;
        };
        /**
         * RecepientNotificationPreferencesTypeEnum
         * @enum {string}
         */
        RecepientNotificationPreferencesTypeEnum:
            | 'NEW_POST_IN_COMMUNITY'
            | 'NEW_POST_IN_PROFILE'
            | 'NEW_P2P_MESSAGE'
            | 'NEW_REPLY_TO_YOUR_COMMENT'
            | 'NEW_COMMENT_TO_YOUR_POST'
            | 'ACCOUNT_NEW_COMPANY_POSITION'
            | 'ACCOUNT_FOLLOWED_YOU'
            | 'NEW_REACTIONS_FOR_MESSAGE'
            | 'ACCOUNT_MENTIONED'
            | 'NEW_JOIN_REQUEST_TO_YOUR_COMMUNITY';
        /** RecepientPreferencesResponse */
        RecepientPreferencesResponse: {
            /** Preferences */
            preferences: {
                [key: string]: components['schemas']['NotificationPreferenceBody-Output'];
            };
        };
        /** Recipient */
        Recipient: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** RecipientViewModel */
        RecipientViewModel: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Account Id */
            account_id: number;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Caption */
            caption: string | null;
            company: components['schemas']['jager_app__presentation__model__chats__CompanyViewModel'] | null;
            /** Position Title */
            position_title: string | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** RedirectUrlResponse */
        RedirectUrlResponse: {
            /** Redirect Url */
            redirect_url: string;
        };
        /**
         * RelationDirection
         * @enum {string}
         */
        RelationDirection: 'FROM' | 'TO' | 'EXCLUDE';
        /** RelationshipCounters */
        RelationshipCounters: {
            /**
             * Shared Count
             * @default 0
             */
            shared_count: number;
            /**
             * Others Shared Count
             * @default 0
             */
            others_shared_count: number;
            /**
             * All Count
             * @default 0
             */
            all_count: number;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            /** Members */
            members: string[];
        };
        /** RelationshipDescription */
        RelationshipDescription: {
            to_user: components['schemas']['RelationshipUser'];
            /** All Count */
            all_count: number;
            /** Shared Count */
            shared_count: number;
            /** Exclusive Count */
            exclusive_count: number;
            /** Shared Users */
            shared_users: components['schemas']['User'][];
            /** Exclusive Users */
            exclusive_users: components['schemas']['User'][];
            /** Others Shared Users */
            others_shared_users: components['schemas']['User'][];
            /** Others Shared Count */
            others_shared_count: number;
        };
        /** RelationshipDescriptionThrough */
        RelationshipDescriptionThrough: {
            to_user: components['schemas']['RelationshipUser'];
            through_user: components['schemas']['RelationshipUser'];
        };
        /**
         * RelationshipStrength
         * @enum {string}
         */
        RelationshipStrength: 'WEAK' | 'MEDIUM' | 'STRONG';
        /**
         * RelationshipTypeEnum
         * @enum {string}
         */
        RelationshipTypeEnum: 'exclusive' | 'shared' | 'all' | 'others_shared';
        /** RelationshipUser */
        RelationshipUser: {
            user: components['schemas']['User'];
            /** Reasons */
            reasons: components['schemas']['Reason'][];
        };
        /** RelationshipUsers */
        RelationshipUsers: {
            /**
             * Users
             * @default []
             */
            users: components['schemas']['User'][];
            /** Cursor */
            cursor: string | null;
        };
        /** ResumePreviewInfoViewModel */
        ResumePreviewInfoViewModel: {
            /**
             * Unread Post Count
             * @default 0
             */
            unread_post_count: number;
            /**
             * Preview Info
             * @default []
             */
            preview_info: components['schemas']['ResumePreviewModel'][];
            status: components['schemas']['ResumePreviewStatusEnum'] | null;
        };
        /** ResumePreviewModel */
        ResumePreviewModel: {
            /**
             * Post Id
             * Format: uuid
             */
            post_id: string;
            /** Avatar Icon */
            avatar_icon: string | null;
            /** Title */
            title: string | null;
            /** Name */
            name: string | null;
        };
        /**
         * ResumePreviewStatusEnum
         * @enum {string}
         */
        ResumePreviewStatusEnum: 'VACANCY_POST_NOT_FOUND' | 'RECOMMENDATIONS_ARE_EMPTY';
        /**
         * ResumeStatusEnum
         * @enum {string}
         */
        ResumeStatusEnum: 'NOT_FOUND' | 'HIDDEN' | 'VISIBLE_TO_EMPLOYERS_ONLY' | 'PUBLIC';
        /** ResumeStatusViewModel */
        ResumeStatusViewModel: {
            status: components['schemas']['ResumeStatusEnum'];
        };
        /** ResumesPostsListViewModel */
        ResumesPostsListViewModel: {
            /**
             * Channels
             * @default []
             */
            channels: components['schemas']['ChannelShortResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** RightElement */
        RightElement: {
            /** Images */
            images: string[];
        };
        /** Role */
        Role: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** RoleCategory */
        RoleCategory: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Roles */
            roles: components['schemas']['Role'][];
        };
        /** RoleResponse */
        RoleResponse: {
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
            /** Name */
            name: string;
        };
        /** RoleShortListResponse */
        RoleShortListResponse: {
            /** Roles */
            roles: components['schemas']['RoleResponse'][];
        };
        /**
         * ScoreReasonEnum
         * @enum {string}
         */
        ScoreReasonEnum: 'WORKED_FOR' | 'SUBSCRIPTION' | 'COMMON_RELATIONS';
        /** ScreenShownEventFields */
        ScreenShownEventFields: {
            /** Screen Name */
            screen_name: string;
        };
        /**
         * ScrollDirection
         * @enum {string}
         */
        ScrollDirection: 'PREV' | 'NEXT';
        /** SendMessageRequestViewModel */
        SendMessageRequestViewModel: {
            /**
             * Recipient Id
             * Format: uuid
             */
            recipient_id: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Content */
            content: string;
            /** Content Encryption Key Id */
            content_encryption_key_id?: string | null;
            /** Sender Content */
            sender_content?: string | null;
            /** Sender Content Encryption Key Id */
            sender_content_encryption_key_id?: string | null;
            /** Linked To */
            linked_to?: string | null;
            linked_type?: components['schemas']['ChatMessageLinkedTypeEnum'] | null;
            /** Forward Of */
            forward_of?: string | null;
        };
        /** SendMessageViewModel */
        SendMessageViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Sender Id
             * Format: uuid
             */
            sender_id: string;
            /**
             * Recipient Id
             * Format: uuid
             */
            recipient_id: string;
            /** Content */
            content: string;
            /** Content Encryption Key Id */
            content_encryption_key_id: string | null;
            /** Sender Content */
            sender_content: string | null;
            /** Sender Content Encryption Key Id */
            sender_content_encryption_key_id: string | null;
            /**
             * Attachments
             * @default []
             */
            attachments: components['schemas']['AttachmentViewModel'][];
            linked_to: components['schemas']['MessageViewModel'] | null;
            linked_type: components['schemas']['ChatMessageLinkedTypeEnum'] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Edit At */
            last_edit_at: string | null;
            /** Read At */
            read_at: string | null;
            /**
             * Reactions
             * @default []
             */
            reactions: components['schemas']['ReactionViewModel'][];
            forward_of: components['schemas']['ForwardOfMessageViewModel'] | null;
        };
        /** Sender */
        Sender: {
            /** Is Bot */
            is_bot: boolean;
            /** Name */
            name?: string | null;
            /** Avatar */
            avatar?: string | null;
        };
        /**
         * SessionsFilter
         * @enum {string}
         */
        SessionsFilter: 'MY_SUPPORT_SESSIONS' | 'NEW_SUPPORT_SESSIONS';
        /** SetKeyResponseSchema */
        SetKeyResponseSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Account Id */
            account_id: number;
            /** Key */
            key: string;
        };
        /**
         * SettingName
         * @enum {string}
         */
        SettingName:
            | 'INVITES_ENABLED'
            | 'SEND_WELCOME_LETTER'
            | 'SIX_DIGIT_OTP_ENABLED'
            | 'similar_recommendation_enabled'
            | 'boksh_similar_recommendation_enabled';
        /** SettingResponse */
        SettingResponse: {
            key: components['schemas']['SettingName'];
            /** Value */
            value: string;
        };
        /** SettingsResponse */
        SettingsResponse: {
            /** Settings */
            settings: components['schemas']['SettingResponse'][];
        };
        /** ShortParticipantByChannelResponse */
        ShortParticipantByChannelResponse: {
            /** Participants */
            participants: {
                [key: string]: components['schemas']['ChannelParticipantShortInfo'][];
            };
        };
        /**
         * ShortenerResponseListModelView
         * @example {
         *       "urls": {
         *         "https://setka.ru/channel/1234-5678-1234-5678": "https://set.ki/mwxzyp7",
         *         "https://setka.ru/channel/1234-5678-7777-7777": "https://set.ki/s1m89cx"
         *       }
         *     }
         */
        ShortenerResponseListModelView: {
            /** Urls */
            urls: {
                [key: string]: string;
            };
        };
        /** ShortenerResponseReadSchema */
        ShortenerResponseReadSchema: {
            /** Url */
            url: string;
        };
        /**
         * SortDirection
         * @enum {string}
         */
        SortDirection: 'NEW' | 'OLD';
        /** StatusCheckResult */
        StatusCheckResult: {
            /** Error */
            error: string | null;
            /** Status */
            status: string;
        };
        /** StatusGetResponse */
        StatusGetResponse: {
            /** Statuses */
            statuses: components['schemas']['StatusInfo'][];
        };
        /** StatusInfo */
        StatusInfo: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Comment */
            comment: string | null;
            status_type: components['schemas']['AccountStatusEnum'];
        };
        /** StatusResponse */
        StatusResponse: {
            /** Version */
            version: string;
            db: components['schemas']['StatusCheckResult'];
            redis: components['schemas']['StatusCheckResult'];
        };
        /** StatusUpdateRequest */
        StatusUpdateRequest: {
            /** Status Id */
            status_id?: number | null;
            /** Status Description */
            status_description?: string | null;
        };
        /**
         * SubscriptionCommunitiesGroupEnum
         * @enum {string}
         */
        SubscriptionCommunitiesGroupEnum: 'all' | 'communities' | 'channels' | 'my' | 'private';
        /**
         * SuggestName
         * @enum {string}
         */
        SuggestName: 'tag' | 'company' | 'company_long' | 'country' | 'position' | 'position_long';
        /** SuggestResponse */
        SuggestResponse: {
            /** Items */
            items: unknown[];
        };
        /** SuggestResponse[Union[CityResponse, CountryResponse, TagBodyResponse, CompanySuggestResponse, PositionResponse, PositionLongResponse, CompanyLongSuggestResponse]] */
        SuggestResponse_Union_CityResponse__CountryResponse__TagBodyResponse__CompanySuggestResponse__PositionResponse__PositionLongResponse__CompanyLongSuggestResponse__: {
            /** Items */
            items: (
                | components['schemas']['CityResponse']
                | components['schemas']['CountryResponse']
                | components['schemas']['TagBodyResponse']
                | components['schemas']['CompanySuggestResponse']
                | components['schemas']['PositionResponse']
                | components['schemas']['PositionLongResponse']
                | components['schemas']['CompanyLongSuggestResponse']
            )[];
        };
        /**
         * SuggestType
         * @enum {string}
         */
        SuggestType:
            | 'COMPANY_LONG_SUGGEST_RESPONSE'
            | 'COMPANY_GET_RESULT'
            | 'COMPANY_SUGGEST_RESPONSE'
            | 'POSITION_LONG_RESPONSE'
            | 'TYPE_BODY_RESPONSE'
            | 'POSITION_RESPONSE'
            | 'CITY_RESPONSE'
            | 'PLACE_RESPONSE'
            | 'COUNTRY_RESPONSE';
        /** SupportChat */
        SupportChat: {
            /** Legacy Account Id */
            legacy_account_id: number;
            /**
             * Account Id
             * Format: uuid
             */
            account_id: string;
            /** Channel Id */
            channel_id: string | null;
        };
        /** SupportSessionResponse */
        SupportSessionResponse: {
            /** Account Id */
            account_id: number;
            /** Chat Channel Id */
            chat_channel_id: string;
            /** Support Account Id */
            support_account_id: number | null;
            /** Session Start Time */
            session_start_time: string | null;
        };
        /** SupportSessionsCount */
        SupportSessionsCount: {
            /** Count By Type */
            count_by_type: {
                [key: string]: number;
            };
        };
        /** SupportSessionsResponse */
        SupportSessionsResponse: {
            /** Sessions */
            sessions: components['schemas']['SupportSessionResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /**
         * SystemRole
         * @enum {string}
         */
        SystemRole: 'ADMIN' | 'MODERATOR' | 'SUPPORT' | 'SETKA_SUPPORT_CHANNEL_OWNER';
        /** TagBodyRequest */
        TagBodyRequest: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
        };
        /** TagBodyResponse */
        TagBodyResponse: {
            /**
             * Type
             * @default TYPE_BODY_RESPONSE
             * @constant
             */
            type: 'TYPE_BODY_RESPONSE';
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /** TagsListResponse */
        TagsListResponse: {
            /** Tags */
            tags: components['schemas']['TagBodyResponse'][];
        };
        /** TagsUpdateRequest */
        TagsUpdateRequest: {
            /** Tags */
            tags: components['schemas']['TagBodyRequest'][];
        };
        /** TextMessageData */
        TextMessageData: {
            /** Title */
            title?: string | null;
            /** Text */
            text?: string | null;
            /** Img */
            img?: string[] | null;
            /** Files */
            files?: string[] | null;
            /** @default REGULAR */
            post_type: components['schemas']['ChannelPostTypeEnum'];
            /** Hh Link */
            hh_link?: string | null;
            /** Desired Roles */
            desired_roles?: string[] | null;
            /** Desired Domains */
            desired_domains?: string[] | null;
            /** Desired Companies */
            desired_companies?: string[] | null;
        };
        /** TgChannelBundleViewModel */
        TgChannelBundleViewModel: {
            /**
             * Binding Id
             * Format: uuid
             */
            binding_id: string;
            /** Tg Id */
            tg_id: number;
            /** Destination */
            destination: string;
            /** Destination Name */
            destination_name: string;
            /** Autoposting */
            autoposting: boolean;
        };
        /** TgChannelBundlesListViewModel */
        TgChannelBundlesListViewModel: {
            /** Result */
            result: components['schemas']['TgChannelBundleViewModel'][];
        };
        /** TgCrosspostingStatusViewModel */
        TgCrosspostingStatusViewModel: {
            status: components['schemas']['CrosspostingStatusEnum'];
        };
        /** TgDeleteChannelBundleRequestModel */
        TgDeleteChannelBundleRequestModel: {
            /**
             * Binding Id
             * Format: uuid
             */
            binding_id: string;
        };
        /** TgDestinationsListViewModel */
        TgDestinationsListViewModel: {
            /** Destinations */
            destinations: components['schemas']['TgDestinationsViewModel'][];
        };
        /** TgDestinationsViewModel */
        TgDestinationsViewModel: {
            /** Name */
            name: string;
            /**
             * Channel Id
             * Format: uuid
             */
            channel_id: string;
        };
        /** TgPermanentTokenViewModel */
        TgPermanentTokenViewModel: {
            /**
             * Token
             * Format: uuid
             */
            token: string;
        };
        /** TgTemporaryTokenViewModel */
        TgTemporaryTokenViewModel: {
            /**
             * Token
             * Format: uuid
             */
            token: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /** Tg Bot Url */
            tg_bot_url: string;
        };
        /** TotalWorkExperience */
        TotalWorkExperience: {
            /** Years */
            years: number;
            /** Months */
            months: number;
        };
        /** TrackPushRequest */
        TrackPushRequest: {
            /**
             * Push Id
             * Format: uuid
             */
            push_id: string;
        };
        /** UnreadNotificationsView */
        UnreadNotificationsView: {
            /** Count */
            count: number;
        };
        /** UpdateMessageRequest */
        UpdateMessageRequest: {
            data?: components['schemas']['TextMessageData'] | null;
            /** Reply To */
            reply_to?: string | null;
            /** Account Mentions */
            account_mentions?: number[] | null;
        };
        /** UpdateMessageRequestViewModel */
        UpdateMessageRequestViewModel: {
            /** Content */
            content: string;
            /** Content Encryption Key Id */
            content_encryption_key_id?: string | null;
            /** Sender Content */
            sender_content?: string | null;
            /** Sender Content Encryption Key Id */
            sender_content_encryption_key_id?: string | null;
        };
        /** UpdatePostPublicationDateRequest */
        UpdatePostPublicationDateRequest: {
            /**
             * New Publication Date
             * Format: date-time
             */
            new_publication_date: string;
        };
        /** UpdatePostRequest */
        UpdatePostRequest: {
            /** Tags */
            tags?: components['schemas']['TagBodyRequest'][] | null;
            message?: components['schemas']['UpdateMessageRequest'] | null;
            /** Target Roles */
            target_roles?: string[] | null;
            /** Target Domains */
            target_domains?: string[] | null;
            /** Target Companies */
            target_companies?: string[] | null;
        };
        /** UpdateProfileViewSettingsRequest */
        UpdateProfileViewSettingsRequest: {
            profile_view_setting: components['schemas']['ProfileViewSettingsEnum'];
        };
        /** UpdateRecepientPreferencesRequest */
        UpdateRecepientPreferencesRequest: {
            /** Preferences */
            preferences: {
                [key: string]: components['schemas']['NotificationPreferenceBody-Input'];
            };
        };
        /** UpdateSettingsRequest */
        UpdateSettingsRequest: {
            key: components['schemas']['SettingName'];
            /** Value */
            value: string;
        };
        /** UpdatedCommunityResponse */
        UpdatedCommunityResponse: {
            channel: components['schemas']['UpdatedCommunityResponseBody'];
        };
        /** UpdatedCommunityResponseBody */
        UpdatedCommunityResponseBody: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
        };
        /** UpdatedMessageResponse */
        UpdatedMessageResponse: {
            /** Id */
            id: string;
            message: components['schemas']['MessageBodyResponse'];
        };
        /** UploadResultResponse */
        UploadResultResponse: {
            /** Id */
            id: string;
        };
        /**
         * UploadTagValue
         * @enum {string}
         */
        UploadTagValue: 'AVATAR' | 'MEME' | 'DEFAULT_BLURED_AVATAR';
        /** UrlRequestSchema */
        UrlRequestSchema: {
            /**
             * Url
             * Format: uri
             */
            url: string;
            type: components['schemas']['UrlTypeEnum'] | null;
        };
        /**
         * UrlTypeEnum
         * @enum {string}
         */
        UrlTypeEnum:
            | 'channel'
            | 'community'
            | 'post'
            | 'invite'
            | 'question'
            | 'account'
            | 'com_inv'
            | 'chan_inv'
            | 'resume'
            | 'vacancy'
            | 'network';
        /** User */
        User: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Relations */
            relations: components['schemas']['AccountRelationResponse'][] | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Caption */
            caption: string | null;
            /** Position Title */
            position_title: string | null;
            position: components['schemas']['jager_app__presentation__model__account__Position'] | null;
            company: components['schemas']['jager_app__presentation__model__account__Company'] | null;
            /** P2P Channel Id */
            p2p_channel_id: string | null;
        };
        /** UserProfileView */
        UserProfileView: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Networks Count */
            networks_count: number;
            /** Companies */
            companies: components['schemas']['CompanyInNetwork'][];
        };
        /** UserRelationshipsCounters */
        UserRelationshipsCounters: {
            /**
             * Strong
             * @default 0
             */
            strong: number;
            /**
             * Medium
             * @default 0
             */
            medium: number;
            /**
             * Weak
             * @default 0
             */
            weak: number;
            /**
             * All
             * @default 0
             */
            all: number;
        };
        /** VacanciesAccessibleRolesViewModel */
        VacanciesAccessibleRolesViewModel: {
            /**
             * Roles
             * @default []
             */
            roles: components['schemas']['jager_app__presentation__rest__public__v1__recommendation__vacancies__view_models__VacancyRoleModel'][];
        };
        /** VacanciesPostsListViewModel */
        VacanciesPostsListViewModel: {
            /**
             * Channels
             * @default []
             */
            channels: components['schemas']['ChannelShortResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** VacancyPreviewInfoViewModel */
        VacancyPreviewInfoViewModel: {
            /**
             * Unread Post Count
             * @default 0
             */
            unread_post_count: number;
            /**
             * Preview Info
             * @default []
             */
            preview_info: components['schemas']['VacancyPreviewModel'][];
            status: components['schemas']['PreviewInfoStatusEnum'] | null;
        };
        /** VacancyPreviewModel */
        VacancyPreviewModel: {
            /** Company Icon */
            company_icon: string | null;
            /** Company Name */
            company_name: string | null;
            /** Title */
            title: string | null;
            /**
             * Salary From
             * @default 0
             */
            salary_from: number | null;
            /**
             * Salary To
             * @default 0
             */
            salary_to: number | null;
            /** Published At */
            published_at: string | null;
        };
        /** VacancyStatusViewModel */
        VacancyStatusViewModel: {
            status: components['schemas']['VacancyVisibilityEnum'];
        };
        /**
         * VacancyVisibilityEnum
         * @enum {string}
         */
        VacancyVisibilityEnum: 'NOT_FOUND' | 'OK';
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ViaClientEnum
         * @enum {string}
         */
        ViaClientEnum: 'WEB' | 'MOBILE' | 'APP' | 'TELEGRAM';
        /** WarnAboutRulesViolationPushData */
        WarnAboutRulesViolationPushData: {
            /**
             * Type
             * @default WARN_ABOUT_RULES_VIOLATION
             * @constant
             */
            type: 'WARN_ABOUT_RULES_VIOLATION';
            /** Open Account Id */
            open_account_id: number;
        };
        /** WarnCommunityOwnerRulesViolationPushData */
        WarnCommunityOwnerRulesViolationPushData: {
            /**
             * Type
             * @default WARN_COMMUNITY_OWNER_RULES_VIOLATION
             * @constant
             */
            type: 'WARN_COMMUNITY_OWNER_RULES_VIOLATION';
            /** Open Community Id */
            open_community_id: string;
        };
        /**
         * WorkExpStateEnum
         * @enum {string}
         */
        WorkExpStateEnum: 'INVALID' | 'NOT_VERIFIED' | 'VERIFIED';
        /** WorkExperienceBodyResponse */
        WorkExperienceBodyResponse: {
            /** Id */
            id: string;
            company_position: components['schemas']['CompanyPositionBodyResponse'] | null;
            /** Start Year */
            start_year: number | null;
            /** End Year */
            end_year: number | null;
            /** Start Month */
            start_month: number | null;
            /** End Month */
            end_month: number | null;
            /** Work Currently */
            work_currently: boolean | null;
            /** Index */
            index: number | null;
            /** Description */
            description: string | null;
            /** Industries */
            industries: components['schemas']['DomainResponseDTO'][] | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /**
             * Networks Count
             * @default 0
             */
            networks_count: number;
            /** @default NOT_VERIFIED */
            state: components['schemas']['WorkExpStateEnum'];
        };
        /**
         * WorkingTypeEnum
         * @enum {string}
         */
        WorkingTypeEnum: 'worked_previously' | 'working_now';
        /** WsConnectUrl */
        WsConnectUrl: {
            /** Url */
            url: string;
        };
        /**
         * WsMessageType
         * @enum {string}
         */
        WsMessageType:
            | 'NEW_NOTIFICATION'
            | 'NEW_P2P_MESSAGE'
            | 'NEW_P2P_CHANNEL_CREATED'
            | 'NEW_POST_COMMENT'
            | 'P2P_READ_BY_OPPONENT'
            | 'PING';
        /** WsNewNotificationData */
        WsNewNotificationData: {
            /** Current Device */
            current_device: boolean | null;
            /** @default NEW_NOTIFICATION */
            type: components['schemas']['WsMessageType'];
            /** Notification Id */
            notification_id: string;
            notification_type: components['schemas']['NotificationType'];
            /** Important */
            important: boolean;
            content: components['schemas']['NotificationContent'] | null;
        };
        /** WsNewP2PChannelCreated */
        WsNewP2PChannelCreated: {
            /** Current Device */
            current_device: boolean | null;
            /** @default NEW_P2P_CHANNEL_CREATED */
            type: components['schemas']['WsMessageType'];
            /** By Account Id */
            by_account_id: number;
            /** Channel Id */
            channel_id: string;
        };
        /** WsNewP2PMessage */
        WsNewP2PMessage: {
            /** Current Device */
            current_device: boolean | null;
            /** @default NEW_P2P_MESSAGE */
            type: components['schemas']['WsMessageType'];
            /** From Account Id */
            from_account_id: number;
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** WsP2PReadByOpponent */
        WsP2PReadByOpponent: {
            /** Current Device */
            current_device: boolean | null;
            /** @default P2P_READ_BY_OPPONENT */
            type: components['schemas']['WsMessageType'];
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
            /** Account Id */
            account_id: number;
            /** Participant Id */
            participant_id: string;
            /**
             * Participant Last Read Dt
             * Format: date-time
             */
            participant_last_read_dt: string;
        };
        /** WsPingData */
        WsPingData: {
            /** Current Device */
            current_device: boolean | null;
            /** @default PING */
            type: components['schemas']['WsMessageType'];
            /**
             * Dt
             * Format: date-time
             */
            dt: string;
        };
        /** WsPostCommentCreated */
        WsPostCommentCreated: {
            /** Current Device */
            current_device: boolean | null;
            /** @default NEW_POST_COMMENT */
            type: components['schemas']['WsMessageType'];
            /** Channel Id */
            channel_id: string;
            /** Message Id */
            message_id: string;
        };
        /** WsSubscribeData */
        WsSubscribeData: {
            /**
             * Type
             * @default subscribe
             * @constant
             */
            type: 'subscribe';
            /** Channel Ids */
            channel_ids: string[] | null;
            /** Account Ids */
            account_ids: number[] | null;
        };
        /** WsUnsubscribeData */
        WsUnsubscribeData: {
            /**
             * Type
             * @default unsubscribe
             * @constant
             */
            type: 'unsubscribe';
            /** Channel Ids */
            channel_ids: string[] | null;
            /** Account Ids */
            account_ids: number[] | null;
        };
        /** YandexGptRequest */
        YandexGptRequest: {
            /** Instructions */
            instructions: string;
            /** Request */
            request: string;
            /** Temperature */
            temperature: number;
            /** Maxtokens */
            maxTokens: number;
        };
        /** YandexGptResponse */
        YandexGptResponse: {
            /** Result */
            result: string;
            /** Score */
            score: number;
        };
        /** YourCommunityDeletedPushData */
        YourCommunityDeletedPushData: {
            /**
             * Type
             * @default YOUR_COMMUNITY_DELETED
             * @constant
             */
            type: 'YOUR_COMMUNITY_DELETED';
            /** Community Name */
            community_name: string;
            /** Notification Id */
            notification_id: string;
        };
        /** YourCommunityJoinRequestAcceptedPushData */
        YourCommunityJoinRequestAcceptedPushData: {
            /**
             * Type
             * @default YOUR_COMMUNITY_JOIN_REQUEST_ACCEPTED
             * @constant
             */
            type: 'YOUR_COMMUNITY_JOIN_REQUEST_ACCEPTED';
            /** Community Id */
            community_id: string;
        };
        /** AccountWorkExperiencesListRequest */
        jager_app__app_layer__account_services__schemas__AccountWorkExperiencesListRequest: {
            /** Experiences */
            experiences: components['schemas']['jager_app__app_layer__account_services__schemas__WorkExperienceBodyRequest'][];
        };
        /** CompanyPositionBodyRequest */
        jager_app__app_layer__account_services__schemas__CompanyPositionBodyRequest: {
            company?:
                | components['schemas']['jager_app__app_layer__account_services__schemas__CompanyUpdateRequest']
                | null;
            position?:
                | components['schemas']['jager_app__app_layer__account_services__schemas__PositionUpdateRequest']
                | null;
            /** Position Title */
            position_title?: string | null;
        };
        /** CompanyUpdateRequest */
        jager_app__app_layer__account_services__schemas__CompanyUpdateRequest: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
        };
        /** PositionUpdateRequest */
        jager_app__app_layer__account_services__schemas__PositionUpdateRequest: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
        };
        /** WorkExperienceBodyRequest */
        jager_app__app_layer__account_services__schemas__WorkExperienceBodyRequest: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            company_position: components['schemas']['jager_app__app_layer__account_services__schemas__CompanyPositionBodyRequest'];
            industries?: components['schemas']['IndustriesUpdateRequest'] | null;
            /** Start Year */
            start_year: number;
            /** End Year */
            end_year?: number | null;
            /**
             * Start Month
             * @default 1
             */
            start_month: number;
            /**
             * End Month
             * @default 1
             */
            end_month: number;
            /**
             * Work Currently
             * @default false
             */
            work_currently: boolean;
            /** Description */
            description?: string | null;
            /**
             * Is Private
             * @default false
             */
            is_private: boolean;
            /** @default NOT_VERIFIED */
            state: components['schemas']['WorkExpStateEnum'] | null;
        };
        /** Company */
        jager_app__presentation__model__account__Company: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** Position */
        jager_app__presentation__model__account__Position: {
            /** Id */
            id: number | null;
            /** Name */
            name: string | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__model__chats__CompanyViewModel: {
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** CompanyUpdateRequest */
        jager_app__presentation__model__company__CompanyUpdateRequest: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
        };
        /** PositionUpdateRequest */
        jager_app__presentation__model__position__PositionUpdateRequest: {
            /** Id */
            id?: number | null;
            /** Name */
            name?: string | null;
        };
        /** AccountWorkExperiencesListRequest */
        jager_app__presentation__model__work_experience__AccountWorkExperiencesListRequest: {
            /** Experiences */
            experiences: components['schemas']['jager_app__presentation__model__work_experience__WorkExperienceBodyRequest'][];
        };
        /** CompanyPositionBodyRequest */
        jager_app__presentation__model__work_experience__CompanyPositionBodyRequest: {
            company?: components['schemas']['jager_app__presentation__model__company__CompanyUpdateRequest'] | null;
            position?: components['schemas']['jager_app__presentation__model__position__PositionUpdateRequest'] | null;
        };
        /** WorkExperienceBodyRequest */
        jager_app__presentation__model__work_experience__WorkExperienceBodyRequest: {
            /** Id */
            id: string;
            company_position: components['schemas']['jager_app__presentation__model__work_experience__CompanyPositionBodyRequest'];
            /** Start Year */
            start_year?: number | null;
            /** End Year */
            end_year?: number | null;
            /** Start Month */
            start_month?: number | null;
            /** End Month */
            end_month?: number | null;
            /** Work Currently */
            work_currently?: boolean | null;
            /** Description */
            description?: string | null;
        };
        /** SupportWebhookRequest */
        jager_app__presentation__rest__public__v1__comm_platform__view_model__SupportWebhookRequest: {
            /** Text */
            text: string;
            recipient: components['schemas']['Recipient'];
            sender: components['schemas']['Sender'];
            /** Files */
            files: components['schemas']['HelpdeskFile'][];
            /** Buttons */
            buttons: components['schemas']['Button'][];
            /** Params */
            params?: unknown | null;
        };
        /** CommunityJoinRequestViewModel */
        jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CommunityJoinRequestViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            requested_by_user: components['schemas']['jager_app__presentation__rest__public__v1__communities__join_requests__view_models__RequestByAccountViewModel'];
            /** Viewed */
            viewed: boolean;
            status: components['schemas']['ChannelJoinRequestStatusEnum'];
            /**
             * Creation Time
             * Format: date-time
             */
            creation_time: string;
        };
        /** CommunityJoinRequestsListViewModel */
        jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CommunityJoinRequestsListViewModel: {
            /** Join Requests */
            join_requests: components['schemas']['jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CommunityJoinRequestViewModel'][];
            /** Count */
            count: number;
            /** Cursor */
            cursor: string | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CompanyViewModel: {
            /**
             * Type
             * @default COMPANY_SUGGEST_RESPONSE
             */
            type: 'COMPANY_SUGGEST_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v1__communities__join_requests__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** RequestByAccountViewModel */
        jager_app__presentation__rest__public__v1__communities__join_requests__view_models__RequestByAccountViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Account Id */
            account_id: number;
            /** Avatar Url */
            avatar_url: string | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v1__communities__join_requests__view_models__PositionViewModel']
                | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CompanyViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Caption */
            caption: string | null;
        };
        /** MentionsSearchResultResponse */
        jager_app__presentation__rest__public__v1__mentions__view_models__MentionsSearchResultResponse: {
            /** Result */
            result: components['schemas']['EntityResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** MessageReactionsGetViewModel */
        jager_app__presentation__rest__public__v1__messages__view_models__MessageReactionsGetViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v1__messages__view_models__ReactionAccountViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v1__messages__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** ReactionAccountViewModel */
        jager_app__presentation__rest__public__v1__messages__view_models__ReactionAccountViewModel: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** Caption */
            caption: string | null;
            /** Reaction Id */
            reaction_id: string | null;
            /** Company Name */
            company_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Company Logo Url */
            company_logo_url: string | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v1__messages__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** Company */
        jager_app__presentation__rest__public__v1__networks__view_models__Company: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** NetworkByIdMembersView */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworkByIdMembersView: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Members Total Count */
            members_total_count: number;
            /** Members Hidden Count */
            members_hidden_count: number | null;
            /** Cursor */
            cursor: string | null;
            /**
             * Members
             * @default []
             */
            members:
                | components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMemberViewDTO'][]
                | null;
        };
        /** NetworkMemberViewDTO */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworkMemberViewDTO: {
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** Id */
            id: string | null;
            /** Uuid */
            uuid: string | null;
            /** Resume Storage Id */
            resume_storage_id: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__Company']
                | null;
            position: components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__Position'];
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Relative Networks Count */
            relative_networks_count: number | null;
            network_state: components['schemas']['MemberStatusEnum'];
            /** Relations */
            relations: components['schemas']['AccountRelationResponse'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            relationship: components['schemas']['RelationshipCounters'] | null;
        };
        /** NetworkMembersView */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworkMembersView: {
            /**
             * Members
             * @default []
             */
            members:
                | components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMemberViewDTO'][]
                | null;
            /** Cursor */
            cursor: string | null;
        };
        /** NetworksByIDView */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworksByIDView: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Members Working Now Count */
            members_working_now_count: number;
            /** Members Worked Previously Count */
            members_worked_previously_count: number;
            /** Members Hidden Count */
            members_hidden_count: number;
            /** Members Working Now */
            members_working_now: components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMemberViewDTO'][];
            /** Members Worked Previously */
            members_worked_previously: components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMemberViewDTO'][];
        };
        /** NetworksListView */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworksListView: {
            /** Cursor */
            cursor: string | null;
            /** Networks */
            networks: components['schemas']['NetworksListViewNetwork'][];
        };
        /** NetworksUsersListView */
        jager_app__presentation__rest__public__v1__networks__view_models__NetworksUsersListView: {
            /** Cursor */
            cursor: string | null;
            /** Networks */
            networks: components['schemas']['NetworksUsersListViewNetwork'][];
        };
        /** Position */
        jager_app__presentation__rest__public__v1__networks__view_models__Position: {
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** PostViewsByGroupRoleStatisticsViewModel */
        jager_app__presentation__rest__public__v1__posts__view_models__PostViewsByGroupRoleStatisticsViewModel: {
            /** Total */
            total: number;
            /** Total Web */
            total_web: number;
            /** Total App */
            total_app: number;
            /** Groups */
            groups: components['schemas']['PostRoleCategoryViewsViewModel'][];
            /** Domains */
            domains: components['schemas']['PostViewsDomainsViewModel'][];
            /** Companies */
            companies: components['schemas']['PostViewsCompaniesViewModel'][];
        };
        /** AccountViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__AccountViewModel: {
            /** Account Id */
            account_id: number | null;
            /** Uuid */
            uuid: string | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Caption */
            caption: string | null;
            /** Status */
            status: string | null;
            /** Status Id */
            status_id: number | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__CompanyViewModel: {
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** ListProfileViewsViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__ListProfileViewsViewModel: {
            /** Items */
            items:
                | components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__ProfileViewsByTimeRangeViewModel'][]
                | null;
            /** Cursor */
            cursor: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__PositionViewModel: {
            /** Name */
            name: string | null;
        };
        /** ProfileViewViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__ProfileViewViewModel: {
            /** Count */
            count: number;
            account: components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__AccountViewModel'];
            reason: components['schemas']['ProfileViewHiddenReasonEnum'] | null;
            /** Is Read */
            is_read: boolean;
        };
        /** ProfileViewsByTimeRangeViewModel */
        jager_app__presentation__rest__public__v1__profile_views__view_models__ProfileViewsByTimeRangeViewModel: {
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Views */
            views: components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__ProfileViewViewModel'][];
        };
        /** AccountRecommendationListViewModel */
        jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__AccountRecommendationListViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__AccountRecommendationViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** AccountRecommendationViewModel */
        jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__AccountRecommendationViewModel: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__PositionViewModel']
                | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            /** Caption */
            caption: string | null;
            /** Position Title */
            position_title: string | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__CompanyViewModel: {
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__PositionViewModel: {
            /** Name */
            name: string | null;
        };
        /** VacancyRoleModel */
        jager_app__presentation__rest__public__v1__recommendation__resumes__view_models__VacancyRoleModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string | null;
        };
        /** VacancyRolesViewModel */
        jager_app__presentation__rest__public__v1__recommendation__resumes__view_models__VacancyRolesViewModel: {
            /** Roles */
            roles: components['schemas']['jager_app__presentation__rest__public__v1__recommendation__resumes__view_models__VacancyRoleModel'][];
        };
        /** VacancyRoleModel */
        jager_app__presentation__rest__public__v1__recommendation__vacancies__view_models__VacancyRoleModel: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v1__reposts__view_models__CompanyViewModel: {
            /**
             * Type
             * @default COMPANY_SUGGEST_RESPONSE
             */
            type: 'COMPANY_SUGGEST_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v1__reposts__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** RepostedAccountsListViewModel */
        jager_app__presentation__rest__public__v1__reposts__view_models__RepostedAccountsListViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v1__reposts__view_models__RepostedAccountsViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** RepostedAccountsViewModel */
        jager_app__presentation__rest__public__v1__reposts__view_models__RepostedAccountsViewModel: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Id */
            id: number;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Caption */
            caption: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v1__reposts__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v1__reposts__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** ShortenerRequestWriteSchema */
        jager_app__presentation__rest__public__v1__shortener__view_models__ShortenerRequestWriteSchema: {
            /** Urls */
            urls: components['schemas']['UrlRequestSchema'][];
        };
        /** Company */
        jager_app__presentation__rest__public__v1__target__view_models__Company: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** TargetRolesViewModel */
        jager_app__presentation__rest__public__v1__target__view_models__TargetRolesViewModel: {
            /** Role Categories */
            role_categories: components['schemas']['RoleCategory'][];
        };
        /** TargetSettingsViewModel */
        jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel: {
            /** Role Categories */
            role_categories: components['schemas']['RoleCategory'][];
            /** Domains */
            domains: components['schemas']['Domain'][];
            /** Companies */
            companies: components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__Company'][];
            /** Dt */
            dt: string | null;
        };
        /** SupportWebhookRequest */
        jager_app__presentation__rest__public__v2__comm_platform__view_model__SupportWebhookRequest: {
            /** Text */
            text: string;
            recipient: components['schemas']['Recipient'];
            sender: components['schemas']['Sender'];
            /** Files */
            files: components['schemas']['HelpdeskFile'][];
            /** Buttons */
            buttons: components['schemas']['Button'][];
            /** Params */
            params?: unknown | null;
        };
        /** CommunityJoinRequestViewModel */
        jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CommunityJoinRequestViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            requested_by_user: components['schemas']['jager_app__presentation__rest__public__v2__communities__join_requests__view_models__RequestByAccountViewModel'];
            /** Viewed */
            viewed: boolean;
            status: components['schemas']['ChannelJoinRequestStatusEnum'];
            /**
             * Creation Time
             * Format: date-time
             */
            creation_time: string;
        };
        /** CommunityJoinRequestsListViewModel */
        jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CommunityJoinRequestsListViewModel: {
            /** Join Requests */
            join_requests: components['schemas']['jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CommunityJoinRequestViewModel'][];
            /** Count */
            count: number;
            /** Cursor */
            cursor: string | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CompanyViewModel: {
            /**
             * Type
             * @default COMPANY_SUGGEST_RESPONSE
             */
            type: 'COMPANY_SUGGEST_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v2__communities__join_requests__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** RequestByAccountViewModel */
        jager_app__presentation__rest__public__v2__communities__join_requests__view_models__RequestByAccountViewModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Account Id */
            account_id: number;
            /** Avatar Url */
            avatar_url: string | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v2__communities__join_requests__view_models__PositionViewModel']
                | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CompanyViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Caption */
            caption: string | null;
        };
        /** MentionsSearchResultResponse */
        jager_app__presentation__rest__public__v2__mentions__view_models__MentionsSearchResultResponse: {
            /** Result */
            result: components['schemas']['EntityResponse'][];
            /** Cursor */
            cursor: string | null;
        };
        /** MessageReactionsGetViewModel */
        jager_app__presentation__rest__public__v2__messages__view_models__MessageReactionsGetViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v2__messages__view_models__ReactionAccountViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v2__messages__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** ReactionAccountViewModel */
        jager_app__presentation__rest__public__v2__messages__view_models__ReactionAccountViewModel: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Caption */
            caption: string | null;
            /** Reaction Id */
            reaction_id: string | null;
            /** Company Name */
            company_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Company Logo Url */
            company_logo_url: string | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v2__messages__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** Company */
        jager_app__presentation__rest__public__v2__networks__view_models__Company: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** NetworkByIdMembersView */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworkByIdMembersView: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Members Total Count */
            members_total_count: number;
            /** Members Hidden Count */
            members_hidden_count: number | null;
            /** Cursor */
            cursor: string | null;
            /**
             * Members
             * @default []
             */
            members:
                | components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMemberViewDTO'][]
                | null;
        };
        /** NetworkMemberViewDTO */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworkMemberViewDTO: {
            /** Status Id */
            status_id: number | null;
            /** Status Description */
            status_description: string | null;
            /** Id */
            id: string | null;
            /** Uuid */
            uuid: string | null;
            /** Resume Storage Id */
            resume_storage_id: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__Company']
                | null;
            position: components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__Position'];
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Relative Networks Count */
            relative_networks_count: number | null;
            network_state: components['schemas']['MemberStatusEnum'];
            /** Relations */
            relations: components['schemas']['AccountRelationResponse'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
            relationship: components['schemas']['RelationshipCounters'] | null;
        };
        /** NetworkMembersView */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworkMembersView: {
            /**
             * Members
             * @default []
             */
            members:
                | components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMemberViewDTO'][]
                | null;
            /** Cursor */
            cursor: string | null;
        };
        /** NetworksByIDView */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworksByIDView: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Members Working Now Count */
            members_working_now_count: number;
            /** Members Worked Previously Count */
            members_worked_previously_count: number;
            /** Members Hidden Count */
            members_hidden_count: number;
            /** Members Working Now */
            members_working_now: components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMemberViewDTO'][];
            /** Members Worked Previously */
            members_worked_previously: components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMemberViewDTO'][];
        };
        /** NetworksListView */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworksListView: {
            /** Cursor */
            cursor: string | null;
            /** Networks */
            networks: components['schemas']['NetworksListViewNetwork'][];
        };
        /** NetworksUsersListView */
        jager_app__presentation__rest__public__v2__networks__view_models__NetworksUsersListView: {
            /** Cursor */
            cursor: string | null;
            /** Networks */
            networks: components['schemas']['NetworksUsersListViewNetwork'][];
        };
        /** Position */
        jager_app__presentation__rest__public__v2__networks__view_models__Position: {
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** PostViewsByGroupRoleStatisticsViewModel */
        jager_app__presentation__rest__public__v2__posts__view_models__PostViewsByGroupRoleStatisticsViewModel: {
            /** Total */
            total: number;
            /** Total Web */
            total_web: number;
            /** Total App */
            total_app: number;
            /** Groups */
            groups: components['schemas']['PostRoleCategoryViewsViewModel'][];
            /** Domains */
            domains: components['schemas']['PostViewsDomainsViewModel'][];
            /** Companies */
            companies: components['schemas']['PostViewsCompaniesViewModel'][];
        };
        /** AccountViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__AccountViewModel: {
            /** Account Id */
            account_id: number | null;
            /** Uuid */
            uuid: string | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            /** Caption */
            caption: string | null;
            /** Status */
            status: string | null;
            /** Status Id */
            status_id: number | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__CompanyViewModel: {
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** ListProfileViewsViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__ListProfileViewsViewModel: {
            /** Items */
            items:
                | components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__ProfileViewsByTimeRangeViewModel'][]
                | null;
            /** Cursor */
            cursor: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__PositionViewModel: {
            /** Name */
            name: string | null;
        };
        /** ProfileViewViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__ProfileViewViewModel: {
            /** Count */
            count: number;
            account: components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__AccountViewModel'];
            reason: components['schemas']['ProfileViewHiddenReasonEnum'] | null;
            /** Is Read */
            is_read: boolean;
        };
        /** ProfileViewsByTimeRangeViewModel */
        jager_app__presentation__rest__public__v2__profile_views__view_models__ProfileViewsByTimeRangeViewModel: {
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Views */
            views: components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__ProfileViewViewModel'][];
        };
        /** AccountRecommendationListViewModel */
        jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__AccountRecommendationListViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__AccountRecommendationViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** AccountRecommendationViewModel */
        jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__AccountRecommendationViewModel: {
            /** Id */
            id: number;
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__PositionViewModel']
                | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            /** Caption */
            caption: string | null;
            /** Position Title */
            position_title: string | null;
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__CompanyViewModel: {
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__PositionViewModel: {
            /** Name */
            name: string | null;
        };
        /** VacancyRoleModel */
        jager_app__presentation__rest__public__v2__recommendation__resumes__view_models__VacancyRoleModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string | null;
        };
        /** VacancyRolesViewModel */
        jager_app__presentation__rest__public__v2__recommendation__resumes__view_models__VacancyRolesViewModel: {
            /** Roles */
            roles: components['schemas']['jager_app__presentation__rest__public__v2__recommendation__resumes__view_models__VacancyRoleModel'][];
        };
        /** CompanyViewModel */
        jager_app__presentation__rest__public__v2__reposts__view_models__CompanyViewModel: {
            /**
             * Type
             * @default COMPANY_SUGGEST_RESPONSE
             */
            type: 'COMPANY_SUGGEST_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
            /** Logo Url */
            logo_url: string | null;
        };
        /** PositionViewModel */
        jager_app__presentation__rest__public__v2__reposts__view_models__PositionViewModel: {
            /**
             * Type
             * @default POSITION_RESPONSE
             */
            type: 'POSITION_RESPONSE' | null;
            /** Id */
            id: string | null;
            /** Name */
            name: string | null;
        };
        /** RepostedAccountsListViewModel */
        jager_app__presentation__rest__public__v2__reposts__view_models__RepostedAccountsListViewModel: {
            /** Accounts */
            accounts: components['schemas']['jager_app__presentation__rest__public__v2__reposts__view_models__RepostedAccountsViewModel'][];
            /** Cursor */
            cursor: string | null;
        };
        /** RepostedAccountsViewModel */
        jager_app__presentation__rest__public__v2__reposts__view_models__RepostedAccountsViewModel: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Id */
            id: number;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Caption */
            caption: string | null;
            /** Avatar Url */
            avatar_url: string | null;
            company:
                | components['schemas']['jager_app__presentation__rest__public__v2__reposts__view_models__CompanyViewModel']
                | null;
            position:
                | components['schemas']['jager_app__presentation__rest__public__v2__reposts__view_models__PositionViewModel']
                | null;
            /** Position Title */
            position_title: string | null;
            /** Relations */
            relations: components['schemas']['AccountRelationViewModel'][] | null;
            relationship_strength: components['schemas']['RelationshipStrength'] | null;
        };
        /** ShortenerRequestWriteSchema */
        jager_app__presentation__rest__public__v2__shortener__view_models__ShortenerRequestWriteSchema: {
            /** Urls */
            urls: components['schemas']['UrlRequestSchema'][];
        };
        /** Company */
        jager_app__presentation__rest__public__v2__target__view_models__Company: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Logo Url */
            logo_url: string | null;
        };
        /** TargetRolesViewModel */
        jager_app__presentation__rest__public__v2__target__view_models__TargetRolesViewModel: {
            /** Role Categories */
            role_categories: components['schemas']['RoleCategory'][];
        };
        /** TargetSettingsViewModel */
        jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel: {
            /** Role Categories */
            role_categories: components['schemas']['RoleCategory'][];
            /** Domains */
            domains: components['schemas']['Domain'][];
            /** Companies */
            companies: components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__Company'][];
            /** Dt */
            dt: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    healthcheck_healthcheck_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HealthcheckResponseSchema'];
                };
            };
        };
    };
    rate_limit_test_rate_limit_test_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HealthcheckResponseSchema'];
                };
            };
        };
    };
    search_account_accounts_search_get: {
        parameters: {
            query?: {
                text?: string;
                can_be_mentor_key_skill_ids?: number[];
                search_mentor_key_skill_ids?: number[];
                company_id?: number;
                position_id?: number;
                tag_id?: number[];
                limit?: number;
                cursor?: string;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header?: {
                'X-SESSION-ID'?: string | null;
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_accounts_hhresumes_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_accounts_me_get: {
        parameters: {
            query?: {
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_current_account_accounts_me_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_current_account_accounts_me_delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_user_info_accounts_me_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_current_account_status_accounts_me_status_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StatusUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_user_posts_accounts_me_posts_get: {
        parameters: {
            query?: {
                cursor?: string;
                parent_channel_id?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_current_account_avatar_accounts_me_avatar_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AvatarUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_current_account_tags_accounts_me_tags_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TagsUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_account_work_experience_accounts_me_work_experience_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__presentation__model__work_experience__AccountWorkExperiencesListRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountWorkExperiencesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_account_key_skills_accounts_me_key_skills_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountKeySkillUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_account_key_skills_accounts_me_key_skills_delete: {
        parameters: {
            query: {
                id: number[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    current_account_relations_summary_accounts_me_relations_summary_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountRelationsSummaryResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_relations_summary_accounts__account_id__relations_summary_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountRelationsSummaryResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    complaint_about_account_accounts__account_id__complaint_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAccountComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_current_account_relations_accounts_me_relation__relation_type___direction__get: {
        parameters: {
            query?: {
                text?: string;
                cursor?: string;
                limit?: number;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                relation_type: components['schemas']['AccountsRelationType'];
                direction: components['schemas']['RelationDirection'];
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_account_help_me_accounts__account_id__key_skills_confirm_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountKeySkillConfirmRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_key_skill_confirm_accounts__account_id__key_skills_confirm_delete: {
        parameters: {
            query: {
                key_skill_id: number[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_by_id_accounts_by_id_get: {
        parameters: {
            query: {
                id: number[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    write_message_to_account_accounts__account_id__messages_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_messaging_channels_accounts_me_channels_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_comments_accounts_me_comments_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_messaging_channels_unread_count_accounts_me_channels_unread_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelsUnreadCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_onboarding_state_accounts_me_onboarding_state_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OnboardingResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    log_client_event_analytics_client_event_post: {
        parameters: {
            query: {
                event: components['schemas']['ClientEvents'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json':
                    | components['schemas']['ScreenShownEventFields']
                    | components['schemas']['AppActivatedFields']
                    | Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    oauth_token_handler_auth_oauth_token_post: {
        parameters: {
            query?: {
                isBrowser?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_oauth_token_handler_auth_oauth_token_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthTokenResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    start_external_auth_auth_external_start__auth_system__get: {
        parameters: {
            query: {
                backurl: string;
            };
            header?: never;
            path: {
                auth_system: components['schemas']['AuthSystem'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RedirectUrlResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    external_auth_code_handler_auth_external_handle_code_get: {
        parameters: {
            query: {
                code: string;
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invalidate_current_access_token_auth_oauth_token_invalidate_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    logout_auth_logout_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LogoutRequest'] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    generate_new_captcha_captcha_new_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_generate_new_captcha_captcha_new_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NewCaptchaGeneratedResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    generate_new_captcha_captcha_verify_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_generate_new_captcha_captcha_verify_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_post_deprecated_channels_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_post_in_community_channels__channel_id__channels_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_post_channels_posts_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_tags_channels__channel_id__tags_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_channel_tags_channels__channel_id__tags_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TagsUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_posts_global_channels_search_posts_get: {
        parameters: {
            query?: {
                tag_id?: number[];
                parent_channel_id?: string;
                community_id?: string;
                include_blocked_communities?: boolean;
                cursor?: string;
                company_id?: number;
                position_id?: number;
                text?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_communities_global_channels_search_communities_get: {
        parameters: {
            query?: {
                text?: string;
                tag_id?: number[];
                include_private?: boolean;
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_favorites_channels_channels_favorites_get: {
        parameters: {
            query?: {
                include_private?: boolean;
                is_channel?: boolean | null;
                is_my?: boolean | null;
                visibility_type?: components['schemas']['ChannelVisibilityTypeEnum'] | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_channel_to_favorites_channels_favorites_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_add_channel_to_favorites_channels_favorites_put'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_post_old_channels__channel_id__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_channels__channel_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    subscribe_to_channel_channels__channel_id__subscription_put: {
        parameters: {
            query: {
                type: components['schemas']['ChannelSubscriptionType'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unsubscribe_from_channel_channels__channel_id__subscription_delete: {
        parameters: {
            query?: {
                type?: components['schemas']['ChannelSubscriptionType'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_from_favorites_channels_favorites__channel_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_favorites_accounts_channels_favorites__channel_id__accounts_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_favorites_accounts_by_id_channels_favorites_count_by_id_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelSubscribersCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_messages_channels__channel_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['ScrollDirection'];
                limit: number;
                last_message_id?: string;
                include_last?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_message_to_channel_channels__channel_id__messages_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    block_channel_for_user_channels__channel_id__block_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unblock_channel_for_user_channels__channel_id__unblock_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    leave_channel_by_user_channels__channel_id__leave_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    join_channel_by_user_channels__channel_id__join_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_channel_complaint_channels__channel_id__complaint_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateChannelComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_channel_read_channels__channel_id__mark_read_put: {
        parameters: {
            query?: {
                message_id?: string | null;
                source?: components['schemas']['MarkReadSource'] | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channels_by_id_channels_by_id_get: {
        parameters: {
            query: {
                id: string[];
                include_total?: boolean | null;
                include_unread?: boolean | null;
                first_messages_count?: number;
                last_messages_count?: number;
                include_views?: boolean | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_user_feed_channels_posts_feed_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_communities_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedCommunityResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_community_communities__community_id__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdatedCommunityResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_community_complaint_communities__community_id__complaint_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_community_read_communities__community_id__mark_read_put: {
        parameters: {
            query?: {
                source?: components['schemas']['MarkReadSource'] | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invite_user_to_community_communities__community_id__invite_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityInviteRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ask_to_join_community_communities__community_id__join_request_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityJoinRequestRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    subscribe_to_community_communities__community_id__subscription_put: {
        parameters: {
            query: {
                type: components['schemas']['ChannelSubscriptionType'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unsubscribe_from_community_communities__community_id__subscription_delete: {
        parameters: {
            query?: {
                type?: components['schemas']['ChannelSubscriptionType'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_communities_communities_recommendation_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_communities_for_new_post_communities_for_new_post_get: {
        parameters: {
            query?: {
                include_private?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_communities_communities_search_get: {
        parameters: {
            query?: {
                text?: string;
                tag_id?: number[];
                include_private?: boolean;
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_my_communities_communities_me_get: {
        parameters: {
            query?: {
                include_private?: boolean;
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_referral_invites_count_invite_referral_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_referral_invites_invite_referral_all_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_sent_referral_invites_invite_referral_sent_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    validate_invite_invite__invite_id__validate_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    validate_invite_invite__invite_id__mark_sent_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                invite_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    activate_invite_invite__invite_id__activate_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                invite_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    bind_invite_invite__invite_id__postback_get: {
        parameters: {
            query: {
                uid: string;
            };
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    start_message_thread_messages__message_id__threads_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    edit_message_messages__message_id__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_message_messages__message_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    restore_message_messages__message_id__restore_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_message_complaint_messages__message_id__complaint_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MessageComplaintBody'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_reaction_messages__message_id__reaction_add_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ReactionData'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_reaction_messages__message_id__reaction_remove_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_tasks_moderation_tasks_get: {
        parameters: {
            query: {
                entity_type: components['schemas']['ModerationEntity'];
                page?: number;
                page_size?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTasksResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_entity_to_moderation_moderation_tasks_put: {
        parameters: {
            query: {
                entity_type: components['schemas']['ModerationEntity'];
                entity_id: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_tasks_count_moderation_tasks_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTasksCount'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_task_moderation_tasks__task_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                task_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTaskResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    complete_moderation_task_moderation_tasks__task_id__complete_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                task_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ModerationSaveRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_delo_moderation_accounts__account_id__delo_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountDeloResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    change_channel_publication_date_moderation_channel__channel_id__change_publication_date_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePostPublicationDateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_posts_moderation_posts_search_get: {
        parameters: {
            query?: {
                tag_id?: number[];
                parent_channel_id?: string;
                community_id?: string;
                cursor?: string;
                company_id?: number;
                position_id?: number;
                text?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationPostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_notification_read_notifications_mark_all_read_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_notification_read_notifications__notification_id__mark_read_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                notification_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_notification_notifications__notification_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                notification_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_notifications_count_notifications_unread_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationsCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_user_notifications_list_notifications_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
                unread_only?: boolean;
                important_only?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_one_time_password_otp_generate_post: {
        parameters: {
            query?: never;
            header?: {
                'X-SIGNATURE'?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_send_one_time_password_otp_generate_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OtpGenerateSuccessResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_otp_captcha_status_otp_get_captcha_status_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CaptchaRequiredStatusResponse'];
                };
            };
        };
    };
    get_otp_send_allowed_status_otp_get_send_allowed_status_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_get_otp_send_allowed_status_otp_get_send_allowed_status_put'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OtpSendAllowedResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_participants_by_id_participants_by_id_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ParticipantByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_participants_by_id_short_participants_p2p_opponents_by_channel_id_short_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortParticipantByChannelResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_new_post_posts_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_post_posts__channel_id__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_desired_info_posts__channel_id__desired_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostDesiredInfoResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_posts_posts_search_get: {
        parameters: {
            query?: {
                tag_id?: number[];
                parent_channel_id?: string;
                community_id?: string;
                include_blocked_communities?: boolean;
                cursor?: string;
                company_id?: number;
                position_id?: number;
                text?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_subscriptions_feed_posts_feed_subscription_get: {
        parameters: {
            query?: {
                questions?: components['schemas']['QuestionsFilter'];
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_messages_posts__channel_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['SortDirection'];
                limit: number;
                last_message_id?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_posts_trends_posts_trends_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_recommendation_feed_posts_feed_recommendation_get: {
        parameters: {
            query?: {
                questions?: components['schemas']['QuestionsFilter'];
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_push_subscription_push_subscription_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_add_push_subscription_push_subscription_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    describe_models_push_models_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['NewCommentToPostPushData']
                        | components['schemas']['NewCommentToYourPostPushData']
                        | components['schemas']['NewReplyToYourCommentPushData']
                        | components['schemas']['NewP2PMessagePushData']
                        | components['schemas']['OpenChannelTaskPushData']
                        | components['schemas']['NewCommunityPostPushData']
                        | components['schemas']['NewProfilePostPushData']
                        | components['schemas']['AccountIncompletePushData']
                        | components['schemas']['AccountBlockedPushData']
                        | components['schemas']['YourCommunityDeletedPushData']
                        | components['schemas']['WarnAboutRulesViolationPushData']
                        | components['schemas']['AccountFollowedYouPushData']
                        | components['schemas']['NewReactionsForMessage']
                        | components['schemas']['InviteActivatedPushData']
                        | components['schemas']['WarnCommunityOwnerRulesViolationPushData']
                        | components['schemas']['YourCommunityJoinRequestAcceptedPushData']
                        | components['schemas']['NewCommunityJoinRequestForAdminPushData'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    redirect_to_appmetrica_site_channel__channel_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    status_handler_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['StatusResponse'];
                };
            };
        };
    };
    bad_status_handler_status_500_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    get_posts_trends_status_proxy_recommends_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    get_city_suggest_suggest_city_get: {
        parameters: {
            query?: {
                text?: string;
                lat?: string;
                lng?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_place_suggest_suggest_place_get: {
        parameters: {
            query?: {
                text?: string;
                lat?: string;
                lng?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_country_suggest_suggest_country_get: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_suggest_suggest__suggest_name__get: {
        parameters: {
            query: {
                text: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                suggest_name: components['schemas']['SuggestName'];
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse_Union_CityResponse__CountryResponse__TagBodyResponse__CompanySuggestResponse__PositionResponse__PositionLongResponse__CompanyLongSuggestResponse__'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_support_sessions_get: {
        parameters: {
            query: {
                filter_: components['schemas']['SessionsFilter'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionsResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_count_support_sessions_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionsCount'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_support_session_support__account_id__session_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    assign_support_session_support__account_id__session_assign_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    close_support_session_support__account_id__session_close_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_support_messages_support__account_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['ScrollDirection'];
                limit: number;
                last_message_id?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_message_to_account_support__account_id__messages_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_tags_tags_recommendation_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_tags_for_bag_reports_tags_for_report_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    upload_file_uploads_put: {
        parameters: {
            query?: {
                tag?: components['schemas']['UploadTagValue'];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['Body_upload_file_uploads_put'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UploadResultResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_proxy_request_to_s3_uploads__upload_id__get: {
        parameters: {
            query?: {
                filesize?: string;
            };
            header?: never;
            path: {
                upload_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_upload_by_redirect_uploads__upload_id__redirect_get: {
        parameters: {
            query?: {
                filesize?: string;
            };
            header?: never;
            path: {
                upload_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_ws_connection_url_ws_url_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WsConnectUrl'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    describe_models_ws_describe_models_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['WsPingData']
                        | components['schemas']['WsNewNotificationData']
                        | components['schemas']['WsNewP2PMessage']
                        | components['schemas']['WsPostCommentCreated']
                        | components['schemas']['WsP2PReadByOpponent']
                        | components['schemas']['WsNewP2PChannelCreated'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    describe_models_ws_incoming_models_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['WsSubscribeData']
                        | components['schemas']['WsUnsubscribeData'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_ping_message_ws_ping_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    yandex_gpt_handler_yandexgpt_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['YandexGptRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['YandexGptResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_shortener__short_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                short_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_with_type_shortener__url_type___short_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                url_type: components['schemas']['UrlTypeEnum'];
                short_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_bind_token_v1_tg_get_bind_token_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgTemporaryTokenViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_permanent_token_v1_tg_authenticate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_get_permanent_token_v1_tg_authenticate_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgPermanentTokenViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_tg_status_v1_tg_status_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgCrosspostingStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_destinations_v1_tg_destinations_get: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgDestinationsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    bind_channel_v1_tg_bind_channel_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_bind_channel_v1_tg_bind_channel_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgChannelBundleViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_bundles_v1_tg_bindings_get: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgChannelBundlesListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_bundle_v1_tg_bindings_delete_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TgDeleteChannelBundleRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    reset_tg_bundle_v1_tg_reset_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    reset_tg_bundle_v1_tg_reset_via_tg_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_accounts_v1_recommendation_accounts_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__recommendation__accounts__view_models__AccountRecommendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_communities_v1_recommendation_channels_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityRecommendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_social_groups_v1_recommendation_social_groups_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelsCommunitiesRecomendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_posts_v1_recommendation_vacancies_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
                role?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacanciesPostsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_preview_info_v1_recommendation_vacancies_preview_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacancyPreviewInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_roles_v1_recommendation_vacancies_roles_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacanciesAccessibleRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_posts_v1_recommendation_resumes_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
                role?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumesPostsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_preview_info_v1_recommendation_resumes_preview_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumePreviewInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_roles_v1_recommendation_resumes_roles_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__recommendation__resumes__view_models__VacancyRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_domains_v1_companies_industries_get: {
        parameters: {
            query?: {
                company_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DomainListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_freelance_company_v1_companies_freelance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CompanyDetailViewModel'];
                };
            };
        };
    };
    get_user_info_v1_accounts_me_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    get_current_account_v1_accounts_me_get: {
        parameters: {
            query?: {
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_current_account_v1_accounts_me_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_current_account_status_v1_accounts_me_status_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StatusUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_user_posts_v1_accounts_me_posts_get: {
        parameters: {
            query?: {
                cursor?: string;
                parent_channel_id?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_current_account_avatar_v1_accounts_me_avatar_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AvatarUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_current_account_tags_v1_accounts_me_tags_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TagsUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_account_key_skills_v1_accounts_me_key_skills_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountKeySkillUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_account_key_skills_v1_accounts_me_key_skills_delete: {
        parameters: {
            query: {
                id: number[];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    current_account_relations_summary_v1_accounts_me_relations_summary_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountRelationsSummaryResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_relations_summary_v1_accounts__account_id__relations_summary_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountRelationsSummaryResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    complaint_about_account_v1_accounts__account_id__complaint_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAccountComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_account_help_me_v1_accounts__account_id__key_skills_confirm_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountKeySkillConfirmRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_key_skill_confirm_v1_accounts__account_id__key_skills_confirm_delete: {
        parameters: {
            query: {
                key_skill_id: number[];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    write_message_to_account_v1_accounts__account_id__messages_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_messaging_channels_v1_accounts_me_channels_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_comments_v1_accounts_me_comments_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_messaging_channels_unread_count_v1_accounts_me_channels_unread_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelsUnreadCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_onboarding_state_v1_accounts_me_onboarding_state_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OnboardingResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_account_work_experience_v1_accounts_me_work_experience_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__app_layer__account_services__schemas__AccountWorkExperiencesListRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountWorkExperiencesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_account_v1_accounts_search_get: {
        parameters: {
            query?: {
                text?: string;
                can_be_mentor_key_skill_ids?: number[];
                search_mentor_key_skill_ids?: number[];
                company_id?: number;
                position_id?: number;
                status_id?: number;
                tag_id?: number[];
                limit?: number;
                cursor?: string;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header?: {
                'X-SESSION-ID'?: string | null;
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_current_account_relations_v1_accounts_me_relation_FOLLOW__direction__get: {
        parameters: {
            query?: {
                text?: string;
                cursor?: string;
                limit?: number;
                status_id?: number;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                direction: components['schemas']['RelationDirection'];
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponseExtended'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_by_id_v1_accounts_by_id_get: {
        parameters: {
            query: {
                id: number[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_by_uuid_v1_accounts_by_uuid_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountByUUIDResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_push_to_nsc_v1_accounts_send_push_to_nsc_kafka_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_push_to_nsc_direct_v1_accounts_send_push_to_nsc_direct_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_relation_to_account_v1_accounts__account_id__relation_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountRelationUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_posts_v1_accounts__account_id__posts_get: {
        parameters: {
            query?: {
                cursor?: string;
                parent_channel_id?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_comments_v1_accounts__account_id__comments_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_account_relations_v1_accounts__account_id__relation__relation_type___direction__get: {
        parameters: {
            query?: {
                text?: string;
                cursor?: string;
                limit?: number;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                relation_type: components['schemas']['AccountsRelationType'];
                direction: components['schemas']['RelationDirection'];
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_subscriptions_communities_groups_v1_accounts_me_subscriptions_communities_groups_get: {
        parameters: {
            query?: {
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SubscriptionCommunitiesGroupEnum'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_subscriptions_unread_communities_count_v1_accounts_me_subscriptions_communities_unread_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetAccountSubscriptionsCommunitiesUnreadCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_path_through_v1_accounts_relationships__to_account_id__through__through_account_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                to_account_id: string;
                through_account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipDescriptionThrough'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_persons_v1_accounts_relationships__to_account_id__persons_get: {
        parameters: {
            query?: {
                type?: components['schemas']['RelationshipTypeEnum'];
                relationship_strength?: components['schemas']['RelationshipStrength'] | null;
                query?: string | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                to_account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipUsers'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_counters_v1_accounts_relationships__to_account_id__persons_counters_get: {
        parameters: {
            query?: {
                type?: components['schemas']['RelationshipTypeEnum'] | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                to_account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserRelationshipsCounters'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_path_v1_accounts_relationships__to_account_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                to_account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipDescription'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_work_exp_complaint_v1_accounts__account_id__work_experience__experience_id__complaint_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: string;
                experience_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Complaint'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_work_exp_complaint_v1_accounts__account_id__work_experience__experience_id__complaint_delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: string;
                experience_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    post_session_metadata_v1_accounts_session_metadata_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthSessionMetadataView'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    save_message_from_helpdesk_v1_webhooks_support_chat__scenario_code__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__presentation__rest__public__v1__comm_platform__view_model__SupportWebhookRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_post_v1_tg_post_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PostRequestWriteSchema'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_short_url_v1_shortener_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__presentation__rest__public__v1__shortener__view_models__ShortenerRequestWriteSchema'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseListModelView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_v1_shortener__short_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                short_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseReadSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_with_type_v1_shortener__url_type___short_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                url_type: components['schemas']['UrlTypeEnum'];
                short_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseReadSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_v1_networks_me_get: {
        parameters: {
            query?: {
                limit?: number | null;
                network_type?: components['schemas']['NetworkTypesViewEnum'];
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworksUsersListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_profile_v1_networks_profile_get: {
        parameters: {
            query?: {
                account_id?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfileView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_networks_v1_networks_search_get: {
        parameters: {
            query: {
                limit?: number | null;
                query: string;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworksUsersListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_by_account_id_v1_networks_by_account_id_get: {
        parameters: {
            query: {
                account_id: string | null;
                limit?: number | null;
                network_type?: components['schemas']['NetworkTypesViewEnum'];
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworksListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_by_company_id_v1_networks_by_company_id_get: {
        parameters: {
            query: {
                company_id: string;
                limit?: number | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworksListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_members_v1_networks_members_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_types_v1_networks_types_get: {
        parameters: {
            query?: {
                account_id?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkTypesView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_viewed_v1_networks_mark_viewed_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_feed_v1_networks_feed_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_by_id_v1_networks__network_id__get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworksByIDView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_members_by_network_id_v1_networks__network_id__members_get: {
        parameters: {
            query?: {
                limit?: number | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkByIdMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_network_members_v1_networks__network_id__members_search_get: {
        parameters: {
            query?: {
                limit?: number;
                type?: components['schemas']['WorkingTypeEnum'] | null;
                query?: string | null;
                status_id?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__networks__view_models__NetworkMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    change_network_settings_v1_networks__network_id__settings_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['Body_change_network_settings_v1_networks__network_id__settings_patch'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_feed_v1_networks__network_id__feed_get: {
        parameters: {
            query?: {
                type?: components['schemas']['WorkingTypeEnum'] | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_info_v1_networks__network_id__info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkInfo'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_unread_presence_notification_v1_networks_unread_notification_about_presence_count_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UnreadNotificationsView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_vacancies_v1_networks__network_id__vacancies_get: {
        parameters: {
            query?: {
                role_id?: string[] | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_roles_v1_networks__network_id__roles_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoleShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_vacancies_count_v1_networks__network_id__vacancies_counter_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkVacanciesCountView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_reaction_v1_chats_reactions__message_id__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AddReactionRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_reaction_v1_chats_reactions__message_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chats_v1_chats_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
                messages_number?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chats_partners_v1_chats_share_get: {
        parameters: {
            query?: {
                limit?: number;
                query?: string | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatPartnersViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chat_messages_v1_chats__recipient_id__get: {
        parameters: {
            query?: {
                limit?: number | null;
                direction?: components['schemas']['MessagesDirection'] | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                recipient_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessagesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_chat_v1_chats__recipient_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                recipient_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_messages_v1_chats_messages_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMessageRequestViewModel'][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessageViewModel'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_message_v1_chats_messages__message_id__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateMessageRequestViewModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessageViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_message_v1_chats_messages__message_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_message_read_v1_chats__recipient_id__mark_read_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                recipient_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MarkMessageReadRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_attachment_v1_chats_messages__message_id__attachments_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['Body_create_attachment_v1_chats_messages__message_id__attachments_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AttachmentViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_attachment_v1_chats_attachments__attachment_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                attachment_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_invites_v1_invites_hh_invite_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_send_invites_v1_invites_hh_invite_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_post_as_uninteresting_v1_posts__post_id__mark_uninteresting_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unmark_post_as_uninteresting_v1_posts__post_id__mark_uninteresting_cancel_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_views_by_role_statistics_v1_posts__post_id__stats_views_by_role_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostViewsByRoleStatisticsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_views_by_group_role_statistics_v1_posts__post_id__stats_views_by_group_role_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__posts__view_models__PostViewsByGroupRoleStatisticsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_post_view_v1_posts__post_id__view_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_desired_info_v1_posts__post_id__desired_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostDesiredInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_desired_info_with_entities_v1_posts__post_id__full_desired_info_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostDesiredInfoWithEntitiesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    logout_v1_push_unsubscribe_post: {
        parameters: {
            query?: never;
            header: {
                'x-user-id': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PushUnsubscribeSchema'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_reposted_accounts_v1_reposts__post_id__reposted_by_accounts_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__reposts__view_models__RepostedAccountsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_reposted_channels_v1_reposts__post_id__reposted_by_channels_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channels_to_repost_v1_reposts_channels_to_repost_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_proxy_to_hh_v1_uploads_hh_get: {
        parameters: {
            query: {
                url_path: string;
                t: string;
                h: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_default_avatar_for_user_v1_uploads_default_avatar_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    get_icon_v1_uploads_icon__icon_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                icon_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_reaction_v1_messages__message_id__reaction_remove_delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_reaction_v1_messages__message_id__reaction_add_post: {
        parameters: {
            query?: never;
            header: {
                'idempotency-key': string;
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MessageReactionAddRequestViewModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessageReactionAddResponseViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_message_reactions_v1_messages__message_id__reactions_get: {
        parameters: {
            query?: {
                reaction_id?: string | null;
                limit?: number | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__messages__view_models__MessageReactionsGetViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_v1_mentions_accounts_search_get: {
        parameters: {
            query?: {
                text?: string;
                limit?: number;
                cursor?: string;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__mentions__view_models__MentionsSearchResultResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    process_checkstep_webhook_v1_moderation_checkstep_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    set_ip_to_ratelimit_whitelist_v1_rate_limit_whitelist_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_community_invites_v1_communities__community_id__invites_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_invite_v1_communities__community_id__invites_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityInviteRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_community_invite_with_community_v1_communities__community_id__invites__invite_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
                invite_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteWithPrivateCommunityViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_community_invite_v1_communities__community_id__invites__invite_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
                invite_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_community_join_requests_v1_communities__community_id__join_requests_get: {
        parameters: {
            query?: {
                status?: components['schemas']['ChannelJoinRequestStatusEnum'];
                limit?: number | null;
                cursor?: string | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__communities__join_requests__view_models__CommunityJoinRequestsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_join_request_v1_communities__community_id__join_requests_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityJoinRequestRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateCommunityJoinRequestViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    put_community_join_request_accept_v1_communities__community_id__join_requests__join_request_id__approve_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
                join_request_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    put_community_join_request_hide_v1_communities__community_id__join_requests__join_request_id__hide_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
                join_request_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_community_join_requests_read_v1_communities__community_id__join_requests_mark_viewed_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_community_member_v1_communities__community_id__remove_member__account_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                community_id: string;
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_communities_by_id_v1_communities_by_id_get: {
        parameters: {
            query: {
                id: string[];
                include_total?: boolean | null;
                include_unread?: boolean | null;
                first_messages_count?: number;
                last_messages_count?: number;
                include_views?: boolean | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_user_notification_preferences_v1_notification_preferences_get: {
        parameters: {
            query?: {
                category?: components['schemas']['RecepientNotificationPreferencesTypeEnum'] | null;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RecepientPreferencesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_user_notification_preferences_v1_notification_preferences_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateRecepientPreferencesRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RecepientPreferencesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_status_v1_status_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['StatusGetResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    track_push_v1_track_push_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TrackPushRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_feeds_interacrions_v1_feeds_interactions_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FeedsInteractionsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_target_roles_v1_targeting_roles_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_target_settings_v1_targeting_channel__channel_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_channel_target_settings_v1_targeting_channel__channel_id__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateOrUpdateChannelTargetSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_target_settings_v1_targeting_account_target_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_account_target_settings_v1_targeting_account_target_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateOrUpdateAccountTargetSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_target_settings_v1_targeting_post__post_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_notifications_as_read_v1_notifications_mark_all_read_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_notifications_as_read_v1_notifications_mark_as_read_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MarkNotificationAsReadRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationStateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_unread_total_notifications_v1_notifications_unread_total_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    hide_notifications_v1_notifications_hide_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['HideNotificationRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationStateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_notification_feed_v1_notifications_feed_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationFeedResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_notification_read_v1_notifications_mark_all_read_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_notification_read_v1_notifications__notification_id__mark_read_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_notification_v1_notifications__notification_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_notifications_count_v1_notifications_unread_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationsCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_user_notifications_list_v1_notifications_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
                unread_only?: boolean;
                important_only?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_key_v1_encryption_keys_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_set_key_v1_encryption_keys_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SetKeyResponseSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_public_key_v1_encryption__account_id__keys_public_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetKeyResponseSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_all_profile_views_v1_profile_views_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v1__profile_views__view_models__ListProfileViewsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_profile_view_v1_profile_views_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateProfileViewRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_profile_views_v1_profile_views_mark_all_read_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_profile_view_settings_v1_profile_views_settings_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateProfileViewSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancy_status_v1_vacancies_status_get: {
        parameters: {
            query: {
                link: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacancyStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resume_status_v1_resumes_status_get: {
        parameters: {
            query: {
                link: string;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumeStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    log_client_event_v1_analytics_client_event_post: {
        parameters: {
            query: {
                event: components['schemas']['ClientEvents'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json':
                    | components['schemas']['ScreenShownEventFields']
                    | components['schemas']['AppActivatedFields']
                    | Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_tags_v1_channels__channel_id__tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_channel_tags_v1_channels__channel_id__tags_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TagsUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_favorites_channels_v1_channels_favorites_get: {
        parameters: {
            query?: {
                include_private?: boolean;
                is_channel?: boolean | null;
                is_my?: boolean | null;
                visibility_type?: components['schemas']['ChannelVisibilityTypeEnum'] | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_channel_to_favorites_v1_channels_favorites_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_add_channel_to_favorites_v1_channels_favorites_put'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_v1_channels__channel_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    subscribe_to_channel_v1_channels__channel_id__subscription_put: {
        parameters: {
            query: {
                type: components['schemas']['ChannelSubscriptionType'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unsubscribe_from_channel_v1_channels__channel_id__subscription_delete: {
        parameters: {
            query?: {
                type?: components['schemas']['ChannelSubscriptionType'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_from_favorites_v1_channels_favorites__channel_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_favorites_accounts_v1_channels_favorites__channel_id__accounts_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_favorites_accounts_by_id_v1_channels_favorites_count_by_id_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelSubscribersCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_messages_v1_channels__channel_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['ScrollDirection'];
                limit: number;
                last_message_id?: string;
                include_last?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_message_to_channel_v1_channels__channel_id__messages_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    block_channel_for_user_v1_channels__channel_id__block_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unblock_channel_for_user_v1_channels__channel_id__unblock_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    leave_channel_by_user_v1_channels__channel_id__leave_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    join_channel_by_user_v1_channels__channel_id__join_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_channel_complaint_v1_channels__channel_id__complaint_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateChannelComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_channel_read_v1_channels__channel_id__mark_read_put: {
        parameters: {
            query?: {
                message_id?: string | null;
                source?: components['schemas']['MarkReadSource'] | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channels_by_id_v1_channels_by_id_get: {
        parameters: {
            query: {
                id: string[];
                include_total?: boolean | null;
                include_unread?: boolean | null;
                first_messages_count?: number;
                last_messages_count?: number;
                include_views?: boolean | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_v1_communities_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedCommunityResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_community_v1_communities__community_id__put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdatedCommunityResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_community_complaint_v1_communities__community_id__complaint_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityComplaintRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_community_read_v1_communities__community_id__mark_read_put: {
        parameters: {
            query?: {
                source?: components['schemas']['MarkReadSource'] | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invite_user_to_community_v1_communities__community_id__invite_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityInviteRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ask_to_join_community_v1_communities__community_id__join_request_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommunityJoinRequestRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    subscribe_to_community_v1_communities__community_id__subscription_put: {
        parameters: {
            query: {
                type: components['schemas']['ChannelSubscriptionType'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unsubscribe_from_community_v1_communities__community_id__subscription_delete: {
        parameters: {
            query?: {
                type?: components['schemas']['ChannelSubscriptionType'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_communities_v1_communities_recommendation_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_communities_for_new_post_v1_communities_for_new_post_get: {
        parameters: {
            query?: {
                include_private?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_communities_v1_communities_search_get: {
        parameters: {
            query?: {
                text?: string;
                tag_id?: number[];
                include_private?: boolean;
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_my_communities_v1_communities_me_get: {
        parameters: {
            query?: {
                include_private?: boolean;
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_referral_invites_count_v1_invite_referral_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_referral_invites_v1_invite_referral_all_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_sent_referral_invites_v1_invite_referral_sent_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    validate_invite_v1_invite__invite_id__validate_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_sent_invite_v1_invite__invite_id__mark_sent_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    activate_invite_v1_invite__invite_id__activate_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    bind_invite_v1_invite__invite_id__postback_get: {
        parameters: {
            query: {
                uid: string;
            };
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    start_message_thread_v1_messages__message_id__threads_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    edit_message_v1_messages__message_id__put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UpdatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_message_v1_messages__message_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    restore_message_v1_messages__message_id__restore_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_message_complaint_v1_messages__message_id__complaint_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MessageComplaintBody'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ComplaintIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_tasks_v1_moderation_tasks_get: {
        parameters: {
            query: {
                entity_type: components['schemas']['ModerationEntity'];
                page?: number;
                page_size?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTasksResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_entity_to_moderation_v1_moderation_tasks_put: {
        parameters: {
            query: {
                entity_type: components['schemas']['ModerationEntity'];
                entity_id: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_tasks_count_v1_moderation_tasks_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTasksCount'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_moderation_task_v1_moderation_tasks__task_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                task_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationTaskResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    complete_moderation_task_v1_moderation_tasks__task_id__complete_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                task_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ModerationSaveRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_delo_v1_moderation_accounts__account_id__delo_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountDeloResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    change_channel_publication_date_v1_moderation_channel__channel_id__change_publication_date_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePostPublicationDateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_posts_v1_moderation_posts_search_get: {
        parameters: {
            query?: {
                tag_id?: number[];
                parent_channel_id?: string;
                community_id?: string;
                cursor?: string;
                company_id?: number;
                position_id?: number;
                text?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ModerationPostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_participants_by_id_v1_participants_by_id_get: {
        parameters: {
            query: {
                id: string[];
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ParticipantByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_participants_by_id_short_v1_participants_p2p_opponents_by_channel_id_short_get: {
        parameters: {
            query: {
                id: string[];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortParticipantByChannelResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_new_post_v1_posts_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedPostResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_post_v1_posts__channel_id__put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePostRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_posts_v1_posts_search_get: {
        parameters: {
            query?: {
                tag_id?: number[];
                parent_channel_id?: string;
                community_id?: string;
                include_blocked_communities?: boolean;
                cursor?: string;
                company_id?: number;
                position_id?: number;
                text?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_subscriptions_feed_v1_posts_feed_subscription_get: {
        parameters: {
            query?: {
                questions?: components['schemas']['QuestionsFilter'];
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_messages_v1_posts__channel_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['SortDirection'];
                limit: number;
                last_message_id?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                channel_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_posts_trends_v1_posts_trends_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_recommendation_feed_v1_posts_feed_recommendation_get: {
        parameters: {
            query?: {
                questions?: components['schemas']['QuestionsFilter'];
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_push_subscription_v1_push_subscription_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': components['schemas']['Body_add_push_subscription_v1_push_subscription_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    describe_models_v1_push_models_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['NewCommentToPostPushData']
                        | components['schemas']['NewCommentToYourPostPushData']
                        | components['schemas']['NewReplyToYourCommentPushData']
                        | components['schemas']['NewP2PMessagePushData']
                        | components['schemas']['OpenChannelTaskPushData']
                        | components['schemas']['NewCommunityPostPushData']
                        | components['schemas']['NewProfilePostPushData']
                        | components['schemas']['AccountIncompletePushData']
                        | components['schemas']['AccountBlockedPushData']
                        | components['schemas']['YourCommunityDeletedPushData']
                        | components['schemas']['WarnAboutRulesViolationPushData']
                        | components['schemas']['AccountFollowedYouPushData']
                        | components['schemas']['NewReactionsForMessage']
                        | components['schemas']['InviteActivatedPushData']
                        | components['schemas']['WarnCommunityOwnerRulesViolationPushData']
                        | components['schemas']['YourCommunityJoinRequestAcceptedPushData']
                        | components['schemas']['NewCommunityJoinRequestForAdminPushData'];
                };
            };
        };
    };
    redirect_to_appmetrica_v1_site_channel__channel_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
        };
    };
    get_city_suggest_v1_suggest_city_get: {
        parameters: {
            query?: {
                text?: string;
                lat?: string;
                lng?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_place_suggest_v1_suggest_place_get: {
        parameters: {
            query?: {
                text?: string;
                lat?: string;
                lng?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_country_suggest_v1_suggest_country_get: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_suggest_v1_suggest__suggest_name__get: {
        parameters: {
            query: {
                text: string;
            };
            header?: never;
            path: {
                suggest_name: components['schemas']['SuggestName'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuggestResponse_Union_CityResponse__CountryResponse__TagBodyResponse__CompanySuggestResponse__PositionResponse__PositionLongResponse__CompanyLongSuggestResponse__'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_v1_support_sessions_get: {
        parameters: {
            query: {
                filter_: components['schemas']['SessionsFilter'];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionsResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_count_v1_support_sessions_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionsCount'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_support_session_v1_support__account_id__session_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportSessionResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    assign_support_session_v1_support__account_id__session_assign_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    close_support_session_v1_support__account_id__session_close_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_support_messages_v1_support__account_id__messages_get: {
        parameters: {
            query: {
                direction: components['schemas']['ScrollDirection'];
                limit: number;
                last_message_id?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_message_to_account_v1_support__account_id__messages_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                account_id: number;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateMessageRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatedMessageResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_tags_v1_tags_recommendation_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_tags_for_bag_reports_v1_tags_for_report_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TagsListResponse'];
                };
            };
        };
    };
    upload_file_v1_uploads_put: {
        parameters: {
            query?: {
                tag?: unknown;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['Body_upload_file_v1_uploads_put'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UploadResultResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_ws_connection_url_v1_ws_url_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WsConnectUrl'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_ping_message_v1_ws_ping_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_v1_user_support_session_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportChat'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_job_search_checklist_v1_checklists_job_search_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['JobSearchChecklistViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_bind_token_v2_tg_get_bind_token_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgTemporaryTokenViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_permanent_token_v2_tg_authenticate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_get_permanent_token_v2_tg_authenticate_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgPermanentTokenViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_tg_status_v2_tg_status_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgCrosspostingStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_destinations_v2_tg_destinations_get: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgDestinationsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    bind_channel_v2_tg_bind_channel_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_bind_channel_v2_tg_bind_channel_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgChannelBundleViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_bundles_v2_tg_bindings_get: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TgChannelBundlesListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_channel_bundle_v2_tg_bindings_delete_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TgDeleteChannelBundleRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    reset_tg_bundle_v2_tg_reset_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    reset_tg_bundle_via_tg_v2_tg_reset_via_tg_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_accounts_v2_recommendation_accounts_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__recommendation__accounts__view_models__AccountRecommendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_communities_v2_recommendation_channels_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityRecommendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_recommended_social_groups_v2_recommendation_social_groups_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelsCommunitiesRecomendationListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_posts_v2_recommendation_vacancies_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
                role?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacanciesPostsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_preview_info_v2_recommendation_vacancies_preview_info_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacancyPreviewInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancies_roles_v2_recommendation_vacancies_roles_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacanciesAccessibleRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_posts_v2_recommendation_resumes_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
                role?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumesPostsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_preview_info_v2_recommendation_resumes_preview_info_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumePreviewInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resumes_roles_v2_recommendation_resumes_roles_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__recommendation__resumes__view_models__VacancyRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_domains_v2_companies_industries_get: {
        parameters: {
            query?: {
                company_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DomainListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_freelance_company_v2_companies_freelance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CompanyDetailViewModel'];
                };
            };
        };
    };
    get_community_invites_v2_communities__community_id__invites_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_invite_v2_communities__community_id__invites_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityInviteRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_community_invite_with_community_v2_communities__community_id__invites__invite_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommunityInviteWithPrivateCommunityViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_community_invite_v2_communities__community_id__invites__invite_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_community_join_requests_v2_communities__community_id__join_requests_get: {
        parameters: {
            query?: {
                status?: components['schemas']['ChannelJoinRequestStatusEnum'];
                limit?: number | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__communities__join_requests__view_models__CommunityJoinRequestsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_community_join_request_v2_communities__community_id__join_requests_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCommunityJoinRequestRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateCommunityJoinRequestViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    put_community_join_request_accept_v2_communities__community_id__join_requests__join_request_id__approve_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
                join_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    put_community_join_request_hide_v2_communities__community_id__join_requests__join_request_id__hide_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
                join_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_community_join_requests_read_v2_communities__community_id__join_requests_mark_viewed_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_community_member_v2_communities__community_id__remove_member__account_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                community_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_communities_by_id_v2_communities_by_id_get: {
        parameters: {
            query: {
                id: string[];
                include_total?: boolean | null;
                include_unread?: boolean | null;
                first_messages_count?: number;
                last_messages_count?: number;
                include_views?: boolean | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_account_work_experience_v2_accounts_me_work_experience_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__app_layer__account_services__schemas__AccountWorkExperiencesListRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountWorkExperiencesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_v2_accounts_me_get: {
        parameters: {
            query?: {
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_account_v2_accounts_search_get: {
        parameters: {
            query?: {
                text?: string;
                can_be_mentor_key_skill_ids?: number[];
                search_mentor_key_skill_ids?: number[];
                company_id?: number;
                position_id?: number;
                status_id?: number;
                tag_id?: number[];
                limit?: number;
                cursor?: string;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header: {
                'X-SESSION-ID'?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_current_account_relations_v2_accounts_me_relation_FOLLOW__direction__get: {
        parameters: {
            query?: {
                text?: string;
                cursor?: string;
                limit?: number;
                status_id?: number;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                direction: components['schemas']['RelationDirection'];
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponseExtended'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_by_id_v2_accounts_by_id_get: {
        parameters: {
            query: {
                id: number[];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountByIdResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_by_uuid_v2_accounts_by_uuid_get: {
        parameters: {
            query: {
                id: string[];
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountByUUIDResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_push_to_nsc_v2_accounts_send_push_to_nsc_kafka_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    send_push_to_nsc_direct_v2_accounts_send_push_to_nsc_direct_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    set_relation_to_account_v2_accounts__account_id__relation_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountRelationUpdateRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_posts_v2_accounts__account_id__posts_get: {
        parameters: {
            query?: {
                cursor?: string;
                parent_channel_id?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_comments_v2_accounts__account_id__comments_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                account_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessagesListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_account_relations_v2_accounts__account_id__relation__relation_type___direction__get: {
        parameters: {
            query?: {
                text?: string;
                cursor?: string;
                limit?: number;
                with_acc_company?: boolean;
                with_acc_position?: boolean;
                with_acc_avatar?: boolean;
                with_acc_tag?: boolean;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_acc_city?: boolean;
                with_acc_place?: boolean;
                with_acc_key_skills?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
                reverse_relations?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                relation_type: components['schemas']['AccountsRelationType'];
                direction: components['schemas']['RelationDirection'];
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_subscriptions_communities_groups_v2_accounts_me_subscriptions_communities_groups_get: {
        parameters: {
            query?: {
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SubscriptionCommunitiesGroupEnum'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_current_account_subscriptions_unread_communities_count_v2_accounts_me_subscriptions_communities_unread_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetAccountSubscriptionsCommunitiesUnreadCountResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_path_through_v2_accounts_relationships__to_account_id__through__through_account_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                to_account_id: string;
                through_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipDescriptionThrough'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_persons_v2_accounts_relationships__to_account_id__persons_get: {
        parameters: {
            query?: {
                type?: components['schemas']['RelationshipTypeEnum'];
                relationship_strength?: components['schemas']['RelationshipStrength'] | null;
                query?: string | null;
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                to_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipUsers'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_counters_v2_accounts_relationships__to_account_id__persons_counters_get: {
        parameters: {
            query?: {
                type?: components['schemas']['RelationshipTypeEnum'] | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                to_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserRelationshipsCounters'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_relationship_path_v2_accounts_relationships__to_account_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                to_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RelationshipDescription'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_work_exp_complaint_v2_accounts__account_id__work_experience__experience_id__complaint_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: string;
                experience_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Complaint'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_work_exp_complaint_v2_accounts__account_id__work_experience__experience_id__complaint_delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                account_id: string;
                experience_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    post_session_metadata_v2_accounts_session_metadata_post: {
        parameters: {
            query?: never;
            header: {
                'x-access-jti': string;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthSessionMetadataView'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    save_message_from_helpdesk_v2_webhooks_support_chat__scenario_code__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__presentation__rest__public__v2__comm_platform__view_model__SupportWebhookRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_post_v2_tg_post_post: {
        parameters: {
            query?: never;
            header: {
                'X-Tg-Crossposting-Auth-Token': string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PostRequestWriteSchema'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_short_url_v2_shortener_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['jager_app__presentation__rest__public__v2__shortener__view_models__ShortenerRequestWriteSchema'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseListModelView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_v2_shortener__short_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                short_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseReadSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_long_url_with_type_v2_shortener__url_type___short_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                url_type: components['schemas']['UrlTypeEnum'];
                short_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShortenerResponseReadSchema'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_v2_networks_me_get: {
        parameters: {
            query?: {
                limit?: number | null;
                network_type?: components['schemas']['NetworkTypesViewEnum'];
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworksUsersListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_profile_v2_networks_profile_get: {
        parameters: {
            query?: {
                account_id?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfileView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_networks_v2_networks_search_get: {
        parameters: {
            query: {
                limit?: number | null;
                query: string;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworksUsersListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_by_account_id_v2_networks_by_account_id_get: {
        parameters: {
            query: {
                account_id: string | null;
                limit?: number | null;
                network_type?: components['schemas']['NetworkTypesViewEnum'];
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworksListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_by_company_id_v2_networks_by_company_id_get: {
        parameters: {
            query: {
                company_id: string;
                limit?: number | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworksListView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_members_v2_networks_members_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_types_v2_networks_types_get: {
        parameters: {
            query?: {
                account_id?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkTypesView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_viewed_v2_networks_mark_viewed_patch: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_networks_feed_v2_networks_feed_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_by_id_v2_networks__network_id__get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworksByIDView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_members_by_network_id_v2_networks__network_id__members_get: {
        parameters: {
            query?: {
                limit?: number | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkByIdMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_network_members_v2_networks__network_id__members_search_get: {
        parameters: {
            query?: {
                limit?: number;
                type?: components['schemas']['WorkingTypeEnum'] | null;
                query?: string | null;
                status_id?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__networks__view_models__NetworkMembersView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    change_network_settings_v2_networks__network_id__settings_patch: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['Body_change_network_settings_v2_networks__network_id__settings_patch'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_feed_v2_networks__network_id__feed_get: {
        parameters: {
            query?: {
                type?: components['schemas']['WorkingTypeEnum'] | null;
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_info_v2_networks__network_id__info_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkInfo'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_unread_presence_notification_v2_networks_unread_notification_about_presence_count_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UnreadNotificationsView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_vacancies_v2_networks__network_id__vacancies_get: {
        parameters: {
            query?: {
                role_id?: string[] | null;
                limit?: number;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                network_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostWithNetworkShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_roles_v2_networks__network_id__roles_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RoleShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_network_vacancies_count_v2_networks__network_id__vacancies_counter_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                network_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NetworkVacanciesCountView'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_reaction_v2_chats_reactions__message_id__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AddReactionRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_reaction_v2_chats_reactions__message_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path: {
                message_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chats_v2_chats_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
                messages_number?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chats_partners_v2_chats_share_get: {
        parameters: {
            query?: {
                limit?: number;
                query?: string | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatPartnersViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_chat_messages_v2_chats__recipient_id__get: {
        parameters: {
            query?: {
                limit?: number | null;
                direction?: components['schemas']['MessagesDirection'] | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                recipient_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChatMessagesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_chat_v2_chats__recipient_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                recipient_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_messages_v2_chats_messages_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMessageRequestViewModel'][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SendMessageViewModel'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_message_v2_chats_messages__message_id__put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateMessageRequestViewModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessageViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    remove_message_v2_chats_messages__message_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_message_read_v2_chats__recipient_id__mark_read_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                recipient_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MarkMessageReadRequestModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_attachment_v2_chats_messages__message_id__attachments_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['Body_create_attachment_v2_chats_messages__message_id__attachments_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AttachmentViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    delete_attachment_v2_chats_attachments__attachment_id__delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                attachment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_notifications_as_read_v2_notifications_mark_all_read_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_notifications_as_read_v2_notifications_mark_as_read_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MarkNotificationAsReadRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationStateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_unread_total_notifications_v2_notifications_unread_total_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    hide_notifications_v2_notifications_hide_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['HideNotificationRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationStateResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_notification_feed_v2_notifications_feed_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotificationFeedResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_user_notification_preferences_v2_notification_preferences_get: {
        parameters: {
            query?: {
                category?: components['schemas']['RecepientNotificationPreferencesTypeEnum'] | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RecepientPreferencesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_user_notification_preferences_v2_notification_preferences_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateRecepientPreferencesRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RecepientPreferencesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_invites_v2_invites_hh_invite_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Body_send_invites_v2_invites_hh_invite_post'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_post_as_uninteresting_v2_posts__post_id__mark_uninteresting_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    unmark_post_as_uninteresting_v2_posts__post_id__mark_uninteresting_cancel_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_views_by_role_statistics_v2_posts__post_id__stats_views_by_role_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostViewsByRoleStatisticsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_views_by_group_role_statistics_v2_posts__post_id__stats_views_by_group_role_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__posts__view_models__PostViewsByGroupRoleStatisticsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_post_view_v2_posts__post_id__view_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_desired_info_v2_posts__post_id__desired_info_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostDesiredInfoViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_desired_info_with_entities_v2_posts__post_id__full_desired_info_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PostDesiredInfoWithEntitiesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    set_ip_to_ratelimit_whitelist_v2_rate_limit_whitelist_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_reposted_accounts_v2_reposts__post_id__reposted_by_accounts_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__reposts__view_models__RepostedAccountsListViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_reposted_channels_v2_reposts__post_id__reposted_by_channels_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path: {
                post_id: string;
            };
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channels_to_repost_v2_reposts_channels_to_repost_get: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChannelShortListResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_status_v2_status_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['StatusGetResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_proxy_to_hh_v2_uploads_hh_get: {
        parameters: {
            query: {
                url_path: string;
                t: string;
                h: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_default_avatar_for_user_v2_uploads_default_avatar_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    remove_reaction_v2_messages__message_id__reaction_remove_delete: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_reaction_v2_messages__message_id__reaction_add_post: {
        parameters: {
            query?: never;
            header: {
                'idempotency-key': string;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MessageReactionAddRequestViewModel'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MessageReactionAddResponseViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_message_reactions_v2_messages__message_id__reactions_get: {
        parameters: {
            query?: {
                reaction_id?: string | null;
                limit?: number | null;
                cursor?: string | null;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__messages__view_models__MessageReactionsGetViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    search_v2_mentions_accounts_search_get: {
        parameters: {
            query?: {
                text?: string;
                limit?: number;
                cursor?: string;
                with_acc_p2p_channel?: boolean;
                with_acc_relations?: boolean;
                with_work_experience?: boolean;
                with_complaint?: boolean;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
                authorization?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__mentions__view_models__MentionsSearchResultResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    process_checkstep_webhook_v2_moderation_checkstep_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    get_ws_connection_url_v2_ws_url_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WsConnectUrl'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    send_ping_message_v2_ws_ping_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_feeds_interacrions_v2_feeds_interactions_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FeedsInteractionsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    track_push_v2_track_push_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TrackPushRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_target_roles_v2_targeting_roles_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetRolesViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_channel_target_settings_v2_targeting_channel__channel_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_channel_target_settings_v2_targeting_channel__channel_id__post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateOrUpdateChannelTargetSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_target_settings_v2_targeting_account_target_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_or_update_account_target_settings_v2_targeting_account_target_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateOrUpdateAccountTargetSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_post_target_settings_v2_targeting_post__post_id__get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__target__view_models__TargetSettingsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_all_profile_views_v2_profile_views_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['jager_app__presentation__rest__public__v2__profile_views__view_models__ListProfileViewsViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    create_profile_view_v2_profile_views_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateProfileViewRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    mark_all_profile_views_v2_profile_views_mark_all_read_post: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_profile_view_settings_v2_profile_views_settings_put: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateProfileViewSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_support_sessions_v2_user_support_session_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupportChat'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_job_search_checklist_v2_checklists_job_search_get: {
        parameters: {
            query?: never;
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['JobSearchChecklistViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_vacancy_status_v2_vacancies_status_get: {
        parameters: {
            query: {
                link: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VacancyStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resume_status_v2_resumes_status_get: {
        parameters: {
            query: {
                link: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumeStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_resume_status_v3_resumes_status_get: {
        parameters: {
            query: {
                link: string;
            };
            header: {
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id': string;
                /** @description Список с доступами, получаемый на стороне гейтвея после валидации */
                'x-permissions': string[];
                /** @description Список с ролями, получаемый на стороне гейтвея после валидации */
                'x-roles': string[];
                /** @description Устаревший целочисленный идентификатор пользователя полученный после валидации гейтвеем */
                'x-legacy-id': number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ResumeStatusViewModel'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_invites_admin_invites_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitesResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    gen_invite_admin_invite_gen_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_account_invites_admin_invite_by_account_id_get: {
        parameters: {
            query: {
                accountId: number;
            };
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    add_invites_admin_invite_add_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AddInvitesRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    get_settings_admin_settings__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SettingsResponse'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    update_settings_admin_settings_update_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateSettingsRequest'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    load_countries_from_geo_db_admin_v1_geo_db_countries_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    load_cities_from_geo_db_admin_v1_geo_db_cities_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                /** @description Идентификатор пользователя полученный после валидации гейтвеем */
                'x-user-id'?: string | null;
            };
            path?: never;
            cookie?: {
                jgtoken?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
}
